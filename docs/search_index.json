[["index.html", "AlberdiLab | Romeo et al. 2024 Study title to be added Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Romeo et al. 2024 Study title to be added Claudia Romeo1, […], and Antton Alberdi2 Last update: 2025-03-04 Chapter 1 Introduction This webbook contains all the code used for the analysis of metagenomic data from invasive Sciurus carolinensis and native Sciurus vulgaris squirrels along urbanization gradients and across seasons. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/invasion_hologenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rmarkdown) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(aplot) library(ggh4x) library(mapproj) library(RColorBrewer) library(reshape2) library(ggResidpanel) library(tidybayes) # For statistics library(vegan) library(Rtsne) library(hilldiv2) library(distillR) library(broom.mixed) library(gtsummary) library(car) library(Hmsc) library(corrplot) library(brms) library(parameters) library(bayestestR) library(pairwiseAdonis) library(ANCOMBC) University of Copenhagen, claudia.romeo@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation", " Chapter 2 Data preparation 2.0.0.1 Sample metadata sample_metadata &lt;- read.csv(&quot;data/squirrels_metadata.csv&quot;,sep=&quot;;&quot;,header=T) sample_metadata &lt;- sample_metadata %&gt;% filter(!is.na(sampleID)) 2.0.0.2 Read counts This is the document containing the number of sequencing reads from each sample have been mapped to each MAG. Note that this is the raw data that needs to be further processed before running any statistics on them. read_counts &lt;- read.csv(&quot;data/squirrels_counts.csv&quot;, sep=&quot;;&quot;) %&gt;% rename(genome = 1) Generate a vector of genome names to be employed for filtering and sorting data in downstream steps. genomes &lt;- read_counts$genome # create list of genome names 2.0.0.3 Genome coverage Proportion of each genome covered by sequencing reads. genome_coverage &lt;- read.csv(&quot;data/squirrels_coverage.csv&quot;, sep=&quot;;&quot;) %&gt;% rename(genome = 1) 2.0.0.4 Genome metadata genome_metadata &lt;- read.csv(&quot;data/squirrels_mag_info.csv&quot;,sep=&quot;;&quot;) %&gt;% rename(length=mag_size) %&gt;% arrange(match(genome, read_counts$genome)) 2.0.0.5 Coverage filtering Genomes that have less than 30% of their length covered by reads are turned into zeros to account for the random allocation of reads across genomes due to mapping heuristics. min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.0.0.6 Generate genome count table After filtering the low-coverage reads, read counts are transformed into genome counts using genome-length and read-length information. readlength=150 #change if sequencing read length is different genome_counts &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) %&gt;% select_if(~!all(. == 0)) #remove samples with no MAGs 2.0.0.7 Genome tree genome_tree &lt;- read.tree(&quot;data/squirrels.tree&quot;) 2.0.0.8 Genome annotations genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) 2.0.0.9 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19)) saveRDS(genome_gifts, file=&quot;data/genome_gifts.rds&quot;) genome_gifts &lt;- as.data.frame(readRDS(&quot;data/genome_gifts.rds&quot;)) 2.0.0.10 Colour palettes ehi_phylum_colors &lt;- read.table(&quot;data/ehi_phylum_colors.tsv&quot;,sep=&quot;\\t&quot;,header=T,comment.char = &quot;&quot;) phylum_colors &lt;- ehi_phylum_colors %&gt;% mutate(colors2 = if_else(phylum==&quot;p__Bacillota&quot;, &#39;#074759&#39;, if_else(phylum==&quot;p__Bacillota_A&quot;, &#39;#0c80a2&#39;, if_else(phylum==&quot;p__Bacillota_B&quot;, &#39;#10acd9&#39;, if_else(phylum==&quot;p__Bacillota_C&quot;, &#39;#7ddaf5&#39;, if_else(phylum==&quot;p__Actinomycetota&quot;, &#39;#C7B3E0&#39;, if_else(phylum==&quot;p__Pseudomonadota&quot;, &#39;#f5aa74&#39;, if_else(phylum==&quot;p__Thermoplasmatota&quot;, &#39;#f07e2a&#39;, if_else(phylum==&quot;p__Verrucomicrobiota&quot;, &#39;#77638A&#39;, if_else(phylum==&quot;p__Cyanobacteriota&quot;, &#39;#94cc84&#39;, if_else(phylum==&quot;p__Elusimicrobiota&quot;, &#39;#226d1b&#39;, colors ))))))))))) #9E8DAD #08D1D1 #ccffbc #5c9c4f #08a26b ehi_colors &lt;- phylum_colors %&gt;% pull(colors) names(ehi_colors) &lt;- phylum_colors$phylum custom_colors &lt;- phylum_colors %&gt;% pull(colors2) names(custom_colors) &lt;- phylum_colors$phylum gift_colors &lt;- read.table(&quot;data/gift_colors.tsv&quot;,sep=&quot;\\t&quot;,header=T,comment.char = &quot;&quot;) squirrel_colors &lt;- c(&quot;#999999&quot;, &quot;#cc3333&quot;) names(squirrel_colors) &lt;- c(&quot;Sciurus carolinensis&quot;, &quot;Sciurus vulgaris&quot;) season_colors &lt;- c(&quot;#76b183&quot;,&quot;#d98a41&quot;,&quot;#6b7398&quot;) #e5bd5b names(season_colors) &lt;- c(&quot;spring-summer&quot;, &quot;autumn&quot;, &quot;winter&quot;) area_colors &lt;- c(&quot;#3d6a4b&quot;,&quot;#94a766&quot;,&quot;#c1cca7&quot;) names(area_colors) &lt;- c(&quot;rural&quot;, &quot;suburban&quot;, &quot;urban&quot;) sex_colors &lt;- c(&quot;turquoise3&quot;, &quot;indianred2&quot;) names(sex_colors) &lt;- c(&quot;M&quot;, &quot;F&quot;) 2.0.0.11 Wrap working objects In the last step, the objects that are needed for downstream analyses are stored in an R object. save(read_counts, read_counts_filt, genome_counts, genome_tree, genome_metadata, genome_gifts, sample_metadata, custom_colors, ehi_colors, phylum_colors, gift_colors, squirrel_colors, season_colors, area_colors, sex_colors, file = &quot;data/squirrels_data.Rdata&quot;) "],["data-summary.html", "Chapter 3 Data Summary 3.1 Sample summary 3.2 Sequencing data summary 3.3 MAGs summary", " Chapter 3 Data Summary rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) 3.1 Sample summary Summary of sampled individuals and analysed faecal samples. #number of samples length(sample_metadata$sample) [1] 190 #number of samples by species sample_metadata %&gt;% group_by(species) %&gt;% summarise(n_samples = length(sample)) %&gt;% tt() tinytable_dhe9dixmrt3oq3fo2o9v .table td.tinytable_css_68zbmi1bg666coc1zfo2, .table th.tinytable_css_68zbmi1bg666coc1zfo2 { border-bottom: solid 0.1em #d3d8dc; } species n_samples Sciurus carolinensis 80 Sciurus vulgaris 110 #number of samples by species and sex sample_metadata %&gt;% filter(development==&quot;Adult&quot;) %&gt;% group_by(species, sex) %&gt;% summarise(n_samples = length(sample)) %&gt;% tt() tinytable_383be5cn7yazsw9lvha6 .table td.tinytable_css_vsfsqlv1n9b1dtlgh9fs, .table th.tinytable_css_vsfsqlv1n9b1dtlgh9fs { border-bottom: solid 0.1em #d3d8dc; } species sex n_samples Sciurus carolinensis F 37 Sciurus carolinensis M 34 Sciurus vulgaris F 43 Sciurus vulgaris M 47 #number of samples by species and development sample_metadata %&gt;% group_by(species, development) %&gt;% summarise(n_samples = length(sample)) %&gt;% tt() tinytable_smucn2le1b16dgtkca07 .table td.tinytable_css_q4jt8n1lpfcofc1kvmik, .table th.tinytable_css_q4jt8n1lpfcofc1kvmik { border-bottom: solid 0.1em #d3d8dc; } species development n_samples Sciurus carolinensis Adult 71 Sciurus carolinensis Juvenile 2 Sciurus carolinensis Nursing 3 Sciurus carolinensis Pregnant 4 Sciurus vulgaris Adult 90 Sciurus vulgaris Juvenile 1 Sciurus vulgaris Nursing 8 Sciurus vulgaris Pregnant 11 #number of samples by species and type of area sample_metadata %&gt;% group_by(species,area_type) %&gt;% summarise(n_samples = length(sample)) %&gt;% tt() tinytable_q93295t3szzq5spkfhja .table td.tinytable_css_8vc2ftut9szu86qqufve, .table th.tinytable_css_8vc2ftut9szu86qqufve { border-bottom: solid 0.1em #d3d8dc; } species area_type n_samples Sciurus carolinensis rural 29 Sciurus carolinensis suburban 24 Sciurus carolinensis urban 27 Sciurus vulgaris rural 37 Sciurus vulgaris suburban 30 Sciurus vulgaris urban 43 #number of distinct squirrels n_distinct(sample_metadata$animal) [1] 108 #number of squirrels by species and type of area sample_metadata %&gt;% group_by(species,area_type) %&gt;% summarise(distinct_squirrels = n_distinct(animal)) %&gt;% tt() tinytable_oqd9d7illdwgthta6nii .table td.tinytable_css_9m3419u3du0rwp0nxmzj, .table th.tinytable_css_9m3419u3du0rwp0nxmzj { border-bottom: solid 0.1em #d3d8dc; } species area_type distinct_squirrels Sciurus carolinensis rural 14 Sciurus carolinensis suburban 13 Sciurus carolinensis urban 18 Sciurus vulgaris rural 21 Sciurus vulgaris suburban 14 Sciurus vulgaris urban 28 #number of squirrels by species and season sample_metadata %&gt;% group_by(species,season) %&gt;% summarise(distinct_squirrels = n_distinct(animal)) %&gt;% tt() tinytable_1cpf0xwk116aqc2hbk2f .table td.tinytable_css_pafs4lyufrga00tk4naa, .table th.tinytable_css_pafs4lyufrga00tk4naa { border-bottom: solid 0.1em #d3d8dc; } species season distinct_squirrels Sciurus carolinensis autumn 33 Sciurus carolinensis spring-summer 22 Sciurus carolinensis winter 25 Sciurus vulgaris autumn 39 Sciurus vulgaris spring-summer 38 Sciurus vulgaris winter 33 #n of analysed faecal samples ncol(read_counts) [1] 191 Geographical location of sampled red squirrel (light blue) and grey squirrel (pink) populations in Italy. #Summarise for generating map options(dplyr.summarise.inform = FALSE) sample_metadata_summary &lt;- sample_metadata %&gt;% #Group by geography and count samples select(sample, latitude, longitude, country, species) %&gt;% group_by(latitude, longitude, species) %&gt;% summarize(count = n()) %&gt;% ungroup() italy &lt;- map_data(&quot;world&quot;, region=&quot;italy&quot;) %&gt;% summarise(long = mean(long), lat = mean(lat)) #plotting on map sample_metadata_summary %&gt;% ggplot(.) + #render map geom_map( data=map_data(&quot;world&quot;, region=&quot;italy&quot;), map = map_data(&quot;world&quot;, region=&quot;italy&quot;), aes(long, lat, map_id=region), color = &quot;white&quot;, fill = &quot;#e6e6e6&quot;, linewidth = 0.2 ) + #render points geom_point( aes(x=longitude,y=latitude, color=species), alpha=0.7, shape=16) + scale_color_manual(values=squirrel_colors) + #add general plot layout theme_minimal() + theme(legend.position = &quot;right&quot;, axis.title.x=element_blank(), axis.title.y=element_blank() ) + coord_map(&quot;mercator&quot;) 3.2 Sequencing data summary Total amount of sequencing data generated from the analysed samples. #amount of discarded data (GB) sum(round(((sample_metadata$metagenomic_bases+sample_metadata$host_bases)/ (1-sample_metadata$bases_lost_fastp_percent))- (sample_metadata$metagenomic_bases+sample_metadata$host_bases)))/1000000000 [1] 63.90045 #amount of host data (GB) sum(sample_metadata$host_bases)/1000000000 [1] 166.0275 #amount of metagenomic data (GB) sum(sample_metadata$metagenomic_bases)/1000000000 [1] 786.1584 #amount of estimated prokaryotic data (singleM) sum(sample_metadata$metagenomic_bases * sample_metadata$singlem_fraction)/1000000000 [1] 557.7475 Origin of DNA sequences obtained from each sample. sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample,mags_bases,unmapped_bases,host_bases,lowqual_bases) mags_bases_mean &lt;- sequence_fractions %&gt;% mutate(mags_bases = mags_bases / 1000000000) %&gt;% select(mags_bases) %&gt;% pull() %&gt;% mean() sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(values=c(&quot;#CCCCCC&quot;,&quot;#178a94&quot;,&quot;#ee8080&quot;,&quot;#d03161&quot;)) + geom_hline(yintercept = mags_bases_mean, linetype = &quot;dashed&quot;, color = &quot;black&quot;) + labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_blank()) Sequencing assessment: difference between mapping rate and estimated singleM proportion # Estimated vs mapped prokaryotic fraction sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample,mags_bases,unmapped_bases,host_bases,lowqual_bases) singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(values=c(&quot;#52e1e8&quot;,&quot;#876b53&quot;)) + theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust = 1, size=6), axis.text.y= element_blank(), legend.position = &quot;right&quot;) # Export difference b/w mags and singlem proportions to be used later in script 05-diversity_models singlem &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% mutate(mags_singlem = mags_proportion/singlem_proportion) %&gt;% mutate(est_mapp = ifelse(mags_singlem &gt;= 1, 1, mags_singlem)) %&gt;% select(sample,mags_singlem,est_mapp) write.table(singlem, file = &quot;data/singlem.csv&quot;, row.names = FALSE, dec = &quot;.&quot;, sep = &quot;;&quot;, quote = FALSE) 3.3 MAGs summary #number of MAGs nrow(read_counts) [1] 1687 #number of MAGs without species-level annotation (i.e., &quot;new species&quot;) genome_metadata %&gt;% filter(species == &quot;s__&quot;) %&gt;% nrow() [1] 1455 #number of phylums genome_metadata %&gt;% select(phylum) %&gt;% unique() %&gt;% pull() %&gt;% length() [1] 13 "],["mags-overview.html", "Chapter 4 MAGs overview 4.1 MAGs phylogeny 4.2 Genome quality 4.3 Functional attributes of MAGs 4.4 Functional ordination of MAGs (distillr)", " Chapter 4 MAGs overview rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) 4.1 MAGs phylogeny # Which phylum the MAG belongs to phyla &lt;- phylum_colors %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors2) %&gt;% unique() # What is the genome size of the MAG in MBs (megabases) lengths &lt;- genome_metadata %&gt;% select(c(genome,length)) %&gt;% mutate(length=round(length/1000000,2)) # What is the completeness of the MAG mag_completeness &lt;- genome_metadata %&gt;% select(c(genome,completeness)) %&gt;% as.data.frame() %&gt;% remove_rownames() %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate the phylum color heatmap phylum_heatmap &lt;- phylum_colors %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Create baseline circular genome tree circular_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., layout = &#39;circular&#39;, size = 0.1, angle=45) + xlim(-1, NA) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.05, width=0.3, colnames=FALSE) + scale_fill_manual(values=custom_colors, name=&quot;Phylum&quot;) + #geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;right&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + #new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;, name=&quot;Genome\\ncontamination&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=lengths, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) #Plot circular tree circular_tree 4.2 Genome quality genome_metadata$completeness %&gt;% mean() [1] 84.89347 genome_metadata$completeness %&gt;% sd() [1] 15.4699 genome_metadata$contamination %&gt;% mean() [1] 2.013071 genome_metadata$contamination %&gt;% sd() [1] 2.10322 #create input table from original genome table genome_details &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% mutate(length=round(length/1000000,2)) %&gt;% #change length to MBs rename(comp=completeness,cont=contamination,size=length) %&gt;% #rename columns remove_rownames() %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) #sort MAGs according to phylogenetic tree #generate genome quality biplot genome_stats_biplot &lt;- genome_details %&gt;% ggplot(aes(x=comp,y=cont,size=size,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=custom_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #generate contamination boxplot genome_stats_cont &lt;- genome_details %&gt;% ggplot(aes(y=cont)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #generate completeness boxplot genome_stats_comp &lt;-genome_details %&gt;% ggplot(aes(x=comp)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #create composite figure grid.arrange(grobs = list(genome_stats_comp,genome_stats_biplot,genome_stats_cont), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional attributes of MAGs #Generate a basal utrametric tree for the sake of visualisation gift_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips gift_tree &lt;- gheatmap(gift_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE, color=NA) + scale_fill_manual(values=custom_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap gift_tree &lt;- gift_tree + new_scale_fill() #Add functions heatmap gift_tree &lt;- gheatmap(gift_tree, genome_gifts, offset=0.5, width=3.5, colnames=FALSE, color=NA) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;)+ labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap gift_tree &lt;- gift_tree + new_scale_fill() # Add completeness barplots gift_tree &lt;- gift_tree + geom_fruit(data=genome_metadata, geom=geom_bar, #grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) #Plot combined tree + heatmap gift_tree + theme(legend.position=&#39;right&#39;) 4.4 Functional ordination of MAGs (distillr) # Generate the tSNE ordination tSNE_func2 &lt;- Rtsne(X=genome_gifts, dims = 2, check_duplicates = FALSE) # Plot the ordination tSNE_func2$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(genome_gifts)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, completeness) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=completeness))+ geom_point(shape=16, alpha=0.6) + scale_color_manual(values=custom_colors) + theme_minimal() + theme(legend.position = &quot;right&quot;) + guides(colour = guide_legend(override.aes = list(size=5, alpha=0.9))) "],["community-composition.html", "Chapter 5 Community composition 5.1 Count data preparation 5.2 Overview of genomes by host species 5.3 Genomes counts 5.4 Taxonomic composition of samples 5.5 Taxonomic composition by host species", " Chapter 5 Community composition rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) 5.1 Count data preparation genome_counts_log &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% mutate_all(~log10(.+1)) #fixed: mutate_at(vars(), ~log10(.+1))) was not working genome_counts_pivot &lt;- genome_counts %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) # %&gt;% #append taxonomy # mutate(phylum = fct_relevel(phylum, rev(ehi_phylum_colors$phylum))) #sort phyla by taxonomy genome_counts_by_host &lt;- sample_metadata %&gt;% select(&quot;sample&quot;,&quot;species&quot;,&quot;area_type&quot;, &quot;development&quot;) %&gt;% rename(host_sp=species) %&gt;% left_join(genome_counts_pivot,., by=join_by(&quot;sample&quot; == &quot;sample&quot;)) #%&gt;% # Which host species each genome can be found in genomes_by_species &lt;- genome_counts_by_host %&gt;% filter(count&gt;0) %&gt;% group_by(genome) %&gt;% mutate(host = if_else(all(host_sp == &quot;Sciurus vulgaris&quot;), &quot;only red&quot;, if_else(all(host_sp == &quot;Sciurus carolinensis&quot;), &quot;only grey&quot;, &quot;both&quot;))) %&gt;% select(genome, host) %&gt;% distinct(genome, .keep_all = TRUE) %&gt;% left_join(.,genome_metadata, by=&#39;genome&#39;) genomes_by_species$host &lt;-factor(genomes_by_species$host, levels = c(&quot;both&quot;, &quot;only red&quot;, &quot;only grey&quot;)) 5.2 Overview of genomes by host species # Generate the phylum color heatmap phylum_heatmap &lt;- genome_metadata %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Create baseline circular genome tree circular_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., layout = &#39;circular&#39;, size = 0.1, angle=45) + xlim(-1, NA) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.0, width=0.3, colnames=FALSE) + scale_fill_manual(values=custom_colors, name=&quot;Phylum&quot;) + #geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;right&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) #Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add host ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = c(&quot;black&quot;, &quot;#ed2939&quot;, &quot;#92a0ad&quot;), name=&quot;Host\\nspecies&quot;) + #&quot;#cc3333&quot;, &quot;#999999&quot; geom_fruit( data=genomes_by_species, geom=geom_tile, mapping = aes(y=genome, fill=host), offset = 0.55, width=0.3) #Plot circular tree circular_tree #MAGs by host species genomes_by_species %&gt;% dplyr::group_by(host) %&gt;% summarise(n=length(host), percentage=(length(host)/1687)*100) %&gt;% tt() tinytable_1e1au7glpgzwk73pxc13 .table td.tinytable_css_g9gu77e3g1ymz68j9btp, .table th.tinytable_css_g9gu77e3g1ymz68j9btp { border-bottom: solid 0.1em #d3d8dc; } host n percentage both 505 29.93480 only red 482 28.57143 only grey 700 41.49378 5.3 Genomes counts vertical_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors vertical_tree &lt;- gheatmap(vertical_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE, color=NA) + scale_fill_manual(values=custom_colors) #Reset fill scale vertical_tree &lt;- vertical_tree + new_scale_fill() #Add counts vertical_tree &lt;- gheatmap(vertical_tree, genome_counts_log, offset=0.5, width=3.5, color=NA, colnames=FALSE) + #, colnames_angle=90, font.size=2, colnames_position=&quot;top&quot;, colnames_offset_y = 9 vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) #Plot tree vertical_tree + theme(legend.position=&#39;right&#39;) 5.4 Taxonomic composition of samples # Plot stacked barplot ggplot(genome_counts_by_host, aes(x=sample,y=count,fill=phylum, group=phylum))+ #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.02)+ #plot stacked bars with white borders scale_fill_manual(values=custom_colors, name=&quot;Phylum&quot;) + labs(y = &quot;Relative abundance&quot;) + guides(fill = guide_legend(ncol = 1)) + facet_nested(~host_sp, scales=&quot;free&quot;, space=&quot;free&quot;) + theme(axis.text.x = element_blank(), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position=&quot;right&quot;, ) 5.5 Taxonomic composition by host species 5.5.1 Phylum level prev_phyla_Sv &lt;- genome_counts_by_host %&gt;% filter(host_sp==&quot;Sciurus vulgaris&quot;) %&gt;% mutate(n = n_distinct(sample)) %&gt;% ungroup() %&gt;% filter(count&gt;0) %&gt;% group_by(phylum) %&gt;% summarise( pos = n_distinct(sample), n = first(n), prevalence = (pos / n)*100 ) abun_phyla_Sv &lt;- genome_counts_by_host %&gt;% filter(host_sp==&quot;Sciurus vulgaris&quot;) %&gt;% group_by(sample, phylum) %&gt;% summarise(sum_abundance=sum(count)) %&gt;% group_by(phylum) %&gt;% summarise(mean_abundance=mean(sum_abundance), sd=sd(sum_abundance)) #prevalence and abundance of phyla in S. vulgaris prev_phyla_Sv %&gt;% left_join(abun_phyla_Sv, by = &quot;phylum&quot;) %&gt;% arrange(desc(prevalence)) %&gt;% paged_table() prev_phyla_Sc &lt;- genome_counts_by_host %&gt;% filter(host_sp==&quot;Sciurus carolinensis&quot;) %&gt;% mutate(n = n_distinct(sample)) %&gt;% ungroup() %&gt;% filter(count&gt;0) %&gt;% group_by(phylum) %&gt;% summarise( pos = n_distinct(sample), n = first(n), prevalence = (pos / n)*100 ) abun_phyla_Sc &lt;- genome_counts_by_host %&gt;% filter(host_sp==&quot;Sciurus carolinensis&quot;) %&gt;% group_by(sample, phylum) %&gt;% summarise(sum_abundance=sum(count)) %&gt;% group_by(phylum) %&gt;% summarise(mean_abundance=mean(sum_abundance), sd=sd(sum_abundance)) #prevalence and abundance of phyla in S. carolinensis prev_phyla_Sc %&gt;% left_join(abun_phyla_Sc, by = &quot;phylum&quot;) %&gt;% arrange(desc(prevalence)) %&gt;% paged_table() phylum_summary &lt;- genome_counts_by_host %&gt;% group_by(sample,host_sp,phylum) %&gt;% summarise(relabun=sum(count)) # phylum_summary %&gt;% # group_by(phylum) %&gt;% # summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% # paged_table() phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=custom_colors, name=&quot;Phylum&quot;) + geom_jitter(alpha=0.5) + facet_nested(~host_sp, scales=&quot;free&quot;, space=&quot;free&quot;) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 5.5.2 Family level #most prevalent families by host species genome_counts_by_host %&gt;% group_by(host_sp) %&gt;% mutate(n = n_distinct(sample)) %&gt;% ungroup() %&gt;% filter(count&gt;0) %&gt;% group_by(host_sp, phylum, family) %&gt;% summarise( pos = n_distinct(sample), n = first(n), prevalence = (pos / n)*100 ) %&gt;% group_by(host_sp) %&gt;% top_n(5, prevalence) %&gt;% arrange(host_sp, desc(prevalence)) %&gt;% paged_table() #most abundant families by host species genome_counts_by_host %&gt;% group_by(host_sp, sample, phylum, family) %&gt;% summarise(sum_abundance = sum(count)) %&gt;% group_by(host_sp, phylum, family) %&gt;% summarise(mean_abundance=mean(sum_abundance), sd=sd(sum_abundance)) %&gt;% arrange(host_sp, desc(mean_abundance)) %&gt;% # Sort within each host_sp group by abundance group_by(host_sp) %&gt;% slice_max(order_by = mean_abundance, n = 5) %&gt;% # Select the top 5 families per host_sp ungroup() %&gt;% arrange(host_sp, desc(mean_abundance)) %&gt;% paged_table() family_summary &lt;- genome_counts_by_host %&gt;% group_by(sample,host_sp,family) %&gt;% summarise(relabun=sum(count)) # family_summary %&gt;% # group_by(family) %&gt;% # summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% # arrange(-mean) %&gt;% # paged_table() family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=custom_colors) + geom_jitter(alpha=0.5) + facet_grid(.~host_sp)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) + guides(colour = guide_legend(override.aes = list(size=4, alpha=0.9))) 5.5.3 Genus level #most prevalent genera by host species genome_counts_by_host %&gt;% group_by(host_sp) %&gt;% mutate(N = n_distinct(sample)) %&gt;% ungroup() %&gt;% filter(count&gt;0) %&gt;% group_by(host_sp, phylum, family, genus) %&gt;% summarise( pos = n_distinct(sample), N = first(N), prevalence = (pos / N)*100 ) %&gt;% group_by(host_sp) %&gt;% top_n(5, prevalence) %&gt;% arrange(host_sp, desc(prevalence)) %&gt;% paged_table() #most abundant genera by host species genome_counts_by_host %&gt;% group_by(host_sp, sample, phylum, family, genus) %&gt;% summarise(sum_abundance = sum(count)) %&gt;% group_by(host_sp, phylum, family, genus) %&gt;% summarise(mean_abundance=mean(sum_abundance), sd=sd(sum_abundance)) %&gt;% arrange(host_sp, desc(mean_abundance)) %&gt;% # Sort within each host_sp group by abundance group_by(host_sp) %&gt;% slice_max(order_by = mean_abundance, n = 5) %&gt;% # Select the top 5 families per host_sp ungroup() %&gt;% arrange(host_sp, desc(mean_abundance)) %&gt;% paged_table() #NB: there are several unnamed genera from different families that get grouped together genus_summary &lt;- genome_counts_by_host %&gt;% group_by(sample,host_sp,genus) %&gt;% summarise(relabun=sum(count)) # genus_summary %&gt;% # group_by(genus) %&gt;% # summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% # arrange(-mean) %&gt;% # paged_table() genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=custom_colors) + geom_jitter(alpha=0.5) + facet_grid(.~host_sp)+ theme_minimal() + labs(y=&quot;Genus&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) + guides(colour = guide_legend(override.aes = list(size=5, alpha=0.9))) "],["differential-abundance-analysis.html", "Chapter 6 Differential abundance analysis 6.1 Data preparation 6.2 MAG level 6.3 Genus level 6.4 Family level 6.5 Phylum level", " Chapter 6 Differential abundance analysis rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) singlem &lt;- read.csv(&quot;data/singlem.csv&quot;,sep=&quot;;&quot;,header=T) 6.1 Data preparation 6.1.0.1 Select subset of most represented MAGs sample_metadata2 &lt;- sample_metadata %&gt;% right_join(singlem, by = join_by(sample == sample)) %&gt;% filter(development==&quot;Adult&quot;) %&gt;% #remove juveniles, nursing and pregnant females filter(est_mapp&gt;0.8) #remove 5 samples with low DAMR selected_genomes0 &lt;- sample_metadata2 %&gt;% pull(sample) # Subset by prevalence (present in more than 5 samples) selected_genomes1 &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(any_of(selected_genomes0)) %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) != 0) &gt;= 5) %&gt;% rownames() # Subset by minimum representation of 1% relative abundance in at least 5 samples selected_genomes2 &lt;- genome_counts %&gt;% filter(genome %in% selected_genomes1) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% hilldiv2::tss() %&gt;% as.data.frame() %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) &gt;= 0.01) &gt;= 5) %&gt;% rownames() # Subset genome metadata genome_metadata_subset &lt;- genome_metadata %&gt;% filter(genome %in% selected_genomes2) 6.1.0.2 Generate phyloseq objects #generating phyloseq objects phylo_samples &lt;- sample_metadata %&gt;% rename(host_sp=7) %&gt;% column_to_rownames(&quot;sample&quot;) %&gt;% sample_data() #convert to phyloseq sample_data object phylo_genome &lt;- genome_counts %&gt;% filter(genome %in% selected_genomes2) %&gt;% #filter(!genome %in% structural_zeros$genome) %&gt;% # remove structural zeros column_to_rownames(&quot;genome&quot;) %&gt;% #mutate_all(~ replace(., . == 0, 0.00001)) %&gt;% #add pseudo counts to avoid structural zero issues (note this approach can be improved!) otu_table(., taxa_are_rows = TRUE) phylo_taxonomy &lt;- genome_metadata_subset %&gt;% filter(genome %in% rownames(phylo_genome)) %&gt;% # remove structural zeros mutate(genome2=genome) %&gt;% #create a pseudo genome name column column_to_rownames(&quot;genome2&quot;) %&gt;% dplyr::select(domain,phylum,class,order,family,genus,species,genome) %&gt;% #add an additional taxonomic level to ensure genome-level analysis (as not all genomes have species-level taxonomic assignments. Otherwise, ANCOMBC2 aggregates analyses per species) as.matrix() %&gt;% tax_table() #convert to phyloseq tax_table object physeq_genome_filtered &lt;- phyloseq(phylo_genome, phylo_taxonomy, phylo_samples) physeq_sample &lt;- prune_taxa(taxa_sums(physeq_genome_filtered)&gt;0, physeq_genome_filtered) 6.2 MAG level set.seed(1234) #set seed for reproducibility ancombc_output &lt;- ancombc2(data = physeq_sample, assay_name = &quot;counts&quot;, tax_level = NULL, #change to agglomerate analysis to a higher taxonomic range fix_formula = &quot;host_sp&quot;, #fixed variable(s) # rand_formula = &quot;(1|animal)&quot;, p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut = 0, lib_cut = 0, s0_perc = 0.05, group = &quot;host_sp&quot;, struc_zero = TRUE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = FALSE, dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), # lme_control = lme4::lmerControl(), mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL) 6.2.1 Exclusive taxa taxonomy &lt;- data.frame(physeq_sample@tax_table) %&gt;% rownames_to_column(., &quot;taxon&quot;) #mutate_at(vars(phylum, order, family, genus, species), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;)) ancombc_szero_mag &lt;- ancombc_output$zero_ind %&gt;% mutate(present = ifelse(`structural_zero (host_sp = Sciurus carolinensis)` == TRUE, &#39;only red&#39;, ifelse(`structural_zero (host_sp = Sciurus vulgaris)`== TRUE, &#39;only grey&#39;, &#39;both&#39;))) %&gt;% select(taxon, present) %&gt;% filter(present!=&#39;both&#39;) %&gt;% left_join(taxonomy, by=&#39;taxon&#39;) %&gt;% left_join(genome_counts, join_by(&#39;taxon&#39;==&#39;genome&#39;)) %&gt;% mutate(average = select(., starts_with(&quot;EHI&quot;)) %&gt;% rowMeans(na.rm = TRUE)) %&gt;% select(- starts_with(&quot;EHI&quot;)) %&gt;% arrange(present,-average) ancombc_szero_mag %&gt;% group_by(present) %&gt;% count() %&gt;% print() # A tibble: 2 × 2 # Groups: present [2] present n &lt;chr&gt; &lt;int&gt; 1 only grey 77 2 only red 88 # family_arrange &lt;- ancombc_szero_mag %&gt;% # group_by(present,family) %&gt;% # summarise(relabun=sum(average)) %&gt;% # group_by(family) %&gt;% # arrange(-relabun) %&gt;% # distinct(family) %&gt;% # pull() # ancombc_szero_mag %&gt;% # mutate(family=factor(family,levels=rev(family_arrange))) %&gt;% # ggplot(aes(x=average, y=family, group=family, color=phylum)) + # scale_color_manual(values=custom_colors, name=&quot;Phylum&quot;) + # geom_jitter(alpha=0.5) + # facet_nested(~present, scales=&quot;free&quot;, space=&quot;free&quot;) + # theme_minimal() + # theme(legend.position=&quot;none&quot;) + # labs(y=&quot;Family&quot;,x=&quot;Relative abundance&quot;) # # ancombc_szero_mag %&gt;% # mutate(family=factor(family,levels=(family_arrange))) %&gt;% # ggplot(aes(x=average, y=genome, group=family, color=phylum)) + # scale_color_manual(values=custom_colors, name=&quot;Phylum&quot;) + # geom_jitter(alpha=0.5) + # facet_grid(family ~ present, space=&quot;free&quot;, scales=&quot;free&quot;) + # theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), # axis.text.y = element_blank(), # strip.text.y = element_text(angle = 0)) + # #theme_minimal() + # theme(legend.position=&quot;none&quot;) + # labs(y=&quot;Family&quot;,x=&quot;Relative abundance&quot;) phylum_arrange &lt;- ancombc_szero_mag %&gt;% group_by(present,phylum) %&gt;% summarise(relabun=sum(average)) %&gt;% group_by(phylum) %&gt;% arrange(-relabun) %&gt;% distinct(phylum) %&gt;% pull() ancombc_szero_mag %&gt;% mutate(phylum=factor(phylum,levels=(phylum_arrange))) %&gt;% ggplot(aes(x=average, y=family, group=family, color=phylum)) + scale_color_manual(values=custom_colors, name=&quot;Phylum&quot;) + geom_jitter(alpha=0.5) + facet_grid(phylum ~ present, space=&quot;free&quot;, scales=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), #axis.text.y = element_blank(), strip.text.y = element_text(angle = 0)) + #theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Family&quot;,x=&quot;Mean relative abundance&quot;) 6.2.2 Shared taxa #significance and sensitivity analysis ancombc_output$res %&gt;% mutate(p=ifelse(`p_host_spSciurus vulgaris` &lt; 0.05, &#39;sig&#39;, &#39;ns&#39;), ss=`passed_ss_host_spSciurus vulgaris`) %&gt;% group_by(p, ss) %&gt;% count() %&gt;% print() # A tibble: 4 × 3 # Groups: p, ss [4] p ss n &lt;chr&gt; &lt;lgl&gt; &lt;int&gt; 1 ns FALSE 12 2 ns TRUE 1 3 sig FALSE 55 4 sig TRUE 25 ancombc_table_mag &lt;- ancombc_output$res %&gt;% dplyr::select(taxon, `lfc_host_spSciurus vulgaris`, `p_host_spSciurus vulgaris`, `passed_ss_host_spSciurus vulgaris`) %&gt;% filter(`p_host_spSciurus vulgaris` &lt; 0.05) %&gt;% dplyr::arrange(`p_host_spSciurus vulgaris`) %&gt;% left_join(taxonomy, by = join_by(taxon == taxon)) %&gt;% #mutate_at(vars(phylum, species), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;))%&gt;% dplyr::arrange(`lfc_host_spSciurus vulgaris`) %&gt;% mutate(color_ss=ifelse(`passed_ss_host_spSciurus vulgaris`== TRUE, &quot;black&quot;, &quot;grey&quot;)) ancombc_table_mag%&gt;% mutate(genome=factor(genome,levels=ancombc_table_mag$genome)) %&gt;% ggplot(., aes(x=`lfc_host_spSciurus vulgaris`, y=forcats::fct_reorder(genome,`lfc_host_spSciurus vulgaris`), fill=phylum)) + #forcats::fct_rev() geom_col() + scale_fill_manual(values=custom_colors) + geom_hline(yintercept=0) + theme(panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 6, colour = ancombc_table_mag$color_ss), axis.title = element_text(size = 14, face = &quot;bold&quot;), legend.text = element_text(size = 12), legend.title = element_text(size = 14, face = &quot;bold&quot;), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;)+ xlab(&quot;log2FoldChange&quot;) + ylab(&quot;Genome&quot;) + guides(fill=guide_legend(title=&quot;Phylum&quot;)) #pdf(&quot;figures/different_species_StrucZero_new_violin.pdf&quot;,width=12, height=6) ancombc_output$res %&gt;% na.omit() %&gt;% dplyr::select(genome=taxon, `lfc_host_spSciurus vulgaris`, `p_host_spSciurus vulgaris`) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% mutate(phylum = ifelse(`p_host_spSciurus vulgaris` &lt; 0.05, phylum, NA)) %&gt;% ggplot(., aes(x = `lfc_host_spSciurus vulgaris`, y = -log(`p_host_spSciurus vulgaris`), color = phylum)) + geom_point(size=3, show.legend = FALSE, alpha=0.7) + #xlim(c(-10,4)) + scale_color_manual(values = custom_colors) + labs(color = &quot;Significant phylum&quot;, x = &quot;Log-fold difference between red and grey squirrels&quot;, y = &quot;p-value&quot;) + theme_classic() #dev.off() 6.3 Genus level set.seed(1234) #set seed for reproducibility ancombc_output_gen &lt;- ancombc2(data = physeq_sample, assay_name = &quot;counts&quot;, tax_level = &quot;genus&quot;, #change to agglomerate analysis to a higher taxonomic range fix_formula = &quot;host_sp&quot;, #fixed variable(s) # rand_formula = &quot;(1|animal)&quot;, p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut = 0, lib_cut = 0, s0_perc = 0.05, group = &quot;host_sp&quot;, struc_zero = TRUE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = FALSE, dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), # lme_control = lme4::lmerControl(), mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL) ancombc_output_gen$zero_ind %&gt;% mutate(present = ifelse(`structural_zero (host_sp = Sciurus carolinensis)` == TRUE, &#39;only red&#39;, ifelse(`structural_zero (host_sp = Sciurus vulgaris)`== TRUE, &#39;only grey&#39;, &#39;both&#39;))) %&gt;% group_by(present) %&gt;% count() %&gt;% print() # A tibble: 3 × 2 # Groups: present [3] present n &lt;chr&gt; &lt;int&gt; 1 both 52 2 only grey 27 3 only red 13 #significance and sensitivity analysis ancombc_output_gen$res %&gt;% mutate(p=ifelse(`p_host_spSciurus vulgaris` &lt; 0.05, &#39;sig&#39;, &#39;ns&#39;), ss=`passed_ss_host_spSciurus vulgaris`) %&gt;% group_by(p, ss) %&gt;% count() %&gt;% print() # A tibble: 4 × 3 # Groups: p, ss [4] p ss n &lt;chr&gt; &lt;lgl&gt; &lt;int&gt; 1 ns FALSE 5 2 ns TRUE 3 3 sig FALSE 20 4 sig TRUE 24 taxonomy_gen &lt;- data.frame(physeq_sample@tax_table) %&gt;% rownames_to_column(., &quot;taxon&quot;) %&gt;% select(phylum,genus) %&gt;% distinct(genus, .keep_all = TRUE) #mutate_at(vars(phylum, order, family, genus, species), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;)) ancombc_table_gen &lt;- ancombc_output_gen$res %&gt;% dplyr::select(genus=taxon, `lfc_host_spSciurus vulgaris`, `p_host_spSciurus vulgaris`, `passed_ss_host_spSciurus vulgaris`) %&gt;% filter(`p_host_spSciurus vulgaris` &lt; 0.05) %&gt;% dplyr::arrange(`p_host_spSciurus vulgaris`) %&gt;% left_join(.,taxonomy_gen, by = &quot;genus&quot;) %&gt;% #mutate_at(vars(phylum, species), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;))%&gt;% dplyr::arrange(`lfc_host_spSciurus vulgaris`) %&gt;% mutate(color_ss=ifelse(`passed_ss_host_spSciurus vulgaris`== TRUE, &quot;black&quot;, &quot;grey&quot;)) ancombc_table_gen%&gt;% #mutate(genus=factor(genus,levels=ancombc_table_mag$taxon)) %&gt;% ggplot(., aes(x=`lfc_host_spSciurus vulgaris`, y=forcats::fct_reorder(genus,`lfc_host_spSciurus vulgaris`), fill=phylum)) + #forcats::fct_rev() geom_col() + scale_fill_manual(values=custom_colors) + geom_hline(yintercept=0) + theme(panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 6, colour = ancombc_table_gen$color_ss), axis.title = element_text(size = 14, face = &quot;bold&quot;), legend.text = element_text(size = 12), legend.title = element_text(size = 14, face = &quot;bold&quot;), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;)+ xlab(&quot;log2FoldChange&quot;) + ylab(&quot;Genus&quot;) + guides(fill=guide_legend(title=&quot;Phylum&quot;)) #pdf(&quot;figures/different_species_StrucZero_new_violin.pdf&quot;,width=12, height=6) ancombc_output_gen$res %&gt;% na.omit() %&gt;% dplyr::select(genus=taxon, `lfc_host_spSciurus vulgaris`, `p_host_spSciurus vulgaris`) %&gt;% left_join(genome_metadata, by = join_by(genus == genus)) %&gt;% mutate(phylum = ifelse(`p_host_spSciurus vulgaris` &lt; 0.05, phylum, NA)) %&gt;% ggplot(., aes(x = `lfc_host_spSciurus vulgaris`, y = -log(`p_host_spSciurus vulgaris`), color = phylum)) + geom_point(size=3, show.legend = FALSE) + #xlim(c(-10,4)) + scale_color_manual(values = custom_colors) + labs(color = &quot;Significant phylum&quot;, x = &quot;Log-fold difference between red and grey squirrels&quot;, y = &quot;p-value&quot;) + geom_text(aes(2.5, 40), label = &quot;Enriched\\nin red squirrels&quot;, color=&quot;#666666&quot;) + geom_text(aes(-1, 40), label = &quot;Enriched\\nin grey squirrels&quot;, color=&quot;#666666&quot;) + labs(color=&quot;Phylum&quot;, y=&quot;Log-fold&quot;, x=&quot;-log p-value&quot;) + theme_classic() #dev.off() 6.4 Family level set.seed(1234) #set seed for reproducibility ancombc_output_fam &lt;- ancombc2(data = physeq_sample, assay_name = &quot;counts&quot;, tax_level = &quot;family&quot;, #change to agglomerate analysis to a higher taxonomic range fix_formula = &quot;host_sp&quot;, #fixed variable(s) # rand_formula = &quot;(1|animal)&quot;, p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut = 0, lib_cut = 0, s0_perc = 0.05, group = &quot;host_sp&quot;, struc_zero = TRUE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = FALSE, dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), # lme_control = lme4::lmerControl(), mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL) ancombc_output_fam$zero_ind %&gt;% mutate(present = ifelse(`structural_zero (host_sp = Sciurus carolinensis)` == TRUE, &#39;only red&#39;, ifelse(`structural_zero (host_sp = Sciurus vulgaris)`== TRUE, &#39;only grey&#39;, &#39;both&#39;))) %&gt;% group_by(present) %&gt;% count() %&gt;% print() # A tibble: 3 × 2 # Groups: present [3] present n &lt;chr&gt; &lt;int&gt; 1 both 16 2 only grey 9 3 only red 5 #significance and sensitivity analysis ancombc_output_fam$res %&gt;% mutate(p=ifelse(`p_host_spSciurus vulgaris` &lt; 0.05, &#39;sig&#39;, &#39;ns&#39;), ss=`passed_ss_host_spSciurus vulgaris`) %&gt;% group_by(p, ss) %&gt;% count() %&gt;% print() # A tibble: 4 × 3 # Groups: p, ss [4] p ss n &lt;chr&gt; &lt;lgl&gt; &lt;int&gt; 1 ns FALSE 2 2 ns TRUE 1 3 sig FALSE 6 4 sig TRUE 7 taxonomy_fam &lt;- data.frame(physeq_sample@tax_table) %&gt;% rownames_to_column(., &quot;taxon&quot;) %&gt;% select(phylum,family) %&gt;% distinct(family, .keep_all = TRUE) #mutate_at(vars(phylum, order, family, genus, species), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;)) ancombc_table_fam &lt;- ancombc_output_fam$res %&gt;% dplyr::select(family=taxon, `lfc_host_spSciurus vulgaris`, `p_host_spSciurus vulgaris`, `passed_ss_host_spSciurus vulgaris`) %&gt;% filter(`p_host_spSciurus vulgaris` &lt; 0.05) %&gt;% dplyr::arrange(`p_host_spSciurus vulgaris`) %&gt;% left_join(.,taxonomy_fam, by = &quot;family&quot;) %&gt;% #mutate_at(vars(phylum, species), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;))%&gt;% dplyr::arrange(`lfc_host_spSciurus vulgaris`) %&gt;% mutate(color_ss=ifelse(`passed_ss_host_spSciurus vulgaris`== TRUE, &quot;black&quot;, &quot;grey&quot;)) ancombc_table_fam%&gt;% #mutate(genus=factor(genus,levels=ancombc_table_mag$taxon)) %&gt;% ggplot(., aes(x=`lfc_host_spSciurus vulgaris`, y=forcats::fct_reorder(family,`lfc_host_spSciurus vulgaris`), fill=phylum)) + #forcats::fct_rev() geom_col() + scale_fill_manual(values=custom_colors) + geom_hline(yintercept=0) + theme(panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 6, colour = ancombc_table_fam$color_ss), axis.title = element_text(size = 14, face = &quot;bold&quot;), legend.text = element_text(size = 12), legend.title = element_text(size = 14, face = &quot;bold&quot;), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;)+ xlab(&quot;log2FoldChange&quot;) + ylab(&quot;Family&quot;) + guides(fill=guide_legend(title=&quot;Phylum&quot;)) #pdf(&quot;figures/different_species_StrucZero_new_violin.pdf&quot;,width=12, height=6) ancombc_output_fam$res %&gt;% na.omit() %&gt;% dplyr::select(family=taxon, `lfc_host_spSciurus vulgaris`, `p_host_spSciurus vulgaris`) %&gt;% left_join(genome_metadata, by = join_by(family == family)) %&gt;% mutate(phylum = ifelse(`p_host_spSciurus vulgaris` &lt; 0.05, phylum, NA)) %&gt;% ggplot(., aes(x = `lfc_host_spSciurus vulgaris`, y = -log(`p_host_spSciurus vulgaris`), color = phylum)) + geom_point(size=3, show.legend = FALSE) + #xlim(c(-10,4)) + scale_color_manual(values = custom_colors) + labs(color = &quot;Significant phylum&quot;, x = &quot;Log-fold difference between red and grey squirrels&quot;, y = &quot;p-value&quot;) + geom_text(aes(2.5, 40), label = &quot;Enriched\\nin red squirrels&quot;, color=&quot;#666666&quot;) + geom_text(aes(-1, 40), label = &quot;Enriched\\nin grey squirrels&quot;, color=&quot;#666666&quot;) + labs(color=&quot;Phylum&quot;, y=&quot;Log-fold&quot;, x=&quot;-log p-value&quot;) + theme_classic() #dev.off() 6.5 Phylum level set.seed(1234) #set seed for reproducibility ancombc_output_phy &lt;- ancombc2(data = physeq_sample, assay_name = &quot;counts&quot;, tax_level = &quot;phylum&quot;, #change to agglomerate analysis to a higher taxonomic range fix_formula = &quot;host_sp&quot;, #fixed variable(s) # rand_formula = &quot;(1|individual)&quot;, p_adj_method = &quot;holm&quot;, pseudo_sens = TRUE, prv_cut =0, lib_cut = 0, s0_perc = 0.05, group = &quot;host_sp&quot;, struc_zero = TRUE, neg_lb = FALSE, alpha = 0.05, n_cl = 2, verbose = TRUE, global = FALSE, pairwise = FALSE, dunnet = FALSE, trend = FALSE, iter_control = list(tol = 1e-5, max_iter = 20, verbose = FALSE), em_control = list(tol = 1e-5, max_iter = 100), # lme_control = lme4::lmerControl(), mdfdr_control = list(fwer_ctrl_method = &quot;holm&quot;, B = 100), trend_control = NULL) #detected structural zeroes ancombc_output_phy$zero_ind %&gt;% mutate(present = ifelse(`structural_zero (host_sp = Sciurus carolinensis)` == TRUE, &#39;only red&#39;, ifelse(`structural_zero (host_sp = Sciurus vulgaris)`== TRUE, &#39;only grey&#39;, &#39;both&#39;))) %&gt;% group_by(present) %&gt;% count() %&gt;% print() # A tibble: 2 × 2 # Groups: present [2] present n &lt;chr&gt; &lt;int&gt; 1 both 8 2 only grey 1 #significance and sensitivity analysis ancombc_output_phy$res %&gt;% mutate(p=ifelse(`p_host_spSciurus vulgaris` &lt; 0.05, &#39;sig&#39;, &#39;ns&#39;), ss=`passed_ss_host_spSciurus vulgaris`) %&gt;% group_by(p, ss) %&gt;% count() %&gt;% print() # A tibble: 3 × 3 # Groups: p, ss [3] p ss n &lt;chr&gt; &lt;lgl&gt; &lt;int&gt; 1 ns TRUE 1 2 sig FALSE 3 3 sig TRUE 4 ancombc_table_phy &lt;- ancombc_output_phy$res %&gt;% dplyr::select(phylum=taxon, `lfc_host_spSciurus vulgaris`, `p_host_spSciurus vulgaris`, `passed_ss_host_spSciurus vulgaris`) %&gt;% filter(`p_host_spSciurus vulgaris` &lt; 0.05) %&gt;% dplyr::arrange(`p_host_spSciurus vulgaris`) %&gt;% #mutate_at(vars(phylum), ~ str_replace(., &quot;[dpcofgs]__&quot;, &quot;&quot;))%&gt;% dplyr::arrange(`lfc_host_spSciurus vulgaris`) %&gt;% mutate(color_ss=ifelse(`passed_ss_host_spSciurus vulgaris`== TRUE, &quot;black&quot;, &quot;grey&quot;)) ancombc_table_phy%&gt;% #mutate(genome=factor(genome,levels=ancombc_table_mag$genome)) %&gt;% ggplot(., aes(x=`lfc_host_spSciurus vulgaris`, y=forcats::fct_reorder(phylum,`lfc_host_spSciurus vulgaris`), fill=phylum)) + #forcats::fct_rev() geom_col() + scale_fill_manual(values=custom_colors) + geom_hline(yintercept=0) + theme(panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 6, colour = ancombc_table_phy$color_ss), axis.title = element_text(size = 14, face = &quot;bold&quot;), legend.text = element_text(size = 12), legend.title = element_text(size = 14, face = &quot;bold&quot;), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;)+ xlab(&quot;log2FoldChange&quot;) + ylab(&quot;Phylum&quot;) + guides(fill=guide_legend(title=&quot;Phylum&quot;)) #pdf(&quot;figures/different_species_StrucZero_new_violin.pdf&quot;,width=12, height=6) ancombc_output_phy$res %&gt;% na.omit() %&gt;% dplyr::select(phylum=taxon, `lfc_host_spSciurus vulgaris`, `p_host_spSciurus vulgaris`) %&gt;% left_join(genome_metadata, by = join_by(phylum == phylum)) %&gt;% mutate(phylum = ifelse(`p_host_spSciurus vulgaris` &lt; 0.05, phylum, NA)) %&gt;% ggplot(., aes(x = `lfc_host_spSciurus vulgaris`, y = -log(`p_host_spSciurus vulgaris`), color = phylum)) + geom_point(size=3, show.legend = FALSE) + #xlim(c(-10,4)) + scale_color_manual(values = custom_colors) + labs(color = &quot;Significant phylum&quot;, x = &quot;Log-fold difference between red and grey squirrels&quot;, y = &quot;p-value&quot;) + geom_text(aes(2.5, 40), label = &quot;Enriched\\nin red squirrels&quot;, color=&quot;#666666&quot;) + geom_text(aes(-0.6, 40), label = &quot;Enriched\\nin grey squirrels&quot;, color=&quot;#666666&quot;) + labs(color=&quot;Phylum&quot;, y=&quot;Log-fold&quot;, x=&quot;-log p-value&quot;) + theme_classic() #dev.off() "],["functional-analyses.html", "Chapter 7 Functional analyses 7.1 Data preparation 7.2 Genome-specific GIFT profiles 7.3 Domain-level community-averaged GIFT profiles 7.4 Function-level community-averaged GIFT profiles 7.5 Element-level community-averaged GIFT profiles 7.6 KEGG network analysis", " Chapter 7 Functional analyses 7.1 Data preparation tss &lt;- function(abund){sweep(abund, 2, colSums(abund), FUN=&quot;/&quot;)} genome_counts &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) #Get list of present MAGs present_MAGs &lt;- genome_counts %&gt;% filter(rowSums(.[, -1]) != 0) %&gt;% rownames() #Align distillr annotations with present MAGs and remove all-zero and all-one traits present_MAGs &lt;- present_MAGs[present_MAGs %in% rownames(genome_gifts)] genome_gifts_filt &lt;- genome_gifts[present_MAGs,] %&gt;% select_if(~!all(. == 0)) %&gt;% #remove all-zero modules select_if(~!all(. == 1)) #remove all-one modules GIFTs_elements &lt;- to.elements(genome_gifts_filt,GIFT_db) #Aggregate element-level GIFTs into the function level GIFTs_functions &lt;- to.functions(GIFTs_elements,GIFT_db) #Aggregate function-level GIFTs into overall Biosynthesis, Degradation and Structural GIFTs and get overall metabolic capacity indices per MAG (at the domain level) GIFTs_domains &lt;- to.domains(GIFTs_functions,GIFT_db) %&gt;% as.data.frame() %&gt;% mutate(Overall=rowMeans(select(.,Biosynthesis,Structure,Degradation), na.rm=TRUE)) # #Get overall metabolic capacity indices per MAG (at the domain level) # rowMeans(GIFTs_functions) # averaged at the function level (each function is weighed equally) # rowMeans(GIFTs_domains) # averaged at the domain level (each domain is weighed equally) #Get community-weighed average GIFTs per sample # GIFTs_elements_community &lt;- to.community(GIFTs_elements,genome_counts,GIFT_db) # GIFTs_functions_community &lt;- to.community(GIFTs_functions,genome_counts,GIFT_db) # GIFTs_domains_community &lt;- to.community(GIFTs_domains,genome_counts,GIFT_db) GIFTs_elements_community &lt;- genome_counts %&gt;% tss() %&gt;% to.community(GIFTs_elements,.,GIFT_db) GIFTs_functions_community &lt;- genome_counts %&gt;% tss() %&gt;% to.community(GIFTs_functions,.,GIFT_db) GIFTs_domains_community &lt;- genome_counts %&gt;% tss() %&gt;% to.community(GIFTs_domains,.,GIFT_db) merge_gift &lt;- GIFTs_domains_community %&gt;% as.data.frame() %&gt;% rownames_to_column(., &quot;sample&quot;) %&gt;% merge(., sample_metadata, by=&quot;sample&quot;) GIFTs_elements_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% summarise(MCI = mean(value), sd = sd(value)) # A tibble: 2 × 3 species MCI sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Sciurus carolinensis 0.297 0.0108 2 Sciurus vulgaris 0.327 0.0302 GIFTs_functions_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% summarise(MCI = mean(value), sd = sd(value)) # A tibble: 2 × 3 species MCI sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Sciurus carolinensis 0.311 0.0117 2 Sciurus vulgaris 0.327 0.0375 GIFTs_domains_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% summarise(MCI = mean(value), sd = sd(value)) # A tibble: 2 × 3 species MCI sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Sciurus carolinensis 0.325 0.0139 2 Sciurus vulgaris 0.324 0.0512 7.2 Genome-specific GIFT profiles mag_elements &lt;- GIFTs_elements %&gt;% as_tibble(., rownames = &quot;MAG&quot;) %&gt;% reshape2::melt() %&gt;% rename(Code_element = variable, GIFT = value) %&gt;% inner_join(GIFT_db,by=&quot;Code_element&quot;) %&gt;% # arrange(Code_function) %&gt;% # First sort by val. This sort the dataframe but NOT the factor levels # mutate(Functions=factor(Function, levels=Function)) %&gt;% ggplot(., aes(x=Code_element, y=MAG, fill=GIFT))+ geom_tile()+ scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, &quot;YlGnBu&quot;))+ #facet_grid(Function ~ ., scales = &quot;free&quot;, space = &quot;free&quot;)+ theme_grey(base_size=3)+ theme(axis.text.x = element_blank(), strip.text.y = element_text(angle = 0), axis.text.y = element_blank(), axis.title.y= element_blank(), legend.position=&quot;none&quot;) # Generate the phylum color heatmap phylum_heatmap &lt;- phylum_colors %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) #Generate a basal utrametric tree for the sake of visualisation gift_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., expand=1) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips gift_tree &lt;- gheatmap(gift_tree, phylum_heatmap, offset=0, width=0.3, colnames=FALSE, color = NA) + scale_fill_manual(values=custom_colors) + labs(fill=&quot;Phylum&quot;) + theme(legend.position=&quot;none&quot;) gift_color &lt;- gift_colors %&gt;% pull(Color) names(gift_color) &lt;- gift_colors$Function function_heatmap_top &lt;- GIFTs_elements %&gt;% as_tibble(., rownames = &quot;MAG&quot;) %&gt;% reshape2::melt() %&gt;% rename(Code_element = variable, GIFT = value) %&gt;% inner_join(GIFT_db, by = &quot;Code_element&quot;) %&gt;% select(Code_element, Function) %&gt;% distinct() %&gt;% ggplot(aes(x = Code_element)) + # Use x = Code_element to place tiles along the x-axis geom_tile(aes(y = 1, fill = Function, color = Function), width = 0.9, height = 0.08) + # Adjust width/height geom_text(data = . %&gt;% distinct(Function, .keep_all = TRUE), aes(y = 1.07, label = Function), vjust = 0.8, hjust = 0, size = 3, angle = 90) + # Adjust text placement scale_fill_manual(values = gift_color) + scale_color_manual(values = gift_color) + theme_void() + theme( axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), strip.text.x = element_blank(), legend.position = &quot;none&quot;, plot.margin = margin(10, 100, 10, 10), strip.clip=&#39;off&#39; ) + ylim(0.95, 1.5) + coord_cartesian(clip = &quot;off&quot;)# Adjust y-limits to control label position mag_elements %&gt;% insert_left(gift_tree, width = .3) %&gt;% insert_top(function_heatmap_top, height=.3) 7.3 Domain-level community-averaged GIFT profiles #Biosynthesis by species biosynth.species &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Biosynthesis&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=squirrel_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Biosynthesis&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #Degradation by species degradation.species &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Degradation&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=squirrel_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Degradation&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #Structure by species structure.species &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Structure&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=squirrel_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Structure&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #Overall by species overall.species &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Overall&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=squirrel_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Overall&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) sp.legend &lt;- get_legend(biosynth.species) ggarrange(biosynth.species, degradation.species, structure.species, overall.species, #+ rremove(&quot;x.text&quot;), legend.grob = sp.legend, legend=&quot;bottom&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 2, nrow = 2) ### Differences in bacterial functional capacity #grid.arrange(arrangeGrob(p1, p5,p3, p4, ncol = 2)) merge_gift$area_type &lt;-factor(merge_gift$area_type, levels = c(&quot;rural&quot;, &quot;suburban&quot;, &quot;urban&quot;)) #Biosynthesis by species*area_type biosynth.area &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Biosynthesis&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=area_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Biosynthesis&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Area type&quot;), fill=&quot;none&quot;) #Degradation by species*area_type degradation.area &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Degradation&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=area_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Degradation&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Area type&quot;), fill=&quot;none&quot;) #Structure by species*area_type structure.area &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Structure&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=area_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Structure&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Area type&quot;), fill=&quot;none&quot;) #Overall by species*area_type overall.area &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Overall&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=area_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Overall&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Area type&quot;), fill=&quot;none&quot;) area.legend &lt;- get_legend(biosynth.area) ggarrange(biosynth.area, degradation.area, structure.area, overall.area, #+ rremove(&quot;x.text&quot;), legend.grob = area.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 2, nrow = 2) merge_gift$season &lt;-factor(merge_gift$season, levels = c(&quot;spring-summer&quot;, &quot;autumn&quot;, &quot;winter&quot;)) #Biosynthesis by species*season biosynth.season &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Biosynthesis&quot;, color = &quot;season&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=season_colors) + scale_fill_manual(values=season_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Biosynthesis&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Season&quot;), fill=&quot;none&quot;) #Degradation by species*season degradation.season &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Degradation&quot;, color = &quot;season&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=season_colors) + scale_fill_manual(values=season_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Degradation&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Season&quot;), fill=&quot;none&quot;) #Structure by species*season structure.season &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Structure&quot;, color = &quot;season&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=season_colors) + scale_fill_manual(values=season_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Structure&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Season&quot;), fill=&quot;none&quot;) #Overall by species*season overall.season &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Overall&quot;, color = &quot;season&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=season_colors) + scale_fill_manual(values=season_colors) + stat_compare_means() + theme_classic() + labs(y = &quot;Overall&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Season&quot;), fill=&quot;none&quot;) season.legend &lt;- get_legend(biosynth.season) ggarrange(biosynth.season, degradation.season, structure.season, overall.season, #+ rremove(&quot;x.text&quot;), legend.grob = season.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 2, nrow = 2) 7.4 Function-level community-averaged GIFT profiles # sample_sort &lt;- sample_table %&gt;% # select(sample,species,Area_type) %&gt;% # arrange(species,Area_type) %&gt;% # pull() GIFTs_functions_community %&gt;% reshape2::melt() %&gt;% rename(sample = Var1, Code_function = Var2, GIFT = value) %&gt;% left_join(GIFT_db,by = join_by(Code_function == Code_function)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #mutate(Function=factor(Function, levels = rev(unique(Function)))) %&gt;% ggplot(., aes(y=Function, x=sample, fill=GIFT))+ geom_tile()+ scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_fill_gradientn(colours=brewer.pal(7, &quot;YlGnBu&quot;))+ facet_grid(~species, scales=&quot;free&quot;) + theme_grey(base_size=8)+ theme(axis.text.y = element_text(angle = 0, vjust = 0.5, hjust=1), axis.text.x = element_blank(), strip.text.x = element_text(angle = 0)) species.df &lt;- sample_metadata %&gt;% select(sample, species, animal) GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(., species.df, by = join_by(sample == sample)) %&gt;% select(-animal) %&gt;% pivot_longer(-c(sample, species), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_function ~ GIFT_db$Function[match(trait, GIFT_db$Code_function)], TRUE ~ trait)) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=value, y=species, group=species, fill=species, color=species)) + geom_boxplot() + scale_color_manual(name=&quot;species&quot;, breaks=c(&quot;Sciurus carolinensis&quot;,&quot;Sciurus vulgaris&quot;), labels=c(&quot;Sciurus carolinensis&quot;,&quot;Sciurus vulgaris&quot;), values=c(&quot;#999999&quot;, &quot;#cc3333&quot;)) + scale_fill_manual(name=&quot;species&quot;, breaks=c(&quot;Sciurus carolinensis&quot;,&quot;Sciurus vulgaris&quot;), labels=c(&quot;Sciurus carolinensis&quot;,&quot;Sciurus vulgaris&quot;), values=c(&quot;#bfbfbf&quot;, &quot;#db7070&quot;)) + facet_grid(trait ~ ., space=&quot;free&quot;, scales=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.text.y = element_blank(), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Metabolic capacity index&quot;) # functions by host species and urbanization GIFTs_functions_community %&gt;% reshape2::melt() %&gt;% rename(sample = Var1, Code_function = Var2, GIFT = value) %&gt;% left_join(GIFT_db,by = join_by(Code_function == Code_function)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #mutate(sample=factor(Sample, levels = sample_sort)) %&gt;% ggplot(., aes(y=Function, x=area_type, fill=GIFT))+ geom_tile()+ scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_fill_gradientn(colours=brewer.pal(9, &quot;YlGnBu&quot;))+ facet_grid(~species, scales=&quot;free&quot;) + theme_grey(base_size=8)+ theme(axis.text.x = element_text(angle = 0, vjust = 0, hjust=0.5), axis.text.y = element_text(), strip.text.x = element_text(angle = 0)) # functions by host species and seasons sample_metadata$season &lt;-factor(sample_metadata$season, levels = c(&quot;spring-summer&quot;, &quot;autumn&quot;, &quot;winter&quot;)) GIFTs_functions_community %&gt;% reshape2::melt() %&gt;% rename(sample = Var1, Code_function = Var2, GIFT = value) %&gt;% left_join(GIFT_db,by = join_by(Code_function == Code_function)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #mutate(sample=factor(Sample, levels = sample_sort)) %&gt;% ggplot(., aes(y=Function, x=season, fill=GIFT))+ geom_tile()+ scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_fill_gradientn(colours=brewer.pal(9, &quot;YlGnBu&quot;))+ facet_grid(~species, scales=&quot;free&quot;) + theme_grey(base_size=8)+ theme(axis.text.x = element_text(angle = 0, vjust = 0, hjust=0.5), axis.text.y = element_text(), strip.text.x = element_text(angle = 0)) 7.5 Element-level community-averaged GIFT profiles # GIFTs_elements_community %&gt;% # reshape2::melt() %&gt;% # rename(sample = Var1, Code_element = Var2, GIFT = value) %&gt;% # left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% # left_join(GIFT_db,by=&quot;Code_element&quot;) %&gt;% # ggplot(., aes(x=Code_element, y=sample, fill=GIFT))+ # geom_tile()+ # scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+ # scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ # scale_fill_gradientn(colours=brewer.pal(9, &quot;YlGnBu&quot;))+ # theme_grey(base_size=8)+ # theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), # strip.text.x = element_text(angle = 90), # axis.text.y = element_blank()) + # facet_grid(species ~ Function, scales = &quot;free&quot;, space = &quot;free&quot;) GIFTs_elements_community %&gt;% reshape2::melt() %&gt;% rename(sample = Var1, Code_element = Var2, GIFT = value) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(GIFT_db,by=&quot;Code_element&quot;) %&gt;% ggplot(., aes(y=Element, x=sample, fill=GIFT))+ geom_tile()+ scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_fill_gradientn(colours=brewer.pal(9, &quot;YlGnBu&quot;))+ theme_grey(base_size=8)+ theme(, strip.text.y = element_text(angle = 0), axis.text.x = element_blank()) + facet_grid( Function ~ species , scales = &quot;free&quot;, space = &quot;free&quot;) 7.5.1 Comparisons between host species 7.5.1.1 Significantly enriched elements elem_gift &lt;- GIFTs_elements_community %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&#39;sample&#39;) %&gt;% left_join(sample_metadata[c(1,7)], by = join_by(sample == sample)) # # check if any numeric columns have a sum of zero (i.e. any traits are absent in the sample) # elem_gift %&gt;% # select(where(is.numeric)) %&gt;% # summarise(across(everything(), ~ sum(., na.rm = TRUE) == 0)) %&gt;% # unlist() %&gt;% # any() # # # remove any absent traits # elem_gift_clean &lt;- elem_gift %&gt;% # select(where(~ !is.numeric(.) || sum(., na.rm = TRUE) != 0)) #wilcoxon tests and enrichment diff_elements &lt;- elem_gift %&gt;% pivot_longer(-c(sample, species), names_to = &quot;Code_element&quot;, values_to = &quot;value&quot;) %&gt;% group_by(Code_element) %&gt;% summarise( p_value = wilcox.test(value ~ species, conf.int = TRUE)$p.value, statistic = wilcox.test(value ~ species, conf.int = TRUE)$statistic, conf_low = wilcox.test(value ~ species, conf.int = TRUE)$conf.int[1], conf_high = wilcox.test(value ~ species, conf.int = TRUE)$conf.int[2], mean_sv = mean(value[species == &quot;Sciurus vulgaris&quot;]), mean_sc = mean(value[species == &quot;Sciurus carolinensis&quot;]), mean_diff = mean_sv - mean_sc, log2fc = log2(mean_sv / mean_sc)) %&gt;% mutate(p_adjust=p.adjust(p_value, method=&quot;BH&quot;)) %&gt;% #filter(p_adjust &lt; 0.05) %&gt;% mutate(enrichment = ifelse(mean_diff &lt;0, &quot;Sciurus carolinensis&quot;,&quot;Sciurus vulgaris&quot;)) %&gt;% left_join(.,GIFT_db[2:6],by = join_by(Code_element == Code_element)) %&gt;% distinct(Code_element, .keep_all = TRUE) %&gt;% arrange(Function) # uniqueGIFT &lt;- unique(GIFT_db3[c(2,3,4,5,6)]) # # code_function_wild &lt;- diff_table %&gt;% # left_join(uniqueGIFT[c(1:3)], by=join_by(Elements==Code_element)) # # unique_codes_wild&lt;-unique(code_function_wild$Code_function) # gift_colors_wild &lt;- read_tsv(&quot;data/gift_colors.tsv&quot;) %&gt;% # filter(Code_function %in% unique_codes_wild)%&gt;% # mutate(legend=str_c(Code_function,&quot; - &quot;,Function)) diff_elements %&gt;% # mutate(Difference_abs = abs(Difference)) %&gt;% filter(p_adjust&lt;0.05) %&gt;% ggplot(., aes(x = log2fc, y = -log10(p_adjust), color=Function, size=abs(mean_diff))) + geom_point()+ geom_vline(xintercept=0) + scale_color_manual(values = gift_color)+ #xlim(c(-10,4)) + theme_classic()+ labs(size=&quot;Mean difference (abs)&quot;, color=&quot;Functional trait&quot;)+ labs(x = &quot;Log-fold change&quot;, y=&quot;-Log adjusted p-value&quot;) diff_elements %&gt;% # mutate(Difference_abs = abs(Difference)) %&gt;% mutate(color = ifelse(p_adjust &lt; 0.05 &amp; (log2fc &lt; -0.6 | log2fc &gt; 0.6), enrichment, NA), sig_label = ifelse(p_adjust &lt; 0.05 &amp; (log2fc &lt; -0.6 | log2fc &gt; 0.6), Element, NA)) %&gt;% ggplot(., aes(x = log2fc, y = -log10(p_adjust), color=color, label=Code_element)) + geom_point(size=1.3)+ geom_text_repel(aes(label = sig_label), vjust = -0.5, check_overlap = TRUE, min.segment.length = 0.4,) + scale_color_manual(values = squirrel_colors) + theme_classic()+ labs(color=&quot;Enrichment&quot;)+ labs(x = &quot;Log-fold change&quot;, y=&quot;-Log adjusted p-value&quot;) + geom_vline(xintercept = c(-0.6, 0.6), col = &quot;gray&quot;, linetype = &#39;dashed&#39;) + geom_hline(yintercept = -log10(0.05), col = &quot;gray&quot;, linetype = &#39;dashed&#39;) diff_elements %&gt;% filter(p_adjust&lt;0.05) %&gt;% ggplot(aes(x=forcats::fct_reorder(Element,mean_diff), y=mean_diff, fill=enrichment)) + geom_col() + # geom_point(size=4) + scale_fill_manual(values=squirrel_colors) + geom_hline(yintercept=0) + coord_flip()+ theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12), strip.text.y = element_text(angle = 0), legend.position = &quot;right&quot;, legend.title = element_blank(), panel.background = element_blank(), panel.grid.major = element_line(size = 0.15, linetype = &#39;solid&#39;, colour = &quot;grey&quot;))+ facet_grid(Function ~ ., scales = &quot;free&quot;, space = &quot;free&quot;) + xlab(&quot;Element&quot;) + ylab(&quot;Mean difference&quot;) 7.5.2 Distribution of MAGs by MCI in the two host species red_samples &lt;- sample_metadata %&gt;% filter(species == &quot;Sciurus vulgaris&quot;) %&gt;% select(sample) %&gt;% pull() grey_samples &lt;- sample_metadata %&gt;% filter(species==&quot;Sciurus carolinensis&quot;) %&gt;% select(sample) %&gt;% pull() host_mags &lt;- genome_counts %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% rowwise() %&gt;% # Compute for each row (genome) mutate(all_zeros_red = all(c_across(all_of(red_samples)) == 0)) %&gt;% # Set true if all samples in red have zeros mutate(all_zeros_grey = all(c_across(all_of(grey_samples)) == 0)) %&gt;% # Set true if all samples in grey have zeros mutate(host_sp = case_when( all_zeros_red &amp; !all_zeros_grey ~ &quot;only grey&quot;, !all_zeros_red &amp; all_zeros_grey ~ &quot;only red&quot;, !all_zeros_red &amp; !all_zeros_grey ~ &quot;both&quot;, TRUE ~ NA_character_ )) %&gt;% ungroup() %&gt;% select(genome, host_sp) MCI_table &lt;- GIFTs_elements%&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;genome&quot;) %&gt;% left_join(host_mags, by = join_by(genome == genome)) # MCI_table %&gt;% # ggplot(., aes(x=value,fill=host_sp, group=host_sp))+ # geom_histogram(binwidth=0.01, color=&quot;white&quot;) + # scale_fill_manual(values=c(&quot;black&quot;, &quot;#999999&quot;, &quot;#cc3333&quot;))+ # labs(y = &quot;Number of MAGs&quot;, x=&quot;MCI&quot;) + # theme(legend.position=&quot;right&quot;) + # theme_minimal() red &lt;- MCI_table %&gt;% filter(host_sp %in% c(&quot;only red&quot;, &quot;both&quot;)) %&gt;% mutate(host_group = &quot;Sciurus vulgaris&quot;) grey &lt;- MCI_table %&gt;% filter(host_sp %in% c(&quot;only grey&quot;, &quot;both&quot;)) %&gt;% mutate(host_group = &quot;Sciurus carolinensis&quot;) MCI_host &lt;- bind_rows(red, grey) MCI_host %&gt;% ggplot(., aes(x=value, group=host_group, fill=host_group))+ geom_histogram(binwidth=0.01, color=&quot;white&quot;) + scale_fill_manual(values=squirrel_colors) + ylim(0,80) + labs(y = &quot;Number of MAGs&quot;, x=&quot;MCI&quot;) + theme_minimal() Warning: Removed 10 rows containing missing values or values outside the scale range (`geom_bar()`). ggplot() + geom_histogram(data=red, aes(x = value, y = after_stat((count/sum(count))*100), fill = &quot;Sciurus vulgaris&quot;), binwidth = 0.01, color = &quot;white&quot;, position = &quot;identity&quot;, alpha=0.4) + geom_histogram(data=grey, aes(x = value, y = after_stat((count/sum(count))*100), fill = &quot;Sciurus carolinensis&quot;), binwidth = 0.01, color = &quot;white&quot;, position = &quot;identity&quot;, alpha=0.4) + geom_density(data=grey, aes(x = value, color = &quot;Sciurus carolinensis&quot;), position = &quot;identity&quot;, lwd=0.8) + geom_density(data=red, aes(x = value, color = &quot;Sciurus vulgaris&quot;), position = &quot;identity&quot;, lwd=0.8) + scale_y_continuous(limits = c(0, 6)) + labs(y = &quot;Density of MAGs&quot;, x = &quot;MCI&quot;, fill = &quot;host species&quot;) + scale_fill_manual(values = squirrel_colors) + scale_color_manual(values = c(&quot;Sciurus vulgaris&quot; = &quot;#cc3333&quot;, &quot;Sciurus carolinensis&quot; = &quot;#555555&quot;), guide=&quot;none&quot;) + theme_minimal() + theme(legend.position=&quot;inside&quot;, legend.position.inside = c(0.85, 0.65)) + guides(fill = guide_legend(override.aes = list(color = NA))) 7.6 KEGG network analysis genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.gz&quot;) %&gt;% rename(gene=1, genome=2, contig=3) genome_kegg &lt;- genome_annotations %&gt;% group_by(genome) %&gt;% summarise(kegg_id_list = list(unique(kegg_id[kegg_id != &quot;NA&quot;]))) genome_counts &lt;- genome_counts %&gt;% rownames_to_column(., var=&quot;genome&quot;) community_kegg &lt;-genome_kegg %&gt;% inner_join(genome_counts,by=&quot;genome&quot;) %&gt;% pivot_longer(cols = starts_with(&quot;EHI&quot;), names_to = &quot;sample&quot;, values_to = &quot;abundance&quot;) %&gt;% filter(abundance != 0) %&gt;% select(-abundance) %&gt;% unnest(kegg_id_list) %&gt;% group_by(sample) %&gt;% summarise(unique_kegg_ids = list(unique(kegg_id_list))) species_kegg &lt;- community_kegg %&gt;% inner_join(sample_metadata,by=&quot;sample&quot;) %&gt;% select(sample,unique_kegg_ids,species) %&gt;% unnest(unique_kegg_ids) %&gt;% group_by(species, unique_kegg_ids) %&gt;% summarise(count = n(), .groups = &quot;drop&quot;) red_ipath &lt;- species_kegg %&gt;% filter(species==&quot;Sciurus vulgaris&quot;) %&gt;% select(-species) %&gt;% mutate(color=&quot;#f54257&quot;) %&gt;% mutate(width=str_c(&quot;W&quot;,round(count/max(count)*20,0))) %&gt;% mutate(ipath=str_c(unique_kegg_ids,&quot; &quot;,color,&quot; &quot;,width)) write_tsv(red_ipath %&gt;% select(ipath),&quot;data/red_ipath.tsv&quot;,col_names=F) grey_ipath &lt;- species_kegg %&gt;% filter(species==&quot;Sciurus carolinensis&quot;) %&gt;% select(-species) %&gt;% mutate(color=&quot;#000000&quot;) %&gt;% mutate(width=str_c(&quot;W&quot;,round(count/max(count)*20,0))) %&gt;% mutate(ipath=str_c(unique_kegg_ids,&quot; &quot;,color,&quot; &quot;,width)) write_tsv(grey_ipath %&gt;% select(ipath),&quot;data/grey_ipath.tsv&quot;,col_names=F) # Which host species each path can be found in species_kegg2&lt;- species_kegg %&gt;% group_by(unique_kegg_ids) %&gt;% mutate(host = if_else(all(species == &quot;Sciurus vulgaris&quot;), &quot;only red&quot;, if_else(all(species == &quot;Sciurus carolinensis&quot;), &quot;only grey&quot;, &quot;both&quot;))) %&gt;% mutate(count = sum(count)) %&gt;% select(-species) %&gt;% distinct() %&gt;% ungroup() both_ipath &lt;- species_kegg2 %&gt;% mutate(color= if_else(host == &quot;only red&quot;, &quot;#f54257&quot;, if_else(host == &quot;only grey&quot;, &quot;#000000&quot;, &quot;#50c878&quot;))) %&gt;% mutate(width=str_c(&quot;W&quot;,round(count/max(count)*20,0))) %&gt;% mutate(ipath=str_c(unique_kegg_ids,&quot; &quot;,color,&quot; &quot;,width)) write_tsv(both_ipath %&gt;% select(ipath),&quot;data/both_ipath.tsv&quot;,col_names=F) The following figures were produced using the web tool ipath3: (#fig:red_png)Red squirrel’s microbiota metabolic pathways (#fig:grey_png)Grey squirrel’s microbiota metabolic pathways (#fig:both_png)Squirrels’ microbiota metabolic pathways - green=both species; red=only red squirrel; black=only grey squirrel "],["diversity-analyses.html", "Chapter 8 Diversity analyses 8.1 Data preparation 8.2 Alpha Diversity 8.3 Beta diversity", " Chapter 8 Diversity analyses rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) singlem &lt;- read.csv(&quot;data/singlem.csv&quot;,sep=&quot;;&quot;,header=T) options(contrasts = c(&#39;contr.treatment&#39;,&#39;contr.poly&#39;)) 8.1 Data preparation #Change genome names column to row names genome_counts &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) #Get list of present MAGs present_MAGs &lt;- genome_counts %&gt;% filter(rowSums(.[, -1]) != 0) %&gt;% rownames() #Remove samples with all zeros (no data after filtering) genome_counts_filt &lt;- genome_counts %&gt;% select_if(~!all(. == 0)) #Align distillr annotations with present MAGs and remove all-zero and all-one traits present_MAGs &lt;- present_MAGs[present_MAGs %in% rownames(genome_gifts)] genome_gifts_filt &lt;- genome_gifts[present_MAGs,] %&gt;% select_if(~!all(. == 0)) %&gt;% #remove all-zero modules select_if(~!all(. == 1)) #remove all-one modules #Align tree with present MAGs tree_filt &lt;- keep.tip(genome_tree,present_MAGs) #Filter count table to only contain present MAGs after gifts filtering genome_counts_filt &lt;- genome_counts[present_MAGs,] #Calculate sequence fractions for each samples sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% dplyr::summarize(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample,mags_bases,unmapped_bases,host_bases,lowqual_bases) 8.2 Alpha Diversity #ALPHA DIVERSITY q0n &lt;- hilldiv2::hilldiv(genome_counts,q=0) %&gt;% c() Neutral Hill numbers of q0 q1n &lt;- hilldiv2::hilldiv(genome_counts,q=1) %&gt;% c() Neutral Hill numbers of q1 q1p &lt;- hilldiv2::hilldiv(genome_counts,q=1,tree=genome_tree) %&gt;% c() Phylogenetic Hill numbers of q1 dist &lt;- hilldiv2::traits2dist(genome_gifts_filt, method=&quot;gower&quot;) q1f &lt;- hilldiv2::hilldiv(genome_counts_filt,q=1,dist=dist) %&gt;% c() Functional Hill numbers of q1 # Merge all diversity metrics alpha &lt;- cbind(sample=colnames(genome_counts),richness=q0n,neutral=round(q1n,3),phylo=round(q1p,3),func=round(q1f,3)) %&gt;% as.data.frame() columns &lt;- c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylo&quot;,&quot;func&quot;, &quot;mapped&quot;,&quot;total&quot;) # Add amount of sequencing data to the table alpha &lt;- alpha %&gt;% left_join(sequence_fractions, by = join_by(sample == sample)) %&gt;% #add sequencing depth information mutate(mapped=round(mags_bases/1000000000,3)) %&gt;% #modify depth to million reads mutate(total=round((mags_bases+unmapped_bases+host_bases+lowqual_bases)/1000000000,3)) %&gt;% select(sample,richness,neutral,phylo,func,mapped,total) %&gt;% mutate(across(-1, as.numeric)) # Join sample metadata alpha_div &lt;- alpha %&gt;% pivot_longer(-c(sample), names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(metric = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by=&#39;sample&#39;) alpha_div %&gt;% select(sample, species, metric, value) %&gt;% mutate( species = factor(species), # Convert species to factor if necessary sample = factor(sample, levels = unique(sample[order(species)])) # Reorder sample by species ) %&gt;% ggplot(aes(x = value, y = sample, fill = species)) + geom_bar(stat = &#39;identity&#39;) + scale_fill_manual(values = squirrel_colors) + facet_wrap(~ metric, scales = &quot;free_x&quot;, ncol = 6) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), panel.spacing = unit(0, &quot;lines&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_blank(), legend.position = &quot;none&quot; ) # #table # kable(alpha_div) 8.2.1 Alpha diversity comparisons Alpha diversity by species neutral.sp &lt;- alpha_div %&gt;% filter(metric==&quot;neutral&quot;)%&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;, alpha=0.5) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + #stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) phylo.sp &lt;- alpha_div %&gt;% filter(metric==&quot;phylo&quot;)%&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;, alpha=0.5) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + #stat_compare_means() + theme_classic() + labs(y = &quot;Phylogenetic Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) func.sp &lt;- alpha_div %&gt;% filter(metric==&quot;func&quot;)%&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + #stat_compare_means() + theme_classic() + labs(y = &quot;Functional Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) ggarrange(neutral.sp, phylo.sp, func.sp, #+ rremove(&quot;x.text&quot;), ncol = 1, nrow = 3) Alpha diversity by species and sex neutral.sex &lt;- alpha_div %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;sex&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=sex_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + #stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) phylo.sex &lt;- alpha_div %&gt;% filter(metric==&quot;phylo&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;sex&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=sex_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + #stat_compare_means() + theme_classic() + labs(y = &quot;Phylogenetic Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) func.sex &lt;- alpha_div %&gt;% filter(metric==&quot;func&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;sex&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=sex_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + #stat_compare_means() + theme_classic() + labs(y = &quot;Functional Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) sex.legend &lt;- get_legend(neutral.sex) ggarrange(neutral.sex, phylo.sex, func.sex, #+ rremove(&quot;x.text&quot;), legend.grob = sex.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 1, nrow = 3) neutral.sex.test &lt;- alpha_div %&gt;% filter(metric==&quot;neutral&quot;) wilcox.test(as.numeric(value) ~ sex, data=neutral.sex.test, exact = FALSE) %&gt;% print() Wilcoxon rank sum test with continuity correction data: as.numeric(value) by sex W = 4387, p-value = 0.8879 alternative hypothesis: true location shift is not equal to 0 phylo.sex.test &lt;- alpha_div %&gt;% filter(metric==&quot;phylo&quot;) wilcox.test(as.numeric(value) ~ sex, data=phylo.sex.test, exact = FALSE) %&gt;% print() Wilcoxon rank sum test with continuity correction data: as.numeric(value) by sex W = 4202, p-value = 0.5267 alternative hypothesis: true location shift is not equal to 0 func.sex.test &lt;- alpha_div %&gt;% filter(metric==&quot;func&quot;) wilcox.test(as.numeric(value) ~ sex, data=phylo.sex.test, exact = FALSE) %&gt;% print() Wilcoxon rank sum test with continuity correction data: as.numeric(value) by sex W = 4202, p-value = 0.5267 alternative hypothesis: true location shift is not equal to 0 Alpha diversity by species and urbanisation sample_metadata$area_type &lt;-factor(sample_metadata$area_type, levels = c(&quot;rural&quot;, &quot;suburban&quot;, &quot;urban&quot;)) #neutral alpha by species*area_type neutral.urb &lt;- alpha_div %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=paste0(area_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Urbanisation&quot;), fill=&quot;none&quot;) #phylogenetic alpha by species*area_type phylo.urb &lt;- alpha_div %&gt;% filter(metric==&quot;phylo&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=paste0(area_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Phylogenetic Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #functional (distillr-based) alpha by species*area_type func.urb &lt;- alpha_div %&gt;% filter(metric==&quot;func&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=paste0(area_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Functional Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) urb.legend &lt;- get_legend(neutral.urb) ggarrange(neutral.urb, phylo.urb, func.urb, #+ rremove(&quot;x.text&quot;), legend.grob = urb.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 1, nrow = 3) Alpha diversity by species and season sample_metadata$season &lt;-factor(sample_metadata$season, levels = c(&quot;spring-summer&quot;, &quot;autumn&quot;, &quot;winter&quot;)) #neutral alpha by species*season neutral.seas &lt;- alpha_div %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;season&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=season_colors) + scale_fill_manual(values=paste0(season_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Season&quot;), fill=&quot;none&quot;) #phylogenetic alpha by species*season phylo.seas &lt;- alpha_div %&gt;% filter(metric==&quot;phylo&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;season&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=season_colors) + scale_fill_manual(values=paste0(season_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Phylogenetic Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #functional (distillr-based) alpha by species*season func.seas &lt;- alpha_div %&gt;% filter(metric==&quot;func&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;season&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=season_colors) + scale_fill_manual(values=paste0(season_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Functional Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) seas.legend &lt;- get_legend(neutral.seas) ggarrange(neutral.seas, phylo.seas, func.seas, #+ rremove(&quot;x.text&quot;), legend.grob = seas.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 1, nrow = 3) Alpha diversity by species and development #neutral alpha by species*development neutral.dev &lt;- alpha_div %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;development&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Development&quot;), fill=&quot;none&quot;) #phylogenetic alpha by species*development phylo.dev &lt;- alpha_div %&gt;% filter(metric==&quot;phylo&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;development&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + stat_compare_means() + theme_classic() + labs(y = &quot;Phylogenetic Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #functional (distillr-based) alpha by species*development func.dev &lt;- alpha_div %&gt;% filter(metric==&quot;func&quot;) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;development&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + stat_compare_means() + theme_classic() + labs(y = &quot;Functional Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) dev.legend &lt;- get_legend(neutral.dev) ggarrange(neutral.dev, phylo.dev, func.dev, #+ rremove(&quot;x.text&quot;), legend.grob = dev.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 1, nrow = 3) 8.2.2 Alpha diversity bayesian models Data preparation for bayesian models diversity.data &lt;- alpha %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(season=factor(season, levels = c(&quot;spring-summer&quot;, &quot;autumn&quot;, &quot;winter&quot;))) %&gt;% right_join(singlem, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% mutate(index500_st = scale(index500, center=T, scale=T)[,1]) %&gt;% ungroup() %&gt;% filter(sample!=&quot;EHI02263&quot;) %&gt;% #remove outlier filter(development==&quot;Adult&quot;) #remove juveniles, nursing and pregnant females #check whether a low domain-adjusted mapping rate (DAMR) is associated with low diversity estimates ggplot(diversity.data, aes(x=est_mapp, y=neutral)) + geom_point(size=3, alpha=0.5, color=&quot;#6c9ebc&quot;) + labs(x = &quot;DAMR (mapping rate to MAG catalogue/singleM microbial fraction estimate)&quot;, y = &quot;Neutral diversity (effective number of MAGs)&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) diversity.data &lt;- diversity.data %&gt;% filter(mags_singlem &gt; 0.8) #remove 5 samples with low DAMR #str(diversity.data) Bayesian models - neutral alpha set.seed(123) neutral.brm &lt;- brm(neutral ~ species + index500 + season + + species:index500 + species:season + (1|animal) + (1|sampling_site), data=diversity.data, family=gaussian(), chains = 3, iter = 3000, warmup = 1000) # library(report) # report(neutral.brm, verbose = FALSE) # #assessing model fit # plot(neutral.brm) # #posterior predictive check # pp_check(neutral.brm) describe_posterior(neutral.brm) Summary of Posterior Distribution Parameter | Median | 95% CI | pd | ROPE | % in ROPE | Rhat | ESS ----------------------------------------------------------------------------------------------------------------------- (Intercept) | 130.76 | [ 110.96, 149.84] | 100% | [-4.85, 4.85] | 0% | 1.000 | 4617.00 speciesSciurusvulgaris | -76.16 | [-101.72, -49.16] | 100% | [-4.85, 4.85] | 0% | 1.001 | 4281.00 index500 | -41.11 | [ -83.57, 1.02] | 97.22% | [-4.85, 4.85] | 2.09% | 1.000 | 4571.00 seasonautumn | -7.45 | [ -22.28, 7.84] | 83.00% | [-4.85, 4.85] | 32.39% | 1.000 | 5752.00 seasonwinter | 6.53 | [ -9.38, 21.89] | 80.35% | [-4.85, 4.85] | 35.98% | 1.000 | 5750.00 speciesSciurusvulgaris:index500 | 18.85 | [ -34.10, 68.37] | 77.22% | [-4.85, 4.85] | 12.54% | 1.000 | 4288.00 speciesSciurusvulgaris:seasonautumn | -5.39 | [ -26.59, 14.40] | 71.08% | [-4.85, 4.85] | 34.26% | 1.000 | 5981.00 speciesSciurusvulgaris:seasonwinter | -18.34 | [ -38.97, 2.64] | 95.70% | [-4.85, 4.85] | 7.68% | 1.000 | 5872.00 plot(p_direction(neutral.brm), stack=FALSE) #conditional effects neutral_eff &lt;- (conditional_effects(neutral.brm, effects = &quot;species:index500&quot;)) neutral_df &lt;- as.data.frame(neutral_eff$&#39;species:index500&#39;) neutral_df %&gt;% ggplot(., aes(x=index500, y=estimate__, color=species, fill=species)) + geom_line(size=0.9) + geom_ribbon(aes(ymin=lower__, ymax=upper__), alpha=0.35, linetype=0) + scale_color_manual(values= squirrel_colors) + scale_fill_manual(values=squirrel_colors) + theme_minimal() + labs(x = &quot;Urbanization index&quot;, y = &quot;Neutral diversity estimate&quot;) Bayesian models - phylogenetic alpha set.seed(123) phylo.brm &lt;- brm(phylo ~ species + index500 + season + + species:index500 + species:season + (1|animal) + (1|sampling_site), data=diversity.data, family=gaussian(), chains = 3, iter = 3000, warmup = 1000) # #assessing model fit # plot(phylo.brm) #pairs(phylo.brm) # #posterior predictive check # pp_check(phylo.brm) describe_posterior(phylo.brm) Summary of Posterior Distribution Parameter | Median | 95% CI | pd | ROPE | % in ROPE | Rhat | ESS -------------------------------------------------------------------------------------------------------------------- (Intercept) | 6.50 | [ 5.46, 7.49] | 100% | [-0.18, 0.18] | 0% | 1.000 | 3994.00 speciesSciurusvulgaris | -0.95 | [-2.29, 0.49] | 91.42% | [-0.18, 0.18] | 8.02% | 1.000 | 3534.00 index500 | -0.79 | [-2.97, 1.47] | 75.97% | [-0.18, 0.18] | 10.84% | 1.000 | 3685.00 seasonautumn | 0.03 | [-0.75, 0.82] | 52.82% | [-0.18, 0.18] | 36.93% | 1.000 | 4366.00 seasonwinter | 0.30 | [-0.51, 1.12] | 76.98% | [-0.18, 0.18] | 28.16% | 1.000 | 4661.00 speciesSciurusvulgaris:index500 | -1.03 | [-3.82, 1.55] | 79.20% | [-0.18, 0.18] | 8.46% | 1.000 | 3467.00 speciesSciurusvulgaris:seasonautumn | -1.05 | [-2.11, 0.00] | 97.47% | [-0.18, 0.18] | 2.96% | 1.000 | 3836.00 speciesSciurusvulgaris:seasonwinter | -1.37 | [-2.47, -0.28] | 99.20% | [-0.18, 0.18] | 0% | 1.000 | 4487.00 plot(p_direction(phylo.brm), stack=FALSE) #conditional effects phylo_eff &lt;- (conditional_effects(phylo.brm, effects = &quot;species:index500&quot;)) phylo_df &lt;- as.data.frame(phylo_eff$&#39;species:index500&#39;) phylo_df %&gt;% ggplot(., aes(x=index500, y=estimate__, color=species, fill=species)) + geom_line(size=0.9) + geom_ribbon(aes(ymin=lower__, ymax=upper__), alpha=0.35, linetype=0) + scale_color_manual(values= squirrel_colors) + scale_fill_manual(values=squirrel_colors) + theme_minimal() + labs(x = &quot;Urbanization index&quot;, y = &quot;Phylogenetic diversity estimate&quot;) Bayesian models - functional alpha set.seed(123) func.brm &lt;- brm(func ~ species + index500 + season + + species:index500 + species:season + (1|animal), data=diversity.data, family=gaussian(), chains = 3, iter = 3000, warmup = 1000, control = list(adapt_delta = 0.9)) # #assessing model fit # plot(func.brm) # # #posterior predictive check # pp_check(func.brm) describe_posterior(func.brm) Summary of Posterior Distribution Parameter | Median | 95% CI | pd | ROPE | % in ROPE | Rhat | ESS ---------------------------------------------------------------------------------------------------------------------- (Intercept) | 1.39 | [ 1.36, 1.43] | 100% | [-0.01, 0.01] | 0% | 1.000 | 4449.00 speciesSciurusvulgaris | 9.81e-04 | [-0.05, 0.05] | 51.32% | [-0.01, 0.01] | 23.51% | 1.000 | 3928.00 index500 | -0.02 | [-0.10, 0.06] | 66.97% | [-0.01, 0.01] | 14.00% | 1.000 | 4010.00 seasonautumn | 5.57e-03 | [-0.04, 0.05] | 61.07% | [-0.01, 0.01] | 29.44% | 1.001 | 4375.00 seasonwinter | 0.01 | [-0.03, 0.06] | 75.30% | [-0.01, 0.01] | 24.46% | 1.001 | 4731.00 speciesSciurusvulgaris:index500 | -0.03 | [-0.13, 0.07] | 73.98% | [-0.01, 0.01] | 10.67% | 1.000 | 3876.00 speciesSciurusvulgaris:seasonautumn | -0.07 | [-0.12, -0.02] | 99.63% | [-0.01, 0.01] | 0% | 1.001 | 4377.00 speciesSciurusvulgaris:seasonwinter | -0.07 | [-0.12, -0.01] | 99.05% | [-0.01, 0.01] | 0% | 1.001 | 4469.00 plot(p_direction(func.brm), stack=FALSE) # names(func.brm$fit) # func.brm$fit &lt;- func.brm$fit %&gt;% # recode(&quot;b_season1&quot; = &quot;b_seasonautumn&quot;, # &quot;b_season2&quot; = &quot;b_seasonwinter&quot;) # # # # Obtain the p_direction data # pd_data &lt;- p_direction(func.brm) # # unique(pd_data$Parameter) # # parnames(func.brm) # tidybayes::get_variables(func.brm) # # func.brm2 &lt;- rename_pars(func.brm) # # # Manually set the labels # # Assuming &quot;season1&quot; corresponds to &quot;seasonautumn&quot; and &quot;season2&quot; to &quot;seasonwinter&quot; # pd_data$Parameter &lt;- recode(pd_data$Parameter, # &quot;b_season1&quot; = &quot;b_seasonautumn&quot;, # &quot;b_season2&quot; = &quot;b_seasonwinter&quot;) # # pd_data$Parameter &lt;- gsub(&quot;b_season1&quot;, &quot;b_seasonautumn&quot;, pd_data$Parameter) # pd_data$Parameter &lt;- gsub(&quot;b_season2&quot;, &quot;b_seasonwinter&quot;, pd_data$Parameter) # # plot(pd_data) #conditional effects func_eff &lt;- (conditional_effects(func.brm, effects = &quot;species:season&quot;)) func_df &lt;- as.data.frame(func_eff$&#39;species:season&#39;) func_df %&gt;% ggplot(., aes(x=species, y=estimate__, group=season, color=season, fill=season)) + geom_point(position=position_dodge(width=0.4), size=4) + geom_errorbar(aes(ymin=lower__, ymax=upper__, group=season), position=position_dodge(width=0.4), size=0.6, width=0.4) + scale_color_manual(values= season_colors) + scale_fill_manual(values=season_colors) + theme_classic() + labs(x = &quot;&quot;, y = &quot;Functional diversity estimate&quot;) 8.3 Beta diversity #neutral beta div ALL adult &lt;- sample_metadata %&gt;% filter(development==&quot;Adult&quot;) %&gt;% pull(sample) genome_counts_adult &lt;- genome_counts %&gt;% select(all_of(adult)) beta_q1n &lt;-hilldiv2::hillpair(genome_counts_adult, q=1, metric=&quot;S&quot;) # beta_q1p &lt;-hilldiv2::hillpair(genome_counts_adult,q=1,tree=genome_tree, metric=&quot;S&quot;) # beta_q1f &lt;-hilldiv2::hillpair(genome_counts_adult,q=1,dist=dist) #neutral beta div RED red &lt;- sample_metadata %&gt;% filter(development==&quot;Adult&quot;) %&gt;% filter(species==&quot;Sciurus vulgaris&quot;) %&gt;% pull(sample) genome_counts_red &lt;- genome_counts %&gt;% select(all_of(red)) beta_red &lt;-hilldiv2::hillpair(genome_counts_red, q=1, metric=&quot;S&quot;) #neutral beta div GREY grey &lt;- sample_metadata %&gt;% filter(development==&quot;Adult&quot;) %&gt;% filter(species==&quot;Sciurus carolinensis&quot;) %&gt;% pull(sample) genome_counts_grey &lt;- genome_counts %&gt;% select(all_of(grey)) beta_grey &lt;-hilldiv2::hillpair(genome_counts_grey, q=1, metric=&quot;S&quot;) 8.3.1 Both species #neutral beta diversity PERMANOVA sample_metadata_adonis &lt;- sample_metadata %&gt;% filter(sample %in% labels(beta_q1n)) %&gt;% arrange(sample) %&gt;% #mutate(location=paste0(round(longitude,2),&quot;_&quot;,round(latitude,2))) %&gt;% select(animal,sample,species,index500,season,sex) %&gt;% select_if(~ length(unique(.)) &gt; 1) %&gt;% #remove columns with all-identical values column_to_rownames(var = &quot;sample&quot;) %&gt;% as.data.frame() dispersion &lt;- betadisper(beta_q1n, group=sample_metadata_adonis[labels(beta_q1n),]$species) # plot(dispersion, main=&quot;PCoA&quot;) boxplot(dispersion$distances ~ dispersion$group, main=&quot;Distance to centroids&quot;) permutest(dispersion) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.70302 0.70302 259.04 999 0.001 *** Residuals 159 0.43152 0.00271 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #adjust permutation design to account for repeated measures in subsequent PERMANOVA hr &lt;- with(sample_metadata_adonis, how(nperm = 999, blocks = animal)) adonis2(formula=beta_q1n ~ species + index500 + season + sex, data=sample_metadata_adonis[labels(beta_q1n),], permutations=hr, na.action = na.omit) %&gt;% as.matrix() %&gt;% print() Df SumOfSqs R2 F Pr(&gt;F) species 1 10.7373333 0.155249725 30.068241 0.001 index500 1 0.9988830 0.014442721 2.797217 0.002 season 2 1.6130327 0.023322633 2.258524 0.001 sex 1 0.4621244 0.006681798 1.294108 0.134 Residual 155 55.3503162 0.800303124 NA NA Total 160 69.1616896 1.000000000 NA NA pairwise.adonis(beta_q1n,sample_metadata_adonis[labels(beta_q1n),]$season, perm=999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 autumn vs winter 1 0.6006874 1.403169 0.01215884 0.093 0.279 2 autumn vs spring-summer 1 1.0173361 2.379158 0.02155442 0.004 0.012 . 3 winter vs spring-summer 1 0.8748089 2.053717 0.02138092 0.013 0.039 . #NMDS set.seed(123) beta_q1n_nmds &lt;- beta_q1n %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(sample !=&quot;EHI00420&quot;) #remove outlier beta_q1n_nmds %&gt;% group_by(species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x = NMDS1, y = NMDS2)) + scale_colour_manual(values = squirrel_colors) + scale_fill_manual(values = squirrel_colors) + geom_point(size = 3, alpha=0.8, aes(color = species)) + stat_ellipse(data=beta_q1n_nmds, aes(x = NMDS1, y = NMDS2, group = species, fill=species, color=species),geom=&quot;polygon&quot;,level=0.95,alpha=0, size=0.8) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2, color=species), alpha=0.3) + labs(x = &quot;NMDS1&quot;, y = &quot;NMDS2&quot;) + theme_classic() + theme(axis.text = element_text(colour = &quot;black&quot;, size = 12), axis.title = element_text(size = 14, colour = &quot;black&quot;), legend.text = element_text(size = 11, colour =&quot;black&quot;), legend.position = &quot;right&quot;, axis.title.y = element_text(size = 14), legend.title = element_text(size = 14, colour = &quot;black&quot;), legend.key=element_blank(), panel.background = element_blank(), panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 0.5)) 8.3.2 Red squirrel # # metadata_adonis_red &lt;- sample_metadata %&gt;% # filter(sample %in% labels(beta_red)) %&gt;% # arrange(sample) %&gt;% # #mutate(location=paste0(round(longitude,2),&quot;_&quot;,round(latitude,2))) %&gt;% # select(animal,sample,species,index500,season,sex) %&gt;% # select_if(~ length(unique(.)) &gt; 1) %&gt;% #remove columns with all-identical values # column_to_rownames(var = &quot;sample&quot;) %&gt;% # as.data.frame() # # # #adjust permutation design to account for repeated measures in subsequent PERMANOVA # hr_red &lt;- with(metadata_adonis_red, how(nperm = 999, blocks = animal)) # # adonis2(formula=beta_red ~ season + index500 + sex, # data=metadata_adonis_red[labels(beta_red),], permutations=hr_red, na.action = na.omit) %&gt;% # as.matrix() %&gt;% # print() # # # dispersion_red &lt;- betadisper(beta_red, group=metadata_adonis_red[labels(beta_red),]$season) # # plot(dispersion_red, main=&quot;PCoA&quot;) # boxplot(dispersion_red$distances ~ dispersion_red$group, main=&quot;Distance to centroids&quot;) # permutest(dispersion_red) # # pairwise.adonis(beta_red,metadata_adonis_red[labels(beta_red),]$season, perm=999) # # #NMDS # set.seed(123) # beta_red_nmds &lt;- beta_red %&gt;% # metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% # vegan::scores() %&gt;% # as_tibble(., rownames = &quot;sample&quot;) %&gt;% # left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% # filter(sample !=&quot;EHI00420&quot;) #remove outliers # # #stressplot(beta_q1n_nmds) # # # Extract vector and factors from NMDS ordination # env &lt;- beta_red_nmds %&gt;% select(index500, season) # nmds &lt;- beta_red_nmds %&gt;% select(NMDS1, NMDS2) # en &lt;- envfit(nmds, env, permutations = 999, na.rm = TRUE) # en # # # ordisurf(x = nmds, # # y = env$index500, # # bubble = 4) # # # # Make dataframe with vector to add to ggplot # vec.df &lt;- as.data.frame(en$vectors$arrows*sqrt(en$vectors$r)) # vec.df$variables &lt;- rownames(vec.df) # # # beta_red_nmds %&gt;% group_by(season) %&gt;% # mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% # mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% # ungroup() %&gt;% # ggplot(., aes(x = NMDS1, y = NMDS2)) + # scale_colour_manual(values = season_colors) + # scale_fill_manual(values = season_colors) + # stat_ellipse(aes(x = NMDS1, y = NMDS2, group = season, color=season, fill=season), geom=&quot;polygon&quot;, alpha=0, size=0.8, level=0.95) + # geom_point(size = 3, alpha=1, aes(color = season)) + # geom_segment(data = vec.df, # aes(x = 0, xend = NMDS1*0.1, y = 0, yend = NMDS2*0.1), # arrow = arrow(length = unit(0.25, &quot;cm&quot;)), # inherit.aes = FALSE, size =0.6, alpha = 1, colour = &quot;grey10&quot;) + # #geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2, color=season), alpha=0.3) + # geom_text(data = vec.df, # aes(x = NMDS1*0.12, y=NMDS2*0.12, label = variables), # size=4.5) + # labs(x = &quot;NMDS1&quot;, y = &quot;NMDS2&quot;) + # geom_hline(yintercept = 0) + # geom_vline(xintercept = 0) + # theme_classic() + # theme(axis.text = element_text(colour = &quot;black&quot;, size = 12), # axis.title = element_text(size = 14, colour = &quot;black&quot;), # legend.text = element_text(size = 11, colour =&quot;black&quot;), # legend.position = &quot;right&quot;, # legend.key=element_blank(), # legend.title = element_text(size = 14, colour = &quot;black&quot;), # panel.background = element_blank(), # panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 0.5)) 8.3.3 Grey squirrel # # #PERMANOVA # metadata_adonis_grey &lt;- sample_metadata %&gt;% # filter(sample %in% labels(beta_grey)) %&gt;% # arrange(sample) %&gt;% # #mutate(location=paste0(round(longitude,2),&quot;_&quot;,round(latitude,2))) %&gt;% # select(animal,sample,species,index500,season,sex) %&gt;% # select_if(~ length(unique(.)) &gt; 1) %&gt;% #remove columns with all-identical values # column_to_rownames(var = &quot;sample&quot;) %&gt;% # as.data.frame() # # # #adjust permutation design to account for repeated measures in subsequent PERMANOVA # hr_grey &lt;- with(metadata_adonis_grey, how(nperm = 999, blocks = animal)) # # adonis2(formula=beta_grey ~ season + index500 + sex, # data=metadata_adonis_grey[labels(beta_grey),], permutations=hr_grey, na.action = na.omit) %&gt;% # as.matrix() %&gt;% # print() # # dispersion_grey &lt;- betadisper(beta_grey, group=metadata_adonis_grey[labels(beta_grey),]$season) # # plot(dispersion_grey, main=&quot;PCoA&quot;) # boxplot(dispersion_grey$distances ~ dispersion_grey$group, main=&quot;Distance to centroids&quot;) # permutest(dispersion_grey) # # pairwise.adonis(beta_grey,metadata_adonis_grey[labels(beta_grey),]$season, perm=999) # # #NMDS # set.seed(123) # beta_grey_nmds &lt;- beta_grey %&gt;% # metaMDS(.,trymax = 900, k=2, verbosity=FALSE) %&gt;% # vegan::scores() %&gt;% # as_tibble(., rownames = &quot;sample&quot;) %&gt;% # left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% # filter(sample !=&quot;EHI00420&quot;) #remove outliers # # #stressplot(beta_q1n_nmds) # # # Extract vector and factors from NMDS ordination # env &lt;- beta_grey_nmds %&gt;% select(index500, season) # nmds &lt;- beta_grey_nmds %&gt;% select(NMDS1, NMDS2) # # en &lt;- envfit(nmds, env, permutations = 999, na.rm = TRUE) # en # # # ordisurf(x = nmds, # # y = env$index500, # # bubble = 4) # # # Make dataframe with vector to add to ggplot # vec.df &lt;- as.data.frame(en$vectors$arrows*sqrt(en$vectors$r)) # vec.df$variables &lt;- rownames(vec.df) # # # beta_grey_nmds %&gt;% group_by(season) %&gt;% # mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% # mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% # ungroup() %&gt;% # ggplot(., aes(x = NMDS1, y = NMDS2)) + # scale_colour_manual(values = season_colors) + # scale_fill_manual(values = season_colors) + # stat_ellipse(aes(x = NMDS1, y = NMDS2, group = season, color=season, fill=season), geom=&quot;polygon&quot;, alpha=0, size=0.8, level=0.95) + # geom_point(size = 3, alpha=1, aes(color = season)) + # geom_segment(data = vec.df, # aes(x = 0, xend = NMDS1*0.1, y = 0, yend = NMDS2*0.1), # arrow = arrow(length = unit(0.25, &quot;cm&quot;)), # inherit.aes = FALSE, size =0.6, alpha = 1, colour = &quot;grey10&quot;) + # #geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2, color=season), alpha=0.3) + # geom_text(data = vec.df, # aes(x = NMDS1*0.51, y=NMDS2*0.51, label = variables), # size=4.5) + # labs(x = &quot;NMDS1&quot;, y = &quot;NMDS2&quot;) + # geom_hline(yintercept = 0) + # geom_vline(xintercept = 0) + # theme_classic() + # theme(axis.text = element_text(colour = &quot;black&quot;, size = 12), # axis.title = element_text(size = 14, colour = &quot;black&quot;), # legend.text = element_text(size = 11, colour =&quot;black&quot;), # legend.position = &quot;right&quot;, # legend.key=element_blank(), # legend.title = element_text(size = 14, colour = &quot;black&quot;), # panel.background = element_blank(), # panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 0.5)) "],["joint-species-distribution-modelling---model-setup.html", "Chapter 9 Joint Species Distribution Modelling - model setup 9.1 Data preparation 9.2 Prepare input for HMSCs 9.3 Define HMSC models and MCMC 9.4 Generate HMSC executables 9.5 Fit Hmsc models (in Mjolnir HPC) 9.6 Assess chain convergence", " Chapter 9 Joint Species Distribution Modelling - model setup rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) singlem &lt;- read.csv(&quot;data/singlem.csv&quot;,sep=&quot;;&quot;,header=T) 9.1 Data preparation # Select subset of most represented MAGs sample_metadata2 &lt;- sample_metadata %&gt;% right_join(singlem, by = join_by(sample == sample)) %&gt;% filter(development==&quot;Adult&quot;) %&gt;% #remove juveniles, nursing and pregnant females filter(est_mapp&gt;0.8) #remove 5 samples with low DAMR selected_genomes0 &lt;- sample_metadata2 %&gt;% pull(sample) # Subset by prevalence (present in more than 5 samples) selected_genomes1 &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(any_of(selected_genomes0)) %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) != 0) &gt;= 5) %&gt;% rownames() # Subset by minimum representation of 1% relative abundance in at least 5 samples selected_genomes2 &lt;- genome_counts %&gt;% filter(genome %in% selected_genomes1) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% hilldiv2::tss() %&gt;% as.data.frame() %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) &gt;= 0.01) &gt;= 5) %&gt;% rownames() # Subset genome metadata genome_metadata_subset &lt;- genome_metadata %&gt;% filter(genome %in% selected_genomes2) 9.2 Prepare input for HMSCs 9.2.1 Red squirrel #RED SQUIRREL MODEL # Random effects data (study design) StudyDesign.red &lt;- sample_metadata %&gt;% filter(species==&quot;Sciurus vulgaris&quot;) %&gt;% select(sample,animal,sampling_site) %&gt;% mutate(sampling_site = factor(sampling_site)) %&gt;% mutate(animal = factor(animal)) %&gt;% column_to_rownames(&quot;sample&quot;) #Calculate normalisation factor to account for genome length normalisation_factor &lt;- genome_metadata %&gt;% filter(genome %in% selected_genomes2) %&gt;% mutate(factor=median(length)/length) %&gt;% pull(factor) # Genome count table (quantitative community data) YData.red &lt;- read_counts %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes mutate(across(where(is.numeric), ~ round(. * normalisation_factor,0) )) %&gt;% mutate(across(where(is.numeric), ~ . +1 )) %&gt;% #add +1 pseudocount to remove zeros mutate(across(where(is.numeric), ~ log(.) )) %&gt;% #log-transform column_to_rownames(&quot;genome&quot;) %&gt;% select(all_of(row.names(StudyDesign.red))) %&gt;% as.data.frame() %&gt;% t() # transpose # Fixed effects data (explanatory variables) XData.red &lt;- sample_metadata %&gt;% filter(species==&quot;Sciurus vulgaris&quot;) %&gt;% select(sample,index500,season) %&gt;% mutate(logseqdepth=read_counts %&gt;% #total log-sequencing depth select(all_of(row.names(StudyDesign.red))) %&gt;% colSums() %&gt;% log() ) %&gt;% mutate(index500 = index500) %&gt;% mutate(season = factor(season, levels=c(&quot;spring-summer&quot;,&quot;autumn&quot;,&quot;winter&quot;))) %&gt;% column_to_rownames(&quot;sample&quot;) # Genome trait data TrData.red &lt;- genome_gifts %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes arrange(match(genome, colnames(YData.red))) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% to.elements(.,GIFT_db) %&gt;% to.functions(.,GIFT_db) %&gt;% as.data.frame() # Genome phylogeny PData &lt;- genome_tree 9.2.2 Grey squirrel #GREY SQUIRREL MODEL # Random effects data (study design) StudyDesign.grey &lt;- sample_metadata %&gt;% filter(species==&quot;Sciurus carolinensis&quot;) %&gt;% select(sample,animal,sampling_site) %&gt;% mutate(sampling_site = factor(sampling_site)) %&gt;% mutate(animal = factor(animal)) %&gt;% column_to_rownames(&quot;sample&quot;) #Calculate normalisation factor to account for genome length normalisation_factor &lt;- genome_metadata %&gt;% filter(genome %in% selected_genomes2) %&gt;% mutate(factor=median(length)/length) %&gt;% pull(factor) # Genome count table (quantitative community data) YData.grey &lt;- read_counts %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes mutate(across(where(is.numeric), ~ round(. * normalisation_factor,0) )) %&gt;% mutate(across(where(is.numeric), ~ . +1 )) %&gt;% #add +1 pseudocount to remove zeros mutate(across(where(is.numeric), ~ log(.) )) %&gt;% #log-transform column_to_rownames(&quot;genome&quot;) %&gt;% select(all_of(row.names(StudyDesign.grey))) %&gt;% as.data.frame() %&gt;% t() # transpose # Fixed effects data (explanatory variables) XData.grey &lt;- sample_metadata %&gt;% filter(species==&quot;Sciurus carolinensis&quot;) %&gt;% select(sample,index500,season) %&gt;% mutate(logseqdepth=read_counts %&gt;% #total log-sequencing depth select(all_of(row.names(StudyDesign.grey))) %&gt;% colSums() %&gt;% log() ) %&gt;% mutate(index500 = index500) %&gt;% mutate(season = factor(season, levels=c(&quot;spring-summer&quot;,&quot;autumn&quot;,&quot;winter&quot;))) %&gt;% column_to_rownames(&quot;sample&quot;) # Genome trait data TrData.grey &lt;- genome_gifts %&gt;% rownames_to_column(var=&quot;genome&quot;) %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes arrange(match(genome, colnames(YData.grey))) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% to.elements(.,GIFT_db) %&gt;% to.functions(.,GIFT_db) %&gt;% as.data.frame() # Genome phylogeny PData &lt;- genome_tree 9.3 Define HMSC models and MCMC # Fixed effects formula XFormula = ~index500 + season + logseqdepth # Study design rL.animal.red = HmscRandomLevel(units = levels(StudyDesign.red$animal)) rL.sampling_site.red = HmscRandomLevel(units = levels(StudyDesign.red$sampling_site)) rL.animal.grey = HmscRandomLevel(units = levels(StudyDesign.grey$animal)) rL.sampling_site.grey = HmscRandomLevel(units = levels(StudyDesign.grey$sampling_site)) #Define models model.red = Hmsc(Y=YData.red, XData = XData.red, XFormula = XFormula, studyDesign = StudyDesign.red, phyloTree = PData, ranLevels = list(&quot;animal&quot;=rL.animal.red, &quot;sampling_site&quot;=rL.sampling_site.red), distr = &quot;normal&quot;, YScale = TRUE) model.grey = Hmsc(Y=YData.grey, XData = XData.grey, XFormula = XFormula, studyDesign = StudyDesign.grey, phyloTree = PData, ranLevels = list(&quot;animal&quot;=rL.animal.grey, &quot;sampling_site&quot;=rL.sampling_site.grey), distr = &quot;normal&quot;, YScale = TRUE) #Save list of models as an R object. model_list = list(model.red=model.red,model.grey=model.grey) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} save(model_list, file = &quot;hmsc/hmsc.Rdata&quot;) Upload hmsc/hmsc.Rdata to the HPC respecting the directory structure. # How often to sample the MCMC MCMC_samples_list = 250 # The number of MCMC steps between each recording sample MCMC_thin_list = c(1, 10) # The number of MCMC chains to use nChains = 4 9.4 Generate HMSC executables The next chunk generates shell files for every combination of model, MCMC samples and MCMM thinning, ready to be launched as SLURM jobs. modelchains &lt;- expand.grid(model = names(model_list), sample = MCMC_samples_list, thin = MCMC_thin_list) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} for(i in c(1:nrow(modelchains))){ modelname=as.character(modelchains[i,1]) sample=modelchains[i,2] thin=modelchains[i,3] executablename &lt;- paste0(&quot;hmsc/exe_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.sh&quot;) fitname &lt;- paste0(&quot;hmsc/fit_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) convname &lt;- paste0(&quot;hmsc/conv_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) model &lt;- paste0(&#39;model_list$&#39;,modelname) psrf.beta.name &lt;- paste0(&quot;psrf.beta.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.gamma.name &lt;- paste0(&quot;psrf.gamma.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.rho.name &lt;- paste0(&quot;psrf.rho.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) jobname &lt;- paste0(&quot;hmsc_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) minutes &lt;- round(sample * thin * (ncol(YData.red)/50), 0) code &lt;- sprintf(&quot;#!/bin/bash #SBATCH --job-name=%s # Job name #SBATCH --nodes=1 #SBATCH --ntasks=4 # Run on 4 CPUs #SBATCH --mail-user=antton.alberdi@sund.ku.dk #SBATCH --mem=200gb # Job memory request #SBATCH --time=%d # In minutes # Activate conda environment module load mamba/1.3.1 if ! conda info --envs | grep -q hmsc; then mamba create -p ./hmsc/hmsc_env -y r-essentials r-base r-tidyverse r-Hmsc fi # Activate conda environment source activate ./hmsc/hmsc_env # Run R script Rscript -e &#39; library(tidyverse) library(Hmsc) # Load formulas and data load(\\&quot;hmsc/hmsc.Rdata\\&quot;) # Declare placeholders modelname = \\&quot;%s\\&quot; model = %s fitname = \\&quot;%s\\&quot; convname = \\&quot;%s\\&quot; sample = %d thin = %d nchains = %d # Run model fitting m = sampleMcmc(hM = model, samples = sample, thin = thin, adaptNf=rep(ceiling(0.4*sample*thin),model$nr), transient = ceiling(0.5*sample*thin), nChains = nchains, nParallel = nchains) # Run model cross-validation partition &lt;- createPartition(m, nfolds = 5) cv &lt;- computePredictedValues(m, partition=partition, nChains = 4) # Assess chain convergence mpost = convertToCodaObject(m, spNamesNumbers = c(T,F), covNamesNumbers = c(T,F), Beta = TRUE, Gamma = TRUE, V = FALSE, Sigma = FALSE, Rho = TRUE, Eta = FALSE, Lambda = FALSE, Alpha = FALSE, Omega = FALSE, Psi = FALSE, Delta = FALSE) # Convert to CODA object # Fixed effects assign(paste0(\\&quot;psrf.beta.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Beta,multivariate=FALSE)$psrf) # Traits assign(paste0(\\&quot;psrf.gamma.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Gamma,multivariate=FALSE)$psrf) # Phylogeny assign(paste0(\\&quot;psrf.rho.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Rho,multivariate=FALSE)$psrf) # Write convergence data save(%s, %s, %s, file=convname) # Save model fit object save(m, cv, file=fitname) &#39; &quot;, jobname, minutes, modelname, model, fitname, convname, sample, thin, nChains, psrf.beta.name, psrf.gamma.name, psrf.rho.name) writeLines(code, executablename) } Upload the produced hmsc/exe_XXXXX.sh files to the HPC respecting the directory structure. 9.5 Fit Hmsc models (in Mjolnir HPC) Launch the SLURM jobs by using: # Submit all .sh files in the hmsc folder for jobfile in exe_*.sh; do sbatch &quot;$jobfile&quot; done #Or launch them one by one only the ones you want to launch sbatch hmsc/exe_model.red_250_10.sh sbatch hmsc/exe_model.red_250_10.sh 9.6 Assess chain convergence Convergence diagnostic values substantially above 1 indicate lack of convergence. Values below 1.1 are considered good enough # Load all conv file available in the hmsc folder # list.files(path = &quot;hmsc&quot;, pattern = &quot;^conv&quot;, full.names = TRUE, include.dirs = TRUE) %&gt;% # lapply(.,load,.GlobalEnv) list.files(path = &quot;hmsc&quot;, pattern = &quot;^conv&quot;, full.names = TRUE, include.dirs = TRUE) %&gt;% walk(~ { print(paste(&quot;Loading file:&quot;, .x)) # Debugging output: Print the file being loaded load(.x, envir = .GlobalEnv) }) [1] &quot;Loading file: hmsc/conv_model.grey_250_10.Rdata&quot; [1] &quot;Loading file: hmsc/conv_model.red_250_10.Rdata&quot; # Create a merged psrf.beta (genome) plot ls() %&gt;% grep(&quot;^psrf\\\\.beta&quot;, ., value = TRUE) %&gt;% map_dfr(~ { mat &lt;- get(.x) data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% rownames_to_column(var=&quot;parameter&quot;) %&gt;% mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.beta.&quot;,&quot;&quot;,.)) %&gt;% mutate(sample = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(2)) %&gt;% #extract sample info from model name mutate(thin = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(3)) #extract thin info from model name }) %&gt;% ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + ylim(0.9,2)+ labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ theme_classic()+ coord_flip() # Create a merged psrf.gamma (trait) plot # ls() %&gt;% # grep(&quot;^psrf\\\\.gamma&quot;, ., value = TRUE) %&gt;% # map_dfr(~ { # mat &lt;- get(.x) # data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% # rownames_to_column(var=&quot;parameter&quot;) %&gt;% # mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.gamma.&quot;,&quot;&quot;,.)) %&gt;% # mutate(sample = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(2)) %&gt;% #extract sample info from model name # mutate(thin = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(3)) #extract thin info from model name # }) %&gt;% # ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + # geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + # geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + # stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + # geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + # ylim(0.9,2)+ # labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ # theme_classic()+ # coord_flip() # Create a merged psrf.rho (phylogeny) plot # ls() %&gt;% # grep(&quot;^psrf\\\\.rho&quot;, ., value = TRUE) %&gt;% # map_dfr(~ { # mat &lt;- get(.x) # data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% # rownames_to_column(var=&quot;parameter&quot;) %&gt;% # mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.rho.&quot;,&quot;&quot;,.)) %&gt;% # mutate(sample = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(2)) %&gt;% #extract sample info from model name # mutate(thin = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(3)) #extract thin info from model name # }) %&gt;% # ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + # geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + # geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + # stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + # geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + # ylim(0.9,2)+ # labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ # theme_classic()+ # coord_flip() # Select modelchain of interest # load(&quot;hmsc/fit_model.red_250_10.Rdata&quot;) # mred.WAIC &lt;- computeWAIC(m, ghN = 10, byColumn = TRUE) %&gt;% sum() # # load(&quot;hmsc/fit_model.grey_250_10.Rdata&quot;) # mgrey.WAIC &lt;- computeWAIC(m, ghN = 10, byColumn = TRUE) %&gt;% sum() # # # WAICsum &lt;- c(mred.WAIC,mgrey.WAIC) %&gt;% rbind() # # print(WAICsum) # print(WAICmedian) "],["joint-species-distribution-modelling---output-analysis.html", "Chapter 10 Joint Species Distribution Modelling - output analysis 10.1 Variance partitioning 10.2 Model fit 10.3 Predictive MAGs 10.4 Posterior estimates 10.5 Correlations among bacteria 10.6 Microbiome composition predictions 10.7 Microbiome functional predictions", " Chapter 10 Joint Species Distribution Modelling - output analysis rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) options(contrasts = c(&#39;contr.sum&#39;,&#39;contr.poly&#39;)) # Select desired support threshold support_threshold=0.9 negsupport_threshold=1-support_threshold # Load modelchains load(&quot;hmsc/fit_model.red_250_10.Rdata&quot;) m.red &lt;- m cv.red &lt;- cv load(&quot;hmsc/fit_model.grey_250_10.Rdata&quot;) m.grey &lt;- m cv.grey &lt;- cv rm(m,cv) levels &lt;- c(&quot;index500&quot;, &quot;season&quot;, &quot;logseqdepth&quot;, &quot;Random: animal&quot;, &quot;Random: sampling_site&quot;) # Basal tree hmsc_tree &lt;- genome_tree %&gt;% keep.tip(., tip=m.red$spNames) 10.1 Variance partitioning 10.1.1 Red squirrel # Compute variance partitioning varpart.red=computeVariancePartitioning(m.red) varpart.red$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=levels)) %&gt;% group_by(variable) %&gt;% summarise(mean=mean(value)*100,sd=sd(value)*100) %&gt;% tt() tinytable_ukj8pe6prr40yi3tasim .table td.tinytable_css_lv76p8dksueuihhyjv13, .table th.tinytable_css_lv76p8dksueuihhyjv13 { border-bottom: solid 0.1em #d3d8dc; } variable mean sd index500 4.153817 5.899410 season 17.565400 7.312821 logseqdepth 7.047628 5.859817 Random: animal 59.430963 18.634969 Random: sampling_site 11.802193 13.741861 preds = computePredictedValues(m.red) MF = evaluateModelFit(hM=m.red, predY=preds) hist(MF$R2, xlim = c(0,1), main=paste0(&quot;Mean = &quot;, round(mean(MF$R2),2))) # Varpart table varpart_table.red &lt;- varpart.red$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=rev(levels))) %&gt;% mutate(genome=factor(genome, levels=rev(hmsc_tree$tip.label))) # Phylums phylums &lt;- genome_metadata %&gt;% filter(genome %in% hmsc_tree$tip.label) %&gt;% arrange(match(genome, hmsc_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) # Basal ggtree varpart_tree &lt;- hmsc_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors next to the tree tips varpart_tree &lt;- gheatmap(varpart_tree, phylums, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=custom_colors)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap varpart_tree &lt;- varpart_tree + new_scale_fill() # Add variance stacked barplot vertical_tree &lt;- varpart_tree + scale_fill_manual(values=c(&quot;#122f3d&quot;,&quot;#83bb90&quot;,&quot;#cccccc&quot;,&quot;#ed8a45&quot;,&quot;#f6de9c&quot;,&quot;#b2b530&quot;,&quot;#be3e2b&quot;,&quot;#12738f&quot;)) + geom_fruit( data=varpart_table.red, geom=geom_bar, mapping = aes(x=value, y=genome, fill=variable, group=variable), pwidth = 2, offset = 0.05, width= 1, orientation=&quot;y&quot;, stat=&quot;identity&quot;)+ labs(fill=&quot;Variable&quot;) vertical_tree 10.1.2 Grey squirrel # Compute variance partitioning varpart.grey=computeVariancePartitioning(m.grey) varpart.grey$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=levels)) %&gt;% group_by(variable) %&gt;% summarise(mean=mean(value)*100,sd=sd(value)*100) %&gt;% tt() tinytable_emsk8ao1jjl36nyepg8y .table td.tinytable_css_1t21f2nd56bvasoetg71, .table th.tinytable_css_1t21f2nd56bvasoetg71 { border-bottom: solid 0.1em #d3d8dc; } variable mean sd index500 3.141512 3.309444 season 4.515606 5.616803 logseqdepth 33.570083 22.785619 Random: animal 46.637773 23.876555 Random: sampling_site 12.135027 14.569624 preds = computePredictedValues(m.grey) MF = evaluateModelFit(hM=m.grey, predY=preds) hist(MF$R2, xlim = c(0,1), main=paste0(&quot;Mean = &quot;, round(mean(MF$R2),2))) # Varpart table varpart_table.grey &lt;- varpart.grey$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=rev(levels))) %&gt;% mutate(genome=factor(genome, levels=rev(hmsc_tree$tip.label))) # Phylums phylums &lt;- genome_metadata %&gt;% filter(genome %in% hmsc_tree$tip.label) %&gt;% arrange(match(genome, hmsc_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) # Basal ggtree varpart_tree &lt;- hmsc_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors next to the tree tips varpart_tree &lt;- gheatmap(varpart_tree, phylums, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=custom_colors)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap varpart_tree &lt;- varpart_tree + new_scale_fill() # Add variance stacked barplot vertical_tree &lt;- varpart_tree + scale_fill_manual(values=c(&quot;#122f3d&quot;,&quot;#83bb90&quot;,&quot;#cccccc&quot;,&quot;#ed8a45&quot;,&quot;#f6de9c&quot;,&quot;#b2b530&quot;,&quot;#be3e2b&quot;,&quot;#12738f&quot;)) + geom_fruit( data=varpart_table.grey, geom=geom_bar, mapping = aes(x=value, y=genome, fill=variable, group=variable), pwidth = 2, offset = 0.05, width= 1, orientation=&quot;y&quot;, stat=&quot;identity&quot;)+ labs(fill=&quot;Variable&quot;) vertical_tree 10.2 Model fit MFCV.red &lt;- evaluateModelFit(hM=m.red, predY=cv.red) mean(MFCV.red$R2, na.rm = TRUE) [1] 0.1413092 # genome_fit &lt;- tibble(genome=m.red$spNames, r2 = MFCV.red[[2]]) # genome_counts %&gt;% # select(genome, any_of(red_samples)) %&gt;% # mutate_if(is.numeric, ~ . / sum(.)) %&gt;% # left_join(genome_fit, by=&quot;genome&quot;) %&gt;% # filter(r2&gt;0.10) %&gt;% # select(-c(genome,r2)) %&gt;% # colSums() %&gt;% # hist() var_pred_table.red &lt;- tibble(mag=m.red$spNames, pred=MFCV.red$R2, var_pred=MFCV.red$R2 * varpart.red$vals[1,], support=getPostEstimate(hM=m.red, parName=&quot;Beta&quot;)$support %&gt;% .[2,], estimate=getPostEstimate(hM=m.red, parName=&quot;Beta&quot;)$mean %&gt;% .[2,]) MFCV.grey &lt;- evaluateModelFit(hM=m.grey, predY=cv.grey) mean(MFCV.grey$R2, na.rm = TRUE) [1] 0.2293484 # genome_fit &lt;- tibble(genome=m.red$spNames, r2 = MFCV.red[[2]]) # genome_counts %&gt;% # select(genome, any_of(grey_samples)) %&gt;% # mutate_if(is.numeric, ~ . / sum(.)) %&gt;% # left_join(var_pred_table.red, by=join_by(&quot;genome&quot;==&quot;mag&quot;)) %&gt;% # filter(var_pred&gt;=0.005) %&gt;% # select(-c(genome,pred, var_pred, support, estimate)) %&gt;% # colSums() %&gt;% # hist() var_pred_table.grey &lt;- tibble(mag=m.grey$spNames, pred=MFCV.grey$R2, var_pred=MFCV.grey$R2 * varpart.grey$vals[1,], support=getPostEstimate(hM=m.grey, parName=&quot;Beta&quot;)$support %&gt;% .[2,], estimate=getPostEstimate(hM=m.grey, parName=&quot;Beta&quot;)$mean %&gt;% .[2,]) 10.3 Predictive MAGs pred_mags.red&lt;- var_pred_table.red%&gt;% filter(var_pred&gt;=0.005) %&gt;% pull(mag) red_samples &lt;- sample_metadata %&gt;% filter(species == &quot;Sciurus vulgaris&quot;) %&gt;% dplyr::select(sample) %&gt;% pull() pred.ab.red &lt;- genome_counts %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation filter(genome %in% m.red$spNames) %&gt;% rowwise() %&gt;% #compute for each row (genome) mutate( mean = mean(c_across(all_of(red_samples)), na.rm = TRUE), # Get mean genome counts across red samples prev = sum(c_across(all_of(red_samples)) &gt; 0, na.rm = TRUE) / sum(!is.na(c_across(all_of(red_samples)))), # Proportion of non-zero values subset = ifelse(genome %in% pred_mags.red, &#39;pred&#39;, &#39;nonpred&#39;)) %&gt;% dplyr::select(genome, subset, mean, prev) %&gt;% left_join(genome_metadata, by=join_by(genome==genome)) %&gt;% arrange(subset,-mean) pred.ab.red %&gt;% ggplot(., aes(x=mean, y=genome, color=subset)) + geom_point(size=3) + theme_bw()+ theme(axis.text.y = element_blank()) pred.ab.red %&gt;% ggplot(., aes(x=prev, y=genome, color=subset)) + geom_point(size=3) + theme_bw()+ theme(axis.text.y = element_blank()) pred_mags.grey&lt;- var_pred_table.grey%&gt;% filter(var_pred&gt;=0.005) %&gt;% pull(mag) grey_samples &lt;- sample_metadata %&gt;% filter(species==&quot;Sciurus carolinensis&quot;) %&gt;% dplyr::select(sample) %&gt;% pull()# pred.ab.grey &lt;- genome_counts %&gt;% #mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation filter(genome %in% m.red$spNames) %&gt;% rowwise() %&gt;% #compute for each row (genome) mutate( mean = mean(c_across(all_of(grey_samples)), na.rm = TRUE), # Get mean genome counts across red samples prev = sum(c_across(all_of(grey_samples)) &gt; 0, na.rm = TRUE) / sum(!is.na(c_across(all_of(grey_samples)))), # Proportion of non-zero values subset = ifelse(genome %in% pred_mags.red, &#39;pred&#39;, &#39;nonpred&#39;)) %&gt;% dplyr::select(genome, subset, mean, prev) %&gt;% left_join(genome_metadata, by=join_by(genome==genome)) %&gt;% arrange(subset,-mean) pred.ab.grey %&gt;% ggplot(., aes(x=mean, y=genome, color=subset)) + geom_point(size=3) + theme_bw()+ theme(axis.text.y = element_blank()) pred.ab.grey %&gt;% ggplot(., aes(x=prev, y=genome, color=subset)) + geom_point(size=3) + theme_bw()+ theme(axis.text.y = element_blank()) 10.4 Posterior estimates 10.4.1 Red squirrel # Posterior estimates post_estimates_red &lt;- getPostEstimate(hM=m.red, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m.red$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trend = case_when( value &gt;= support_threshold ~ &quot;Positive&quot;, value &lt;= negsupport_threshold ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) post_table_red &lt;- post_estimates_red %&gt;% mutate(genome=factor(genome, levels=rev(hmsc_tree$tip.label))) %&gt;% select(-trend) %&gt;% mutate(value = case_when( value &gt;= support_threshold ~ &quot;Positive&quot;, value &lt;= negsupport_threshold ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% mutate(value=factor(value, levels=c(&quot;Positive&quot;,&quot;Neutral&quot;,&quot;Negative&quot;))) %&gt;% pivot_wider(names_from = variable, values_from = value) %&gt;% rename(intercept=2, index500=3, autumn=4, winter=5, logseqdepth=6) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(-intercept) # Basal ggtree postestimates_tree &lt;- hmsc_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips postestimates_tree &lt;- gheatmap(postestimates_tree, phylums, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=custom_colors)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap postestimates_tree &lt;- postestimates_tree + new_scale_fill() # Add posterior significant heatmap postestimates_tree &lt;- gheatmap(postestimates_tree, post_table_red, offset=0, width=0.5, colnames=TRUE, colnames_position=&quot;top&quot;,colnames_angle=90, colnames_offset_y=1, hjust=0) + scale_fill_manual(values=c(&quot;#be3e2b&quot;,&quot;#f4f4f4&quot;,&quot;#b2b530&quot;))+ labs(fill=&quot;Trend&quot;) postestimates_tree + vexpand(.30, 1) # expand top 10.4.2 Grey squirrel # Posterior estimates post_estimates_grey &lt;- getPostEstimate(hM=m.grey, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m.grey$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trend = case_when( value &gt;= support_threshold ~ &quot;Positive&quot;, value &lt;= negsupport_threshold ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) post_table_grey &lt;- post_estimates_grey %&gt;% mutate(genome=factor(genome, levels=rev(hmsc_tree$tip.label))) %&gt;% select(-trend) %&gt;% mutate(value = case_when( value &gt;= support_threshold ~ &quot;Positive&quot;, value &lt;= negsupport_threshold ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% mutate(value=factor(value, levels=c(&quot;Positive&quot;,&quot;Neutral&quot;,&quot;Negative&quot;))) %&gt;% pivot_wider(names_from = variable, values_from = value) %&gt;% rename(intercept=2, index500=3, autumn=4, winter=5, logseqdepth=6) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(-intercept) # Basal ggtree postestimates_tree &lt;- hmsc_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips postestimates_tree &lt;- gheatmap(postestimates_tree, phylums, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=custom_colors)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap postestimates_tree &lt;- postestimates_tree + new_scale_fill() # Add posterior significant heatmap postestimates_tree &lt;- gheatmap(postestimates_tree, post_table_grey, offset=0, width=0.5, colnames=TRUE, colnames_position=&quot;top&quot;,colnames_angle=90, colnames_offset_y=1, hjust=0) + scale_fill_manual(values=c(&quot;#be3e2b&quot;,&quot;#f4f4f4&quot;,&quot;#b2b530&quot;))+ labs(fill=&quot;Trend&quot;) postestimates_tree + vexpand(.30, 1) # expand top 10.5 Correlations among bacteria 10.5.1 Red squirrel #Compute the residual correlation matrix OmegaCor = computeAssociations(m.red) #Co-occurrence matrix at the animal level supportLevel = 0.95 toPlot = ((OmegaCor[[1]]$support&gt;supportLevel) + (OmegaCor[[1]]$support&lt;(1-supportLevel))&gt;0)*OmegaCor[[1]]$mean matrix &lt;- toPlot %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome1&quot;) %&gt;% pivot_longer(!genome1, names_to = &quot;genome2&quot;, values_to = &quot;cor&quot;) %&gt;% mutate(genome1= factor(genome1, levels=rev(hmsc_tree$tip.label))) %&gt;% mutate(genome2= factor(genome2, levels=hmsc_tree$tip.label)) %&gt;% ggplot(aes(x = genome1, y = genome2, fill = cor)) + geom_tile() + scale_fill_gradient2(low = &quot;#be3e2b&quot;, mid = &quot;#f4f4f4&quot;, high = &quot;#b2b530&quot;)+ theme_void() + theme(legend.position = &quot;none&quot;) corr.legend &lt;- get_legend(matrix, position=&quot;right&quot;) corr.legend &lt;- as_ggplot(corr.legend) vtree &lt;- hmsc_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., expand=1.5) + hexpand(0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips vtree &lt;- gheatmap(vtree, phylums, offset=-0.1, width=0.6, colnames=FALSE) + scale_fill_manual(values=custom_colors) + theme(legend.position = &#39;none&#39;) + scale_y_reverse() vtreeD &lt;- hmsc_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., expand=1.5, layout=&quot;dendrogram&quot;) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips vtreeD &lt;- gheatmap(vtreeD, phylums, offset=-0.1, width=0.6, colnames=FALSE) + scale_fill_manual(values=custom_colors) + theme(legend.position = &#39;none&#39;) # properly align trees to corr matrix with package aplot matrix %&gt;% insert_left(vtree, width=.25) %&gt;% insert_top(vtreeD, height=.3) %&gt;% insert_right(corr.legend, width=0.15) 10.5.2 Grey squirrel #Compute the residual correlation matrix OmegaCor = computeAssociations(m.grey) #Co-occurrence matrix at the animal level supportLevel = 0.95 toPlot = ((OmegaCor[[1]]$support&gt;supportLevel) + (OmegaCor[[1]]$support&lt;(1-supportLevel))&gt;0)*OmegaCor[[1]]$mean matrix &lt;- toPlot %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome1&quot;) %&gt;% pivot_longer(!genome1, names_to = &quot;genome2&quot;, values_to = &quot;cor&quot;) %&gt;% mutate(genome1= factor(genome1, levels=rev(hmsc_tree$tip.label))) %&gt;% mutate(genome2= factor(genome2, levels=hmsc_tree$tip.label)) %&gt;% ggplot(aes(x = genome1, y = genome2, fill = cor)) + geom_tile() + scale_fill_gradient2(low = &quot;#be3e2b&quot;, mid = &quot;#f4f4f4&quot;, high = &quot;#b2b530&quot;)+ theme_void() + theme(legend.position = &quot;none&quot;) corr.legend &lt;- get_legend(matrix, position=&quot;right&quot;) corr.legend &lt;- as_ggplot(corr.legend) vtree &lt;- hmsc_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., expand=1.5) + hexpand(0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips vtree &lt;- gheatmap(vtree, phylums, offset=-0.1, width=0.6, colnames=FALSE) + scale_fill_manual(values=custom_colors) + theme(legend.position = &#39;none&#39;) + scale_y_reverse() vtreeD &lt;- hmsc_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., expand=1.5, layout=&quot;dendrogram&quot;) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips vtreeD &lt;- gheatmap(vtreeD, phylums, offset=-0.1, width=0.6, colnames=FALSE) + scale_fill_manual(values=custom_colors) + theme(legend.position = &#39;none&#39;) # properly align trees to corr matrix with package aplot matrix %&gt;% insert_left(vtree, width=.25) %&gt;% insert_top(vtreeD, height=.3) %&gt;% insert_right(corr.legend, width=0.15) 10.6 Microbiome composition predictions 10.6.1 Predictions by urbanization 10.6.1.1 Red squirrel gradient = seq(0,1, by=0.1) gradientlength = length(gradient) pred_urban_red &lt;- constructGradient(m.red, focalVariable = &quot;index500&quot;, non.focalVariables = list(logseqdepth=list(1),species=list(1), season=list(1)), ngrid=gradientlength) %&gt;% predict(m.red, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(index500=rep(gradient,1000)) %&gt;% pivot_longer(-c(index500), names_to = &quot;genome&quot;, values_to = &quot;value&quot;) post_estimates_red %&gt;% filter(variable==&quot;index500&quot;, genome %in% pred_mags.red) %&gt;% #keep only predictive mags select(genome,trend) %&gt;% left_join(pred_urban_red, by=join_by(genome==genome)) %&gt;% group_by(genome, trend, index500) %&gt;% summarize(value = mean(value, na.rm = TRUE)) %&gt;% left_join(genome_metadata, by=join_by(genome == genome)) %&gt;% ggplot(aes(x=index500, y=value, group=genome, color=phylum, linetype=trend)) + geom_line() + scale_linetype_manual(values=c(&quot;solid&quot;,&quot;dashed&quot;,&quot;solid&quot;)) + scale_color_manual(values=custom_colors) + facet_grid(fct_rev(trend) ~ phylum) + labs(y=&quot;Genome abundance (log)&quot;,x=&quot;Urbanization index&quot;) + theme(legend.position = &quot;none&quot;) + theme_minimal() + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(angle = 45, hjust = 0.8,), axis.line.x = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), strip.text.x = element_text(angle = 90, hjust = 0,), strip.text.y = element_text(face=&quot;bold&quot;), ) 10.6.1.2 Grey squirrel gradient = seq(0,1, by=0.1) gradientlength = length(gradient) pred_urban_grey &lt;- constructGradient(m.grey, focalVariable = &quot;index500&quot;, non.focalVariables = list(logseqdepth=list(1),species=list(1), season=list(1)), ngrid=gradientlength) %&gt;% predict(m.grey, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(index500=rep(gradient,1000)) %&gt;% pivot_longer(-c(index500), names_to = &quot;genome&quot;, values_to = &quot;value&quot;) post_estimates_grey %&gt;% filter(variable==&quot;index500&quot;, genome %in% pred_mags.grey) %&gt;% #keep only mags predictive mags select(genome,trend) %&gt;% left_join(pred_urban_grey, by=join_by(genome==genome)) %&gt;% group_by(genome, trend, index500) %&gt;% summarize(value = mean(value, na.rm = TRUE)) %&gt;% left_join(genome_metadata, by=join_by(genome == genome)) %&gt;% ggplot(aes(x=index500, y=value, group=genome, color=phylum, linetype=trend)) + geom_line() + scale_linetype_manual(values=c(&quot;solid&quot;,&quot;dashed&quot;,&quot;solid&quot;)) + scale_color_manual(values=custom_colors) + facet_grid(fct_rev(trend) ~ phylum) + labs(y=&quot;Genome abundance (log)&quot;,x=&quot;Urbanization index&quot;) + theme(legend.position = &quot;none&quot;) + theme_minimal() + theme(legend.position = &quot;none&quot;, axis.text.x = element_text(angle = 45, hjust = 0.8,), axis.line.x = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), strip.text.x = element_text(angle = 90, hjust = 0,), strip.text.y = element_text(face=&quot;bold&quot;), ) 10.6.2 Predictions by season 10.6.2.1 Red squirrel aut_enrichment_red &lt;- post_estimates_red %&gt;% filter(variable==&quot;seasonautumn&quot;) %&gt;% select(genome, trend) win_enrichment_red &lt;- post_estimates_red %&gt;% filter(variable==&quot;seasonwinter&quot;) %&gt;% select(genome, trend) # m$covNames gradient = c(&quot;spring-summer&quot;,&quot;autumn&quot;, &quot;winter&quot;) gradientlength = length(gradient) pred_season_red &lt;- constructGradient(m.red, focalVariable = &quot;season&quot;, non.focalVariables = 1, ngrid=gradientlength) %&gt;% predict(m.red, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(season=rep(gradient,1000)) %&gt;% pivot_longer(!season,names_to = &quot;genome&quot;, values_to = &quot;value&quot;) genome_metadata_clean &lt;- genome_metadata %&gt;% mutate(family = coalesce(family, paste(&#39;Unclassified&#39;, order)), genus = coalesce(genus, if_else(grepl(&#39;^Unclassified&#39;, family), family, paste(&#39;Unclassified&#39;, family)))) pred_season_red %&gt;% filter(genome %in% pred_mags.red) %&gt;% #keep only predictive mags left_join(aut_enrichment_red,by=&quot;genome&quot;) %&gt;% filter(trend != &quot;Neutral&quot;) %&gt;% pivot_wider(names_from = season, values_from = value) %&gt;% unnest(c(`autumn`, `spring-summer`)) %&gt;% mutate(diff_sa = `spring-summer` - `autumn`) %&gt;% select(genome, diff_sa) %&gt;% left_join(genome_metadata_clean, by=&quot;genome&quot;) %&gt;% mutate(genome= factor(genome, levels=genome_tree$tip.label)) %&gt;% ggplot(., aes(y=forcats::fct_reorder(genus,diff_sa), x=diff_sa, fill=phylum, color=phylum)) + geom_boxplot(outlier.shape = NA) + scale_color_manual(values=custom_colors)+ scale_fill_manual(values=alpha(custom_colors,0.4))+ geom_vline(xintercept = 0)+ annotate(&#39;text&#39;, x=-3, y=16, label = &quot;Enriched in\\nautumn&quot;, color=&#39;black&#39;) + annotate(&#39;text&#39;, x=3, y=16, label = &quot;Enriched in\\nspring-summer&quot;, color=&#39;black&#39;) + theme_classic()+ labs(x = &quot;Difference in log-abundance&quot;, y = &quot;Genera&quot;) + xlim(-5,5) pred_season_red %&gt;% filter(genome %in% pred_mags.red) %&gt;% #keep only predictive mags left_join(win_enrichment_red,by=&quot;genome&quot;) %&gt;% filter(trend != &quot;Neutral&quot;) %&gt;% pivot_wider(names_from = season, values_from = value) %&gt;% unnest(c(`winter`, `spring-summer`)) %&gt;% mutate(diff_sw = `spring-summer` - `winter`) %&gt;% select(genome, diff_sw) %&gt;% left_join(genome_metadata_clean, by=&quot;genome&quot;) %&gt;% mutate(genome= factor(genome, levels=genome_tree$tip.label)) %&gt;% ggplot(., aes(y=forcats::fct_reorder(genus,diff_sw), x=diff_sw, fill=phylum, color=phylum)) + geom_boxplot(outlier.shape = NA) + scale_color_manual(values=custom_colors)+ scale_fill_manual(values=alpha(custom_colors,0.4))+ annotate(&#39;text&#39;, x=-10, y=16, label = &quot;Enriched in\\nwinter&quot;, color=&#39;black&#39;) + annotate(&#39;text&#39;, x=10, y=16, label = &quot;Enriched in\\nspring-summer&quot;, color=&#39;black&#39;) + geom_vline(xintercept = 0)+ theme_classic()+ labs(x = &quot;Difference in log-abundance&quot;, y = &quot;Genera&quot;) + xlim(-18,18) 10.6.2.2 Grey squirrel aut_enrichment_grey &lt;- post_estimates_grey %&gt;% filter(variable==&quot;seasonautumn&quot;) %&gt;% select(genome, trend) win_enrichment_grey &lt;- post_estimates_grey %&gt;% filter(variable==&quot;seasonwinter&quot;) %&gt;% select(genome, trend) # m$covNames pred_season_grey &lt;- constructGradient(m.grey, focalVariable = &quot;season&quot;, non.focalVariables = 1, ngrid=gradientlength) %&gt;% predict(m.grey, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(season=rep(gradient,1000)) %&gt;% pivot_longer(!season,names_to = &quot;genome&quot;, values_to = &quot;value&quot;) pred_season_grey %&gt;% filter(genome %in% pred_mags.grey) %&gt;% #keep only predictive mags left_join(aut_enrichment_grey,by=&quot;genome&quot;) %&gt;% filter(trend != &quot;Neutral&quot;) %&gt;% pivot_wider(names_from = season, values_from = value) %&gt;% unnest(c(`autumn`, `spring-summer`)) %&gt;% mutate(diff_sa = `spring-summer` - `autumn`) %&gt;% select(genome, diff_sa) %&gt;% left_join(genome_metadata_clean, by=&quot;genome&quot;) %&gt;% mutate(genome= factor(genome, levels=genome_tree$tip.label)) %&gt;% ggplot(., aes(y=forcats::fct_reorder(genus,diff_sa), x=diff_sa, fill=phylum, color=phylum)) + geom_boxplot(outlier.shape = NA) + scale_color_manual(values=custom_colors)+ scale_fill_manual(values=alpha(custom_colors,0.4))+ geom_vline(xintercept = 0)+ annotate(&#39;text&#39;, x=-2.5, y=14, label = &quot;Enriched in\\nautumn&quot;, color=&#39;black&#39;) + annotate(&#39;text&#39;, x=2.5, y=14, label = &quot;Enriched in\\nspring-summer&quot;, color=&#39;black&#39;) + theme_classic()+ labs(x = &quot;Difference in log-abundance&quot;, y = &quot;Genera&quot;) + xlim(-5,5) pred_season_grey %&gt;% filter(genome %in% pred_mags.grey) %&gt;% #keep only predictive mags left_join(aut_enrichment_grey,by=&quot;genome&quot;) %&gt;% filter(trend != &quot;Neutral&quot;) %&gt;% pivot_wider(names_from = season, values_from = value) %&gt;% unnest(c(`winter`, `spring-summer`)) %&gt;% mutate(diff_sw = `spring-summer` - `winter`) %&gt;% select(genome, diff_sw) %&gt;% left_join(genome_metadata_clean, by=&quot;genome&quot;) %&gt;% mutate(genome= factor(genome, levels=genome_tree$tip.label)) %&gt;% ggplot(., aes(y=forcats::fct_reorder(genus,diff_sw), x=diff_sw, fill=phylum, color=phylum)) + geom_boxplot(outlier.shape = NA) + scale_color_manual(values=custom_colors) + scale_fill_manual(values=alpha(custom_colors,0.4)) + geom_vline(xintercept = 0) + annotate(&#39;text&#39;, x=-5, y=14, label = &quot;Enriched in\\nwinter&quot;, color=&#39;black&#39;) + annotate(&#39;text&#39;, x=5, y=14, label = &quot;Enriched in\\nspring-summer&quot;, color=&#39;black&#39;) + theme_classic()+ labs(x = &quot;Difference in log-abundance&quot;, y = &quot;Genera&quot;) + xlim(-10,10) 10.7 Microbiome functional predictions tss &lt;- function(abund){sweep(abund, 2, colSums(abund), FUN=&quot;/&quot;)} genome_counts &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) #Get list of present MAGs present_MAGs &lt;- genome_counts %&gt;% filter(rowSums(.[, -1]) != 0) %&gt;% rownames() #Align distillr annotations with present MAGs and remove all-zero and all-one traits present_MAGs &lt;- present_MAGs[present_MAGs %in% rownames(genome_gifts)] genome_gifts_filt &lt;- genome_gifts[present_MAGs,] %&gt;% select_if(~!all(. == 0)) %&gt;% #remove all-zero modules select_if(~!all(. == 1)) #remove all-one modules GIFTs_elements &lt;- to.elements(genome_gifts_filt, GIFT_db) #Aggregate element-level GIFTs into the function level GIFTs_functions &lt;- to.functions(GIFTs_elements,GIFT_db) #Aggregate function-level GIFTs into overall Biosynthesis, Degradation and Structural GIFTs and get overall metabolic capacity indices per MAG (at the domain level) GIFTs_domains &lt;- to.domains(GIFTs_functions,GIFT_db) %&gt;% as.data.frame() %&gt;% mutate(Overall=rowMeans(select(.,Biosynthesis,Structure,Degradation), na.rm=TRUE)) 10.7.1 Function-level predictions by urbanisation 10.7.1.1 Red squirrel community_func_urb_red &lt;- pred_urban_red %&gt;% filter(genome %in% pred_mags.red) %&gt;% #keep only predictive mags group_by(index500, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;index500&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(GIFTs_functions,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;index500&quot;) }) calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } function_pred_urb_red &lt;- map_dfc(community_func_urb_red, function(mat) { mat %&gt;% column_to_rownames(var = &quot;index500&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_func_urb_red[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Positively associated with urbanisation function_pred_urb_red %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% paged_table() #Negatively associated with urbanisation function_pred_urb_red %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% paged_table() #Positively associated positive_red &lt;- function_pred_urb_red%&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) #Negatively associated negative_red &lt;- function_pred_urb_red %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) all_functions_red &lt;- #bind_rows(positive_red,negative_red) %&gt;% function_pred_urb_red %&gt;% left_join(GIFT_db,by=join_by(trait==Code_function)) %&gt;% mutate(trait=factor(trait)) %&gt;% mutate(function_legend=str_c(trait,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,function_legend) %&gt;% unique() gift_colors &lt;- read_tsv(&quot;data/gift_colors.tsv&quot;) all_functions_red %&gt;% ggplot(aes(x=mean, y=fct_reorder(function_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + #xlim(c(-0.050,0.050)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) + #guides(col = guide_legend(ncol = 1)) theme(legend.position = &quot;none&quot;) community_func_urb_red %&gt;% bind_rows() %&gt;% pivot_longer(-index500, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% filter(trait %in% c(positive_red$trait, negative_red$trait)) %&gt;% mutate(trait=factor(trait, levels=c(positive_red$trait, negative_red$trait))) %&gt;% mutate(index500=as.numeric(index500)) %&gt;% ggplot(aes(x=index500, y=value)) + geom_smooth(method = lm, formula = y ~ x, se = TRUE) + #geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE) + facet_wrap(~trait, ncol=5, scales=&quot;free&quot;) + theme_minimal() + labs(x=&quot;Urbanization&quot;,y=&quot;Metabolic Capacity Index&quot;) 10.7.1.2 Grey squirrel community_func_urb_grey &lt;- pred_urban_grey %&gt;% filter(genome %in% pred_mags.grey) %&gt;% #keep only predictive mags group_by(index500, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;index500&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(GIFTs_functions,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;index500&quot;) }) calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } function_pred_urb_grey &lt;- map_dfc(community_func_urb_grey, function(mat) { mat %&gt;% column_to_rownames(var = &quot;index500&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_func_urb_grey[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Positively associated with urbanisation function_pred_urb_grey %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% paged_table() #Negatively associated with urbanisation function_pred_urb_grey %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% paged_table() #Positively associated positive_grey &lt;- function_pred_urb_grey %&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) #Negatively associated negative_grey &lt;- function_pred_urb_grey %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) all_functions_grey &lt;- #bind_rows(positive_grey,negative_grey) %&gt;% function_pred_urb_grey %&gt;% left_join(GIFT_db,by=join_by(trait==Code_function)) %&gt;% mutate(trait=factor(trait)) %&gt;% mutate(function_legend=str_c(trait,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,function_legend) %&gt;% unique() all_functions_grey %&gt;% ggplot(aes(x=mean, y=fct_reorder(function_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + #xlim(c(-0.050,0.050)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) + #guides(col = guide_legend(ncol = 1)) theme(legend.position = &quot;none&quot;) community_func_urb_grey %&gt;% bind_rows() %&gt;% pivot_longer(-index500, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% filter(trait %in% c(positive_grey$trait, negative_grey$trait)) %&gt;% mutate(trait=factor(trait, levels=c(positive_grey$trait, negative_grey$trait))) %&gt;% mutate(index500=as.numeric(index500)) %&gt;% ggplot(aes(x=index500, y=value)) + geom_smooth(method = lm, formula = y ~ x, se = TRUE) + #geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE) + facet_wrap(~trait, ncol=5, scales=&quot;free&quot;) + theme_minimal() + labs(x=&quot;Urbanization&quot;,y=&quot;Metabolic Capacity Index&quot;) 10.7.2 Function-level predictions by season 10.7.2.1 Red squirrel community_func_seas_red &lt;- pred_season_red %&gt;% filter(genome %in% pred_mags.red) %&gt;% #keep only predictive mags group_by(season, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;season&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(GIFTs_functions,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;season&quot;) }) function_pred_seas_red &lt;- map_dfr(community_func_seas_red, function(df) { spring_values &lt;- df %&gt;% filter(season == &quot;spring-summer&quot;) %&gt;% select(-season) winter_values &lt;- df %&gt;% filter(season == &quot;winter&quot;) %&gt;% select(-season) spring_values - winter_values }) %&gt;% mutate(iteration=c(1:1000)) %&gt;% pivot_longer(!iteration,names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Spring-summer associated function_pred_seas_red %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% paged_table() # Winter associated function_pred_seas_red %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% paged_table() #Spring-summer associated positive_red &lt;- function_pred_seas_red%&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) #Winter associated negative_red &lt;- function_pred_seas_red %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) all_functions_red &lt;- function_pred_seas_red %&gt;% left_join(GIFT_db,by=join_by(trait==Code_function)) %&gt;% mutate(trait=factor(trait)) %&gt;% mutate(function_legend=str_c(trait,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,function_legend) %&gt;% unique() all_functions_red %&gt;% ggplot(aes(x=mean, y=fct_reorder(function_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + #xlim(c(-0.050,0.050)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Difference in log-abundance&quot;,y=&quot;Functional trait&quot;) + annotate(&#39;text&#39;, x=-0.75, y=12, label = &quot;Enriched in\\nwinter&quot;, color=&#39;black&#39;) + annotate(&#39;text&#39;, x=0.75, y=12, label = &quot;Enriched in\\nspring-summer&quot;, color=&#39;black&#39;) + #guides(col = guide_legend(ncol = 1)) theme(legend.position = &quot;none&quot;) 10.7.2.2 Grey squirrel community_func_seas_grey &lt;- pred_season_grey %&gt;% filter(genome %in% pred_mags.grey) %&gt;% #keep only predictive mags group_by(season, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;season&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(GIFTs_functions,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;season&quot;) }) function_pred_seas_grey &lt;- map_dfr(community_func_seas_grey, function(df) { spring_values &lt;- df %&gt;% filter(season == &quot;spring-summer&quot;) %&gt;% select(-season) winter_values &lt;- df %&gt;% filter(season == &quot;winter&quot;) %&gt;% select(-season) spring_values - winter_values }) %&gt;% mutate(iteration=c(1:1000)) %&gt;% pivot_longer(!iteration,names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Spring-summer associated function_pred_seas_grey %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% paged_table() # Winter associated function_pred_seas_grey %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% paged_table() #Spring-summer associated positive_grey &lt;- function_pred_seas_grey%&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) #Winter associated negative_grey &lt;- function_pred_seas_grey %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) all_functions_grey &lt;- function_pred_seas_grey %&gt;% left_join(GIFT_db,by=join_by(trait==Code_function)) %&gt;% mutate(trait=factor(trait)) %&gt;% mutate(function_legend=str_c(trait,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,function_legend) %&gt;% unique() all_functions_grey %&gt;% ggplot(aes(x=mean, y=fct_reorder(function_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + #xlim(c(-0.050,0.050)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Difference in log-abundance&quot;,y=&quot;Functional trait&quot;) + annotate(&#39;text&#39;, x=-1, y=12, label = &quot;Enriched in\\nwinter&quot;, color=&#39;black&#39;) + annotate(&#39;text&#39;, x=1, y=12, label = &quot;Enriched in\\nspring-summer&quot;, color=&#39;black&#39;) + #guides(col = guide_legend(ncol = 1)) theme(legend.position = &quot;none&quot;) 10.7.3 Element-level predictions by urbanisation 10.7.3.1 Red squirrel community_elem_urb_red &lt;- pred_urban_red %&gt;% filter(genome %in% pred_mags.red) %&gt;% #keep only predictive mags group_by(index500, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;index500&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(GIFTs_elements,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;index500&quot;) }) calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } element_pred_urb_red &lt;- map_dfc(community_elem_urb_red, function(mat) { mat %&gt;% column_to_rownames(var = &quot;index500&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_elem_urb_red[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Positively associated with urbanisation element_pred_urb_red %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% paged_table() #Negatively associated with urbanisation element_pred_urb_red %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% paged_table() #Positively associated positive_red &lt;- element_pred_urb_red%&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) #Negatively associated negative_red &lt;- element_pred_urb_red %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) all_elements_red &lt;- bind_rows(positive_red,negative_red) %&gt;% left_join(GIFT_db,by=join_by(trait==Code_element)) %&gt;% mutate(trait=factor(trait,levels=c(rev(positive_red$trait),rev(negative_red$trait)))) %&gt;% mutate(Code_function=factor(Code_function)) %&gt;% mutate(element_legend=str_c(trait,&quot; - &quot;,Element)) %&gt;% mutate(function_legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,element_legend,function_legend) %&gt;% unique() all_elements_red %&gt;% ggplot(aes(x=mean, y=fct_reorder(element_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + #xlim(c(-0.050,0.050)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) + #guides(col = guide_legend(ncol = 1)) theme(legend.position = &quot;right&quot;) community_elem_urb_red %&gt;% bind_rows() %&gt;% pivot_longer(-index500, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% filter(trait %in% c(positive_red$trait, negative_red$trait)) %&gt;% mutate(trait=factor(trait, levels=c(positive_red$trait, negative_red$trait))) %&gt;% mutate(index500=as.numeric(index500)) %&gt;% ggplot(aes(x=index500, y=value)) + geom_smooth(method = lm, formula = y ~ x, se = TRUE) + #geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE) + facet_wrap(~trait, ncol=5, scales=&quot;free&quot;) + theme_minimal() + labs(x=&quot;Urbanization&quot;,y=&quot;Metabolic Capacity Index&quot;) 10.7.3.2 Grey squirrel community_elem_urb_grey &lt;- pred_urban_grey %&gt;% filter(genome %in% pred_mags.grey) %&gt;% #keep only predictive mags group_by(index500, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;index500&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(GIFTs_elements,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;index500&quot;) }) calculate_slope &lt;- function(x) { lm_fit &lt;- lm(unlist(x) ~ seq_along(unlist(x))) coef(lm_fit)[2] } element_pred_urb_grey &lt;- map_dfc(community_elem_urb_grey, function(mat) { mat %&gt;% column_to_rownames(var = &quot;index500&quot;) %&gt;% t() %&gt;% as.data.frame() %&gt;% rowwise() %&gt;% mutate(slope = calculate_slope(c_across(everything()))) %&gt;% select(slope) }) %&gt;% t() %&gt;% as.data.frame() %&gt;% set_names(colnames(community_elem_urb_grey[[1]])[-1]) %&gt;% rownames_to_column(var=&quot;iteration&quot;) %&gt;% pivot_longer(!iteration, names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Positively associated with urbanisation element_pred_urb_grey %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% paged_table() #Negatively associated with urbanisation element_pred_urb_grey %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% paged_table() #Positively associated positive_grey &lt;- element_pred_urb_grey %&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) #Negatively associated negative_grey &lt;- element_pred_urb_grey %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) all_elements_grey &lt;- bind_rows(positive_grey,negative_grey) %&gt;% left_join(GIFT_db,by=join_by(trait==Code_element)) %&gt;% mutate(trait=factor(trait,levels=c(rev(positive_grey$trait),rev(negative_grey$trait)))) %&gt;% mutate(Code_function=factor(Code_function)) %&gt;% mutate(element_legend=str_c(trait,&quot; - &quot;,Element)) %&gt;% mutate(function_legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,element_legend,function_legend) %&gt;% unique() all_elements_grey %&gt;% ggplot(aes(x=mean, y=fct_reorder(element_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + #xlim(c(-0.050,0.050)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Regression coefficient&quot;,y=&quot;Functional trait&quot;) + #guides(col = guide_legend(ncol = 1)) theme(legend.position = &quot;right&quot;) community_elem_urb_grey %&gt;% bind_rows() %&gt;% pivot_longer(-index500, names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% filter(trait %in% c(positive_grey$trait, negative_grey$trait)) %&gt;% mutate(trait=factor(trait, levels=c(positive_grey$trait, negative_grey$trait))) %&gt;% mutate(index500=as.numeric(index500)) %&gt;% ggplot(aes(x=index500, y=value)) + geom_smooth(method = lm, formula = y ~ x, se = TRUE) + #geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = TRUE) + facet_wrap(~trait, ncol=5, scales=&quot;free&quot;) + theme_minimal() + labs(x=&quot;Urbanization&quot;,y=&quot;Metabolic Capacity Index&quot;) 10.7.4 Element-level predictions by season 10.7.4.1 Red squirrel community_elem_seas_red &lt;- pred_season_red %&gt;% filter(genome %in% pred_mags.red) %&gt;% #keep only predictive mags group_by(season, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;season&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(GIFTs_elements,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;season&quot;) }) element_pred_seas_red &lt;- map_dfr(community_elem_seas_red, function(df) { spring_values &lt;- df %&gt;% filter(season == &quot;spring-summer&quot;) %&gt;% select(-season) winter_values &lt;- df %&gt;% filter(season == &quot;winter&quot;) %&gt;% select(-season) spring_values - winter_values }) %&gt;% mutate(iteration=c(1:1000)) %&gt;% pivot_longer(!iteration,names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Spring-summer associated element_pred_seas_red %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% paged_table() # Winter associated element_pred_seas_red %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% paged_table() # Spring-summer associated positive_red &lt;- element_pred_seas_red%&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) # Winter associated negative_red &lt;- element_pred_seas_red %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) all_elements_red &lt;- bind_rows(positive_red,negative_red) %&gt;% left_join(GIFT_db,by=join_by(trait==Code_element)) %&gt;% mutate(trait=factor(trait,levels=c(rev(positive_red$trait),rev(negative_red$trait)))) %&gt;% mutate(Code_function=factor(Code_function)) %&gt;% mutate(element_legend=str_c(trait,&quot; - &quot;,Element)) %&gt;% mutate(function_legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,element_legend,function_legend) %&gt;% unique() all_elements_red %&gt;% ggplot(aes(x=mean, y=fct_reorder(element_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + #xlim(c(-0.050,0.050)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Difference in log-abundance&quot;,y=&quot;Functional trait&quot;) + annotate(&#39;text&#39;, x=-2, y=20, label = &quot;Enriched in\\nwinter&quot;, color=&#39;black&#39;) + annotate(&#39;text&#39;, x=2, y=20, label = &quot;Enriched in\\nspring-summer&quot;, color=&#39;black&#39;) + #guides(col = guide_legend(ncol = 1)) theme(legend.position = &quot;none&quot;) 10.7.4.2 Grey squirrel community_elem_seas_grey &lt;- pred_season_grey %&gt;% filter(genome %in% pred_mags.grey) %&gt;% #keep only predictive mags group_by(season, genome) %&gt;% mutate(row_id = row_number()) %&gt;% pivot_wider(names_from = genome, values_from = value) %&gt;% ungroup() %&gt;% group_split(row_id) %&gt;% as.list() %&gt;% lapply(., FUN = function(x){x %&gt;% select(-row_id) %&gt;% column_to_rownames(var = &quot;season&quot;) %&gt;% as.data.frame() %&gt;% exp() %&gt;% t() %&gt;% tss() %&gt;% to.community(GIFTs_elements,.,GIFT_db) %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;season&quot;) }) element_pred_seas_grey &lt;- map_dfr(community_elem_seas_grey, function(df) { spring_values &lt;- df %&gt;% filter(season == &quot;spring-summer&quot;) %&gt;% select(-season) winter_values &lt;- df %&gt;% filter(season == &quot;winter&quot;) %&gt;% select(-season) spring_values - winter_values }) %&gt;% mutate(iteration=c(1:1000)) %&gt;% pivot_longer(!iteration,names_to=&quot;trait&quot;,values_to=&quot;value&quot;) %&gt;% group_by(trait) %&gt;% summarise(mean=mean(value), p1 = quantile(value, probs = 0.1), p9 = quantile(value, probs = 0.9), positive_support = sum(value &gt; 0)/1000, negative_support = sum(value &lt; 0)/1000) %&gt;% arrange(-positive_support) # Spring-summer associated element_pred_seas_grey %&gt;% filter(mean &gt;0) %&gt;% arrange(-positive_support) %&gt;% filter(positive_support&gt;=0.9) %&gt;% paged_table() # Winter associated element_pred_seas_grey %&gt;% filter(mean &lt;0) %&gt;% arrange(-negative_support) %&gt;% filter(negative_support&gt;=0.9) %&gt;% paged_table() #Spring-summer associated positive_grey &lt;- element_pred_seas_grey%&gt;% filter(mean &gt;0) %&gt;% arrange(mean) %&gt;% filter(positive_support&gt;=0.9) %&gt;% select(-negative_support) %&gt;% rename(support=positive_support) #Winter associated negative_grey &lt;- element_pred_seas_grey %&gt;% filter(mean &lt;0) %&gt;% arrange(mean) %&gt;% filter(negative_support&gt;=0.9) %&gt;% select(-positive_support) %&gt;% rename(support=negative_support) all_elements_grey &lt;- bind_rows(positive_grey,negative_grey) %&gt;% left_join(GIFT_db,by=join_by(trait==Code_element)) %&gt;% mutate(trait=factor(trait,levels=c(rev(positive_grey$trait),rev(negative_grey$trait)))) %&gt;% mutate(Code_function=factor(Code_function)) %&gt;% mutate(element_legend=str_c(trait,&quot; - &quot;,Element)) %&gt;% mutate(function_legend=str_c(Code_function,&quot; - &quot;,Function)) %&gt;% select(trait,mean,p1,p9,element_legend,function_legend) %&gt;% unique() all_elements_grey %&gt;% ggplot(aes(x=mean, y=fct_reorder(element_legend, mean), xmin=p1, xmax=p9, color=function_legend)) + geom_point() + geom_errorbar() + #xlim(c(-0.050,0.050)) + geom_vline(xintercept=0) + scale_color_manual(values = gift_colors$Color) + theme_minimal() + labs(x=&quot;Difference in log-abundance&quot;,y=&quot;Functional trait&quot;) + annotate(&#39;text&#39;, x=-2, y=17, label = &quot;Enriched in\\nwinter&quot;, color=&#39;black&#39;) + annotate(&#39;text&#39;, x=2, y=17, label = &quot;Enriched in\\nspring-summer&quot;, color=&#39;black&#39;) + #guides(col = guide_legend(ncol = 1)) theme(legend.position = &quot;none&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
