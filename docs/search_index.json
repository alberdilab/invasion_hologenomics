[["index.html", "AlberdiLab | Romeo et al. 2024 Study title to be added Chapter 1 Introduction 1.1 Prepare the R environment", " AlberdiLab | Romeo et al. 2024 Study title to be added Claudia Romeo1, […], and Antton Alberdi2 Last update: 2024-07-05 Chapter 1 Introduction This webbook contains all the code used for the analysis of metagenomic data from invasive Sciurus carolinensis and native Sciurus vulgaris squirrels along urbanization gradients and across seasons. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/alberdilab/invasion_hologenomics.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) library(mapproj) library(RColorBrewer) library(reshape2) library(ggResidpanel) library(tidybayes) # For statistics library(vegan) library(Rtsne) library(hilldiv2) library(distillR) library(broom.mixed) library(gtsummary) library(car) library(Hmsc) library(corrplot) library(brms) library(parameters) library(bayestestR) library(pairwiseAdonis) University of Copenhagen, claudia.romeo@sund.ku.dk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation", " Chapter 2 Data preparation 2.0.0.1 Read counts This is the document containing the number of sequencing reads from each sample have been mapped to each MAG. Note that this is the raw data that needs to be further processed before running any statistics on them. read_counts &lt;- read.csv(&quot;data/squirrels_counts.csv&quot;, sep=&quot;;&quot;) %&gt;% rename(genome = 1) Generate a vector of genome names to be employed for filtering and sorting data in downstream steps. genomes &lt;- read_counts$genome # create list of genome names 2.0.0.2 Genome coverage Proportion of each genome covered by sequencing reads. genome_coverage &lt;- read.csv(&quot;data/squirrels_coverage.csv&quot;, sep=&quot;;&quot;) %&gt;% rename(genome = 1) 2.0.0.3 Sample metadata sample_metadata &lt;- read.csv(&quot;data/squirrels_metadata.csv&quot;,sep=&quot;;&quot;,header=T) sample_metadata &lt;- sample_metadata %&gt;% filter(!is.na(sampleID)) 2.0.0.4 Genome metadata genome_metadata &lt;- read.csv(&quot;data/squirrels_mag_info.csv&quot;,sep=&quot;;&quot;) %&gt;% rename(length=mag_size) %&gt;% arrange(match(genome, read_counts$genome)) 2.0.0.5 Coverage filtering Genomes that have less than 30% of their length covered by reads are turned into zeros to account for the random allocation of reads across genomes due to mapping heuristics. min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.0.0.6 Generate genome count table After filtering the low-coverage reads, read counts are transformed into genome counts using genome-length and read-length information. readlength=150 #change if sequencing read length is different genome_counts &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) %&gt;% select_if(~!all(. == 0)) #remove samples with no MAGs 2.0.0.7 Genome tree genome_tree &lt;- read.tree(&quot;data/squirrels.tree&quot;) 2.0.0.8 MAG functional annotations These are the raw annotation table generated by DRAM, which are used to generate GIFT data using either distillR or KEGG. genome_gifts &lt;- read.csv(&quot;data/squirrels_distillr.csv&quot;, sep=&quot;;&quot;) genome_kegg &lt;- read.csv(&quot;data/squirrels_merged_kegg.csv&quot;, sep=&quot;;&quot;) 2.0.0.9 Colour palettes ehi_phylum_colors &lt;- read.table(&quot;data/ehi_phylum_colors.tsv&quot;,sep=&quot;\\t&quot;,header=T,comment.char = &quot;&quot;) # Arrange colors alphabetically # colors_alphabetic &lt;- ehi_phylum_colors %&gt;% # right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% # arrange(match(genome, genome_tree$tip.label)) %&gt;% # select(phylum, colors) %&gt;% # unique() %&gt;% # arrange(phylum) %&gt;% # select(colors) %&gt;% # pull() ehi_phylum_colors &lt;- ehi_phylum_colors %&gt;% mutate(colors2 = if_else(phylum==&quot;p__Bacillota&quot;, &#39;#085D6B&#39;, if_else(phylum==&quot;p__Bacillota_A&quot;, &#39;#088CA2&#39;, if_else(phylum==&quot;p__Bacillota_B&quot;, &#39;#77638A&#39;, if_else(phylum==&quot;p__Bacillota_C&quot;, &#39;#B7ABC2&#39;, if_else(phylum==&quot;p__Thermoplasmatota&quot;, &#39;#f1a144&#39;, if_else(phylum==&quot;p__Verrucomicrobiota&quot;, &#39;#e36910&#39;, if_else(phylum==&quot;p__Cyanobacteriota&quot;, &#39;#94cc84&#39;, if_else(phylum==&quot;p__Elusimicrobiota&quot;, &#39;#226d1b&#39;, colors #&#39;#08a26b&#39; ))))))))) #ccffbc #5c9c4f phylum_colors &lt;- ehi_phylum_colors %&gt;% pull(colors2) names(phylum_colors) &lt;- ehi_phylum_colors$phylum squirrel_colors &lt;- c(&quot;#999999&quot;, &quot;#cc3333&quot;) names(squirrel_colors) &lt;- c(&quot;Sciurus carolinensis&quot;, &quot;Sciurus vulgaris&quot;) season_colors &lt;- c(&quot;#76b183&quot;,&quot;#d98a41&quot;,&quot;#6b7398&quot;) #e5bd5b names(season_colors) &lt;- c(&quot;spring-summer&quot;, &quot;autumn&quot;, &quot;winter&quot;) area_colors &lt;- c(&quot;#3d6a4b&quot;,&quot;#94a766&quot;,&quot;#c1cca7&quot;) names(area_colors) &lt;- c(&quot;rural&quot;, &quot;suburban&quot;, &quot;urban&quot;) sex_colors &lt;- c(&quot;turquoise3&quot;, &quot;indianred2&quot;) names(sex_colors) &lt;- c(&quot;M&quot;, &quot;F&quot;) 2.0.0.10 Wrap working objects In the last step, the objects that are needed for downstream analyses are stored in an R object. save(read_counts, read_counts_filt, genome_counts, genome_tree, genome_metadata, genome_gifts, genome_kegg, sample_metadata, ehi_phylum_colors, phylum_colors, squirrel_colors, season_colors, area_colors, sex_colors, file = &quot;data/squirrels_data.Rdata&quot;) "],["data-summary.html", "Chapter 3 Data Summary 3.1 Sample summary 3.2 Sequencing data summary 3.3 MAGs summary", " Chapter 3 Data Summary rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) 3.1 Sample summary Summary of sampled individuals and analysed faecal samples. #number of samples length(sample_metadata$sample) [1] 190 #number of samples by species sample_metadata %&gt;% group_by(species) %&gt;% summarise(n_samples = length(sample)) %&gt;% tt() tinytable_oh7d8kibb55y8y1tnbp8 .table td.tinytable_css_vlwjmfcx79q8cade86uj, .table th.tinytable_css_vlwjmfcx79q8cade86uj { border-bottom: solid 0.1em #d3d8dc; } species n_samples Sciurus carolinensis 80 Sciurus vulgaris 110 #number of samples by species and sex sample_metadata %&gt;% group_by(species, sex) %&gt;% summarise(n_samples = length(sample)) %&gt;% tt() tinytable_9sghe99qxvd4gymycf3e .table td.tinytable_css_7gtrcfq6oq4i3740d5w8, .table th.tinytable_css_7gtrcfq6oq4i3740d5w8 { border-bottom: solid 0.1em #d3d8dc; } species sex n_samples Sciurus carolinensis F 44 Sciurus carolinensis M 36 Sciurus vulgaris F 63 Sciurus vulgaris M 47 #number of samples by species and development sample_metadata %&gt;% group_by(species, development) %&gt;% summarise(n_samples = length(sample)) %&gt;% tt() tinytable_zt1bq6uigbj0e1lv1vel .table td.tinytable_css_bbay410ilmtyco9ymgkq, .table th.tinytable_css_bbay410ilmtyco9ymgkq { border-bottom: solid 0.1em #d3d8dc; } species development n_samples Sciurus carolinensis Adult 71 Sciurus carolinensis Juvenile 2 Sciurus carolinensis Nursing 3 Sciurus carolinensis Pregnant 4 Sciurus vulgaris Adult 90 Sciurus vulgaris Juvenile 1 Sciurus vulgaris Nursing 8 Sciurus vulgaris Pregnant 11 #number of samples by species and type of area sample_metadata %&gt;% group_by(species,area_type) %&gt;% summarise(n_samples = length(sample)) %&gt;% tt() tinytable_5v09t5cbed9zsj0pui3d .table td.tinytable_css_lmxnc4stmu631ekjrds7, .table th.tinytable_css_lmxnc4stmu631ekjrds7 { border-bottom: solid 0.1em #d3d8dc; } species area_type n_samples Sciurus carolinensis rural 29 Sciurus carolinensis suburban 24 Sciurus carolinensis urban 27 Sciurus vulgaris rural 37 Sciurus vulgaris suburban 30 Sciurus vulgaris urban 43 #number of distinct squirrels n_distinct(sample_metadata$animal) [1] 108 #number of squirrels by species and type of area sample_metadata %&gt;% group_by(species,area_type) %&gt;% summarise(distinct_squirrels = n_distinct(animal)) %&gt;% tt() tinytable_ion56l06jsfbkgq0jvcq .table td.tinytable_css_7tbdsum2bihlbunh2i16, .table th.tinytable_css_7tbdsum2bihlbunh2i16 { border-bottom: solid 0.1em #d3d8dc; } species area_type distinct_squirrels Sciurus carolinensis rural 14 Sciurus carolinensis suburban 13 Sciurus carolinensis urban 18 Sciurus vulgaris rural 21 Sciurus vulgaris suburban 14 Sciurus vulgaris urban 28 #number of squirrels by species and season sample_metadata %&gt;% group_by(species,season) %&gt;% summarise(distinct_squirrels = n_distinct(animal)) %&gt;% tt() tinytable_g3df004ibg6s4jbsg9dv .table td.tinytable_css_rjclis554yygu9rnwaz8, .table th.tinytable_css_rjclis554yygu9rnwaz8 { border-bottom: solid 0.1em #d3d8dc; } species season distinct_squirrels Sciurus carolinensis autumn 33 Sciurus carolinensis spring-summer 22 Sciurus carolinensis winter 25 Sciurus vulgaris autumn 39 Sciurus vulgaris spring-summer 38 Sciurus vulgaris winter 33 #n of analysed faecal samples ncol(read_counts) [1] 191 Geographical location of sampled red squirrel (light blue) and grey squirrel (pink) populations in Italy. #Summarise for generating map options(dplyr.summarise.inform = FALSE) sample_metadata_summary &lt;- sample_metadata %&gt;% #Group by geography and count samples select(sample, latitude, longitude, country, species) %&gt;% group_by(latitude, longitude, species) %&gt;% summarize(count = n()) %&gt;% ungroup() italy &lt;- map_data(&quot;world&quot;, region=&quot;italy&quot;) %&gt;% summarise(long = mean(long), lat = mean(lat)) #plotting on map sample_metadata_summary %&gt;% ggplot(.) + #render map geom_map( data=map_data(&quot;world&quot;, region=&quot;italy&quot;), map = map_data(&quot;world&quot;, region=&quot;italy&quot;), aes(long, lat, map_id=region), color = &quot;white&quot;, fill = &quot;#cccccc&quot;, linewidth = 0.2 ) + #render points geom_point( aes(x=longitude,y=latitude, color=species), alpha=0.5, shape=16) + #add general plot layout theme_minimal() + theme(legend.position = &quot;none&quot;, axis.title.x=element_blank(), axis.title.y=element_blank() ) + coord_map(&quot;mercator&quot;) 3.2 Sequencing data summary Total amount of sequencing data generated from the analysed samples. #amount of discarded data (GB) sum(round(((sample_metadata$metagenomic_bases+sample_metadata$host_bases)/ (1-sample_metadata$bases_lost_fastp_percent))- (sample_metadata$metagenomic_bases+sample_metadata$host_bases)))/1000000000 [1] 63.90045 #amount of host data (GB) sum(sample_metadata$host_bases)/1000000000 [1] 166.0275 #amount of metagenomic data (GB) sum(sample_metadata$metagenomic_bases)/1000000000 [1] 786.1584 #amount of estimated prokaryotic data (singleM) sum(sample_metadata$metagenomic_bases * sample_metadata$singlem_fraction)/1000000000 [1] 557.7475 Origin of DNA sequences obtained from each sample. sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample,mags_bases,unmapped_bases,host_bases,lowqual_bases) mags_bases_mean &lt;- sequence_fractions %&gt;% mutate(mags_bases = mags_bases / 1000000000) %&gt;% select(mags_bases) %&gt;% pull() %&gt;% mean() sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(values=c(&quot;#CCCCCC&quot;,&quot;#178a94&quot;,&quot;#ee8080&quot;,&quot;#d03161&quot;)) + geom_hline(yintercept = mags_bases_mean, linetype = &quot;dashed&quot;, color = &quot;black&quot;) + labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;bottom&quot;) Sequencing assessment: difference between mapping rate and estimated singleM proportion # Estimated vs mapped prokaryotic fraction sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample,mags_bases,unmapped_bases,host_bases,lowqual_bases) singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(values=c(&quot;#52e1e8&quot;,&quot;#876b53&quot;)) + theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6),legend.position = &quot;right&quot;) # Export difference b/w mags and singlem proportions to be used later in script 05-diversity_models singlem &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% mutate(mags_singlem = mags_proportion/singlem_proportion) %&gt;% mutate(est_mapp = ifelse(mags_singlem &gt;= 1, 1, mags_singlem)) %&gt;% select(sample,mags_singlem,est_mapp) write.table(singlem, file = &quot;data/singlem.csv&quot;, row.names = FALSE, dec = &quot;.&quot;, sep = &quot;;&quot;, quote = FALSE) 3.3 MAGs summary #number of MAGs nrow(read_counts) [1] 1687 #number of MAGs without species-level annotation (i.e., &quot;new species&quot;) genome_metadata %&gt;% filter(species == &quot;s__&quot;) %&gt;% nrow() [1] 1455 #number of phylums genome_metadata %&gt;% select(phylum) %&gt;% unique() %&gt;% pull() %&gt;% length() [1] 13 "],["mags-overview.html", "Chapter 4 MAGs overview 4.1 MAGs phylogeny 4.2 Genome quality 4.3 Functional attributes of MAGs 4.4 Functional ordination of MAGs (distillr)", " Chapter 4 MAGs overview rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) 4.1 MAGs phylogeny # Which phylum the MAG belongs to phyla &lt;- ehi_phylum_colors %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() # What is the genome size of the MAG in MBs (megabases) lengths &lt;- genome_metadata %&gt;% select(c(genome,length)) %&gt;% mutate(length=round(length/1000000,2)) # What is the completeness of the MAG mag_completeness &lt;- genome_metadata %&gt;% select(c(genome,completeness)) %&gt;% as.data.frame() %&gt;% remove_rownames() %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate the phylum color heatmap phylum_heatmap &lt;- ehi_phylum_colors %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Create baseline circular genome tree circular_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., layout = &#39;circular&#39;, size = 0.1, angle=45) + xlim(-1, NA) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.05, width=0.3, colnames=FALSE) + scale_fill_manual(values=phylum_colors, name=&quot;Phylum&quot;) + #geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;right&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + #new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;, name=&quot;Genome\\ncontamination&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=lengths, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) #Plot circular tree circular_tree 4.2 Genome quality genome_metadata$completeness %&gt;% mean() [1] 84.89347 genome_metadata$completeness %&gt;% sd() [1] 15.4699 genome_metadata$contamination %&gt;% mean() [1] 2.013071 genome_metadata$contamination %&gt;% sd() [1] 2.10322 #create input table from original genome table genome_details &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% mutate(length=round(length/1000000,2)) %&gt;% #change length to MBs rename(comp=completeness,cont=contamination,size=length) %&gt;% #rename columns remove_rownames() %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) #sort MAGs according to phylogenetic tree #generate genome quality biplot genome_stats_biplot &lt;- genome_details %&gt;% ggplot(aes(x=comp,y=cont,size=size,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #generate contamination boxplot genome_stats_cont &lt;- genome_details %&gt;% ggplot(aes(y=cont)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #generate completeness boxplot genome_stats_comp &lt;-genome_details %&gt;% ggplot(aes(x=comp)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #create composite figure grid.arrange(grobs = list(genome_stats_comp,genome_stats_biplot,genome_stats_cont), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional attributes of MAGs #Generate a basal utrametric tree for the sake of visualisation gift_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips gift_tree &lt;- gheatmap(gift_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE, color=NA) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap gift_tree &lt;- gift_tree + new_scale_fill() gift_table &lt;- genome_gifts %&gt;% column_to_rownames(var=&quot;genome&quot;) #Add functions heatmap gift_tree &lt;- gheatmap(gift_tree, gift_table, offset=0.5, width=3.5, colnames=FALSE, color=NA) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;)+ labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap gift_tree &lt;- gift_tree + new_scale_fill() # Add completeness barplots gift_tree &lt;- gift_tree + geom_fruit(data=genome_metadata, geom=geom_bar, #grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) #Plot combined tree + heatmap gift_tree + theme(legend.position=&#39;right&#39;) 4.4 Functional ordination of MAGs (distillr) distillr_table &lt;- genome_gifts %&gt;% column_to_rownames(var=&quot;genome&quot;) # Generate the tSNE ordination tSNE_func2 &lt;- Rtsne(X=distillr_table, dims = 2, check_duplicates = FALSE) # Plot the ordination tSNE_func2$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(distillr_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, completeness) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=completeness))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + theme(legend.position = &quot;right&quot;) "],["community-composition.html", "Chapter 5 Community composition 5.1 Count data preparation 5.2 Genomes by host species 5.3 Taxonomic composition of samples", " Chapter 5 Community composition rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) 5.1 Count data preparation genome_counts_log &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% mutate_all(~log10(.+1)) #fixed: mutate_at(vars(), ~log10(.+1))) was not working genome_counts_pivot &lt;- genome_counts %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS normalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append taxonomy mutate(phylum = fct_relevel(phylum, rev(ehi_phylum_colors$phylum))) #sort phyla by taxonomy genome_counts_by_host &lt;- sample_metadata %&gt;% select(&quot;sample&quot;,&quot;species&quot;,&quot;area_type&quot;, &quot;development&quot;) %&gt;% rename(host_sp=species) %&gt;% left_join(genome_counts_pivot,., by=join_by(&quot;sample&quot; == &quot;sample&quot;)) #%&gt;% #mutate(sample=factor(sample, levels = sample_sort)) #alternative to join: sorting by area_type # Retrieve taxonomy colors to use standardised EHI colors phylum_colors &lt;- ehi_phylum_colors %&gt;% filter(phylum %in% unique(genome_counts_by_host$phylum)) %&gt;% select(colors) %&gt;% pull() %&gt;% rev() phylum_colors &lt;- c(phylum_colors,&quot;#cccccc&quot;) #REMOVE! ONLY FOR ARCHAEANS # Which host species each genome can be found in genomes_by_species &lt;- genome_counts_by_host %&gt;% filter(count&gt;0) %&gt;% group_by(genome) %&gt;% mutate(host = if_else(all(host_sp == &quot;Sciurus vulgaris&quot;), &quot;only red&quot;, if_else(all(host_sp == &quot;Sciurus carolinensis&quot;), &quot;only grey&quot;, &quot;both&quot;))) %&gt;% select(genome, host) %&gt;% distinct(genome, .keep_all = TRUE) %&gt;% left_join(.,genome_metadata, by=&#39;genome&#39;) genomes_by_species$host &lt;-factor(genomes_by_species$host, levels = c(&quot;both&quot;, &quot;only red&quot;, &quot;only grey&quot;)) 5.2 Genomes by host species # Which phylum the MAG belongs to phyla &lt;- ehi_phylum_colors %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() # Generate the phylum color heatmap phylum_heatmap &lt;- ehi_phylum_colors %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Create baseline circular genome tree circular_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., layout = &#39;circular&#39;, size = 0.1, angle=45) + xlim(-1, NA) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.0, width=0.2, colnames=FALSE) + scale_fill_manual(values=phylum_colors, name=&quot;Phylum&quot;) + #geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;right&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) #Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add host ring circular_tree_h &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = c(&quot;black&quot;, &quot;#ed2939&quot;, &quot;#92a0ad&quot;), name=&quot;Host\\nspecies&quot;) + #&quot;#cc3333&quot;, &quot;#999999&quot; geom_fruit( data=genomes_by_species, geom=geom_tile, mapping = aes(y=genome, fill=host), offset = 0.35, width=0.2) #Plot circular tree circular_tree_h #number of MAGs by host species genomes_by_species %&gt;% dplyr::group_by(host) %&gt;% summarise(n=length(host), percentage=(length(host)/1687)*100) %&gt;% tt() tinytable_d011gc4xjruz02bcd2rx .table td.tinytable_css_in56wecsrage1pbj72zi, .table th.tinytable_css_in56wecsrage1pbj72zi { border-bottom: solid 0.1em #d3d8dc; } host n percentage both 505 29.93480 only red 482 28.57143 only grey 700 41.49378 #most abundant phyla by host species genome_counts_by_host %&gt;% #filter(count&gt;0) %&gt;% group_by(host_sp,phylum) %&gt;% summarise(rel_abundance=sum(count)) %&gt;% top_n(3, rel_abundance) %&gt;% arrange(by_group=host_sp, desc(rel_abundance)) %&gt;% tt() tinytable_jlpf10kqqe5jibovpn8c .table td.tinytable_css_8jh66myxmva182l2mp8j, .table th.tinytable_css_8jh66myxmva182l2mp8j { border-bottom: solid 0.1em #d3d8dc; } host_sp phylum rel_abundance Sciurus carolinensis p__Bacillota_A 55.472233 Sciurus carolinensis p__Bacteroidota 16.149398 Sciurus carolinensis p__Bacillota 2.498674 Sciurus vulgaris p__Bacillota_A 48.125675 Sciurus vulgaris p__Bacteroidota 32.438965 Sciurus vulgaris p__Actinomycetota 16.517267 #most common phyla by host species genome_counts_by_host %&gt;% #filter(count&gt;0) %&gt;% group_by(host_sp,phylum) %&gt;% summarise(freq=sum(count&gt;0)/length(host_sp)) %&gt;% top_n(3, freq) %&gt;% arrange(by_group=host_sp, desc(freq)) %&gt;% tt() tinytable_7x0cr8a0it9jqwcd7qq9 .table td.tinytable_css_h8amc3vz5fbmuzazyapq, .table th.tinytable_css_h8amc3vz5fbmuzazyapq { border-bottom: solid 0.1em #d3d8dc; } host_sp phylum freq Sciurus carolinensis p__Campylobacterota 0.46250000 Sciurus carolinensis p__Verrucomicrobiota 0.30000000 Sciurus carolinensis p__Bacillota_B 0.27291667 Sciurus vulgaris p__Campylobacterota 0.14545455 Sciurus vulgaris p__Bacillota_C 0.13522727 Sciurus vulgaris p__Bacillota_B 0.08333333 #most abundant class by host species genome_counts_by_host %&gt;% filter(count&gt;0) %&gt;% group_by(host_sp,class) %&gt;% summarise(total_count=sum(count)) %&gt;% top_n(5, total_count) %&gt;% arrange(by_group=host_sp, desc(total_count)) %&gt;% tt() tinytable_4mj80m5boqrrkradnjfj .table td.tinytable_css_t19farir2g7qxr2eqvui, .table th.tinytable_css_t19farir2g7qxr2eqvui { border-bottom: solid 0.1em #d3d8dc; } host_sp class total_count Sciurus carolinensis c__Clostridia 55.472233 Sciurus carolinensis c__Bacteroidia 16.149398 Sciurus carolinensis c__Bacilli 2.498674 Sciurus carolinensis c__Verrucomicrobiae 2.094198 Sciurus carolinensis c__Vampirovibrionia 1.253040 Sciurus vulgaris c__Clostridia 48.125675 Sciurus vulgaris c__Bacteroidia 32.438965 Sciurus vulgaris c__Actinomycetia 16.040176 Sciurus vulgaris c__Bacilli 8.233587 Sciurus vulgaris c__Gammaproteobacteria 2.254878 #most abundant family by host species genome_counts_by_host %&gt;% filter(count&gt;0) %&gt;% group_by(host_sp,family) %&gt;% summarise(abundance=sum(count)) %&gt;% top_n(5, abundance) %&gt;% arrange(by_group=host_sp, desc(abundance)) %&gt;% tt() tinytable_n4wr2ycz64s4s3jcosu7 .table td.tinytable_css_48i854qtpht21rjbual4, .table th.tinytable_css_48i854qtpht21rjbual4 { border-bottom: solid 0.1em #d3d8dc; } host_sp family abundance Sciurus carolinensis f__Lachnospiraceae 29.253695 Sciurus carolinensis f__Oscillospiraceae 16.103469 Sciurus carolinensis f__Bacteroidaceae 9.370700 Sciurus carolinensis f__Muribaculaceae 4.737998 Sciurus carolinensis f__Borkfalkiaceae 2.527615 Sciurus vulgaris f__Lachnospiraceae 35.793100 Sciurus vulgaris f__Bacteroidaceae 21.149209 Sciurus vulgaris f__Bifidobacteriaceae 15.986288 Sciurus vulgaris f__Muribaculaceae 9.598616 Sciurus vulgaris f__Oscillospiraceae 4.267142 vertical_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** Trovata più di una classe &quot;phylo&quot; in cache; si utilizza il primo, dal namespace &#39;phyloseq&#39; Definito anche da &#39;tidytree&#39; #Add phylum colors vertical_tree &lt;- gheatmap(vertical_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE, color=NA) + scale_fill_manual(values=phylum_colors) Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. #Reset fill scale vertical_tree &lt;- vertical_tree + new_scale_fill() #Add counts vertical_tree &lt;- gheatmap(vertical_tree, genome_counts_log, offset=0.5, width=3.5, color=NA, colnames=FALSE) + #, colnames_angle=90, font.size=2, colnames_position=&quot;top&quot;, colnames_offset_y = 9 vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) Scale for y is already present. Adding another scale for y, which will replace the existing scale. Scale for fill is already present. Adding another scale for fill, which will replace the existing scale. #Plot tree vertical_tree + theme(legend.position=&#39;right&#39;) 5.3 Taxonomic composition of samples # sample_sort &lt;- sample_metadata %&gt;% # arrange(Area_type) %&gt;% # select(sample) %&gt;% # pull() # Plot stacked barplot ggplot(genome_counts_by_host, aes(x=sample,y=count,fill=phylum, group=phylum))+ #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.02)+ #plot stacked bars with white borders scale_fill_manual(values=phylum_colors, name=&quot;Phylum&quot;) + labs(y = &quot;Relative abundance&quot;) + guides(fill = guide_legend(ncol = 1)) + facet_nested(~host_sp, scales=&quot;free&quot;, space=&quot;free&quot;) + theme(axis.text.x = element_blank(), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position=&quot;right&quot;, ) phylum_summary &lt;- genome_counts_by_host %&gt;% group_by(sample,host_sp,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) # A tibble: 13 × 3 phylum mean sd &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; 1 p__Elusimicrobiota 0.00170 0.00694 2 p__Cyanobacteriota 0.00895 0.0118 3 p__Bacillota 0.0565 0.110 4 p__Bacillota_B 0.00255 0.00418 5 p__Bacillota_C 0.00429 0.00664 6 p__Bacillota_A 0.545 0.252 7 p__Actinomycetota 0.0898 0.234 8 p__Patescibacteria 0.0000251 0.000346 9 p__Pseudomonadota 0.0180 0.0738 10 p__Campylobacterota 0.00521 0.0250 11 p__Bacteroidota 0.256 0.178 12 p__Verrucomicrobiota 0.0116 0.0229 13 p__Thermoplasmatota 0.000351 0.00366 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)], name=&quot;Phylum&quot;) + geom_jitter(alpha=0.5) + facet_nested(~host_sp, scales=&quot;free&quot;, space=&quot;free&quot;) + theme_minimal() + theme(legend.position=&quot;right&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) family_summary &lt;- genome_counts_by_host %&gt;% group_by(sample,host_sp,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% arrange(-mean) # A tibble: 74 × 3 family mean sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 f__Lachnospiraceae 0.342 0.192 2 f__Bacteroidaceae 0.161 0.146 3 f__Oscillospiraceae 0.107 0.104 4 f__Bifidobacteriaceae 0.0841 0.233 5 f__Muribaculaceae 0.0755 0.0956 6 f__Ruminococcaceae 0.0329 0.0377 7 f__Borkfalkiaceae 0.0192 0.0270 8 f__Lactobacillaceae 0.0163 0.0514 9 f__Streptococcaceae 0.0161 0.0866 10 f__Acutalibacteraceae 0.0109 0.0135 # ℹ 64 more rows family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~host_sp)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) genus_summary &lt;- genome_counts_by_host %&gt;% group_by(sample,host_sp,genus) %&gt;% summarise(relabun=sum(count)) genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=TRUE),sd=sd(relabun, na.rm=TRUE)) %&gt;% arrange(-mean) # A tibble: 348 × 3 genus mean sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 g__Bifidobacterium 0.0841 0.233 2 g__Prevotella 0.0732 0.0968 3 g__Acetatifactor 0.0429 0.0621 4 g__ 0.0383 0.0427 5 g__Eisenbergiella 0.0322 0.0556 6 g__Faecousia 0.0270 0.0366 7 g__CAG-95 0.0219 0.0326 8 g__Roseburia 0.0215 0.0526 9 g__Phocaeicola 0.0194 0.0292 10 g__Dysosmobacter 0.0179 0.0175 # ℹ 338 more rows genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~host_sp)+ theme_minimal() + labs(y=&quot;Genus&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) Warning in left_join(., genome_metadata %&gt;% select(genus, phylum) %&gt;% unique(), : Detected an unexpected many-to-many relationship between `x` and `y`. ℹ Row 1 of `x` matches multiple rows in `y`. ℹ Row 41 of `y` matches multiple rows in `x`. ℹ If a many-to-many relationship is expected, set `relationship = &quot;many-to-many&quot;` to silence this warning. "],["diversity-analyses.html", "Chapter 6 Diversity analyses 6.1 Data preparation 6.2 Alpha Diversity metrics 6.3 Alpha Diversity comparisons 6.4 Alpha diversity models 6.5 Beta diversity", " Chapter 6 Diversity analyses rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) singlem &lt;- read.csv(&quot;data/singlem.csv&quot;,sep=&quot;;&quot;,header=T) options(contrasts = c(&#39;contr.sum&#39;,&#39;contr.poly&#39;)) 6.1 Data preparation #Change genome names column to row names genome_counts &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) genome_gifts &lt;- genome_gifts %&gt;% column_to_rownames(var=&quot;genome&quot;) #Get list of present MAGs present_MAGs &lt;- genome_counts %&gt;% filter(rowSums(.[, -1]) != 0) %&gt;% rownames() #Remove samples with all zeros (no data after filtering) genome_counts_filt &lt;- genome_counts %&gt;% select_if(~!all(. == 0)) #Align distillr annotations with present MAGs and remove all-zero and all-one traits present_MAGs &lt;- present_MAGs[present_MAGs %in% rownames(genome_gifts)] genome_gifts_filt &lt;- genome_gifts[present_MAGs,] %&gt;% select_if(~!all(. == 0)) %&gt;% #remove all-zero modules select_if(~!all(. == 1)) #remove all-one modules #Align tree with present MAGs tree_filt &lt;- keep.tip(genome_tree,present_MAGs) #Filter count table to only contain present MAGs after gifts filtering genome_counts_filt &lt;- genome_counts[present_MAGs,] #Calculate sequence fractions for each samples sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% dplyr::summarize(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample,mags_bases,unmapped_bases,host_bases,lowqual_bases) 6.2 Alpha Diversity metrics #ALPHA DIVERSITY q0n &lt;- hilldiv2::hilldiv(genome_counts,q=0) %&gt;% c() Neutral Hill numbers of q0 q1n &lt;- hilldiv2::hilldiv(genome_counts,q=1) %&gt;% c() Neutral Hill numbers of q1 q1p &lt;- hilldiv2::hilldiv(genome_counts,q=1,tree=genome_tree) %&gt;% c() Phylogenetic Hill numbers of q1 dist &lt;- hilldiv2::traits2dist(genome_gifts_filt, method=&quot;gower&quot;) q1f &lt;- hilldiv2::hilldiv(genome_counts_filt,q=1,dist=dist) %&gt;% c() Functional Hill numbers of q1 # Merge all metrics alpha_div &lt;- cbind(sample=colnames(genome_counts),richness=q0n,neutral=round(q1n,3),phylo=round(q1p,3),func=round(q1f,3)) %&gt;% as.data.frame() columns &lt;- c(&quot;richness&quot;,&quot;neutral&quot;,&quot;phylo&quot;,&quot;func&quot;, &quot;mapped&quot;,&quot;total&quot;) # Add amount of sequencing data to the table alpha_div &lt;- alpha_div %&gt;% left_join(sequence_fractions, by = join_by(sample == sample)) %&gt;% #add sequencing depth information mutate(mapped=round(mags_bases/1000000000,3)) %&gt;% #modify depth to million reads mutate(total=round((mags_bases+unmapped_bases+host_bases+lowqual_bases)/1000000000,3)) %&gt;% select(sample,richness,neutral,phylo,func,mapped,total) %&gt;% mutate(across(-1, as.numeric)) alpha_div %&gt;% left_join(sample_metadata, by=&#39;sample&#39;) %&gt;% select(sample, species, richness, neutral,phylo,func, mapped, total) %&gt;% mutate(species = factor(species), # Convert to factor if necessary sample = factor(sample, levels = unique(sample)[order(species)])) %&gt;% pivot_longer(-c(sample, species), names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% ggplot(aes(x=value, y=sample, fill=species)) + geom_bar(stat=&#39;identity&#39;) + scale_fill_manual(values=squirrel_colors) + facet_wrap(~ data, scales=&quot;free_x&quot;, ncol=6) + #facet_grid(species ~ data, scales=&quot;free_x&quot;, space=&quot;fixed&quot;) + #force_panelsizes(ro#ws = 2, cols = 3, TRUE) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size=.1, color=&quot;grey&quot;), panel.spacing = unit(0, &quot;lines&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_blank(), legend.position = &quot;none&quot; ) # #table # kable(alpha_div) 6.3 Alpha Diversity comparisons 6.3.1 By species neutral.sp &lt;- alpha_div %&gt;% select(sample,neutral) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;, alpha=0.5) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + #stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) phylo.sp &lt;- alpha_div %&gt;% select(sample,phylo) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;, alpha=0.5) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + #stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) func.sp &lt;- alpha_div %&gt;% select(sample,func) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + #stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) ggarrange(neutral.sp, phylo.sp, func.sp, #+ rremove(&quot;x.text&quot;), ncol = 3, nrow = 1) 6.3.2 By species and sex neutral.sex &lt;- alpha_div %&gt;% select(sample,neutral) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;sex&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=sex_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) phylo.sex &lt;- alpha_div %&gt;% select(sample,phylo) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;sex&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=sex_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Phylogenetic Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) func.sex &lt;- alpha_div %&gt;% select(sample,func) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;sex&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=sex_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Functional Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) sex.legend &lt;- get_legend(neutral.sex) ggarrange(neutral.sex, phylo.sex, func.sex, #+ rremove(&quot;x.text&quot;), legend.grob = sex.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 1, nrow = 3) 6.3.3 By species and urbanisation sample_metadata$area_type &lt;-factor(sample_metadata$area_type, levels = c(&quot;rural&quot;, &quot;suburban&quot;, &quot;urban&quot;)) #neutral alpha by species*area_type neutral.urb &lt;- alpha_div %&gt;% select(sample,neutral) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=paste0(area_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Urbanisation&quot;), fill=&quot;none&quot;) #phylogenetic alpha by species*area_type phylo.urb &lt;- alpha_div %&gt;% select(sample,phylo) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=paste0(area_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Phylogenetic Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #functional (distillr-based) alpha by species*area_type func.urb &lt;- alpha_div %&gt;% select(sample,func) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=paste0(area_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Functional Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) urb.legend &lt;- get_legend(neutral.urb) ggarrange(neutral.urb, phylo.urb, func.urb, #+ rremove(&quot;x.text&quot;), legend.grob = urb.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 1, nrow = 3) 6.3.4 By species and season sample_metadata$season &lt;-factor(sample_metadata$season, levels = c(&quot;spring-summer&quot;, &quot;autumn&quot;, &quot;winter&quot;)) #neutral alpha by species*season neutral.seas &lt;- alpha_div %&gt;% select(sample,neutral) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;season&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=season_colors) + scale_fill_manual(values=paste0(season_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Season&quot;), fill=&quot;none&quot;) #phylogenetic alpha by species*season phylo.seas &lt;- alpha_div %&gt;% select(sample,phylo) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;season&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=season_colors) + scale_fill_manual(values=paste0(season_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Phylogenetic Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #functional (distillr-based) alpha by species*season func.seas &lt;- alpha_div %&gt;% select(sample,func) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;season&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=season_colors) + scale_fill_manual(values=paste0(season_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Functional Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) seas.legend &lt;- get_legend(neutral.seas) ggarrange(neutral.seas, phylo.seas, func.seas, #+ rremove(&quot;x.text&quot;), legend.grob = seas.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 1, nrow = 3) 6.3.5 By species and development #neutral alpha by species*season neutral.dev &lt;- alpha_div %&gt;% select(sample,neutral) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;development&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + stat_compare_means() + theme_classic() + labs(y = &quot;Neutral Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Development&quot;), fill=&quot;none&quot;) #phylogenetic alpha by species*season phylo.dev &lt;- alpha_div %&gt;% select(sample,phylo) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;development&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + stat_compare_means() + theme_classic() + labs(y = &quot;Phylogenetic Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #functional (distillr-based) alpha by species*season func.dev &lt;- alpha_div %&gt;% select(sample,func) %&gt;% pivot_longer(-sample, names_to = &quot;data&quot;, values_to = &quot;value&quot;) %&gt;% mutate(data = factor(data, levels = columns)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;value&quot;, color = &quot;development&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + stat_compare_means() + theme_classic() + labs(y = &quot;Functional Hill numbers&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) dev.legend &lt;- get_legend(neutral.seas) ggarrange(neutral.dev, phylo.dev, func.dev, #+ rremove(&quot;x.text&quot;), legend.grob = seas.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 1, nrow = 3) 6.3.6 Alpha diversity and sequencing effort #sequencing effort and diversity ggplot(alpha_div, aes(x=mapped,y=neutral,label=sample)) + geom_smooth(method=&#39;lm&#39;, formula= y~x, color=&#39;#e08dde&#39;, fill=&#39;#e08dde&#39;) + geom_point(alpha=0.5, color=&quot;#6c9ebc&quot;) + geom_label_repel(max.overlaps = 100, cex=0.7) + labs(x = &quot;GBs mapped to MAGs&quot;, y = &quot;Neutral diversity (effective number of MAGs)&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) 6.4 Alpha diversity models 6.4.1 Data preparation for GLMMs diversity.data &lt;- alpha_div %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(season=factor(season, levels = c(&quot;spring-summer&quot;, &quot;autumn&quot;, &quot;winter&quot;))) %&gt;% right_join(singlem, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% mutate(index500_st = scale(index500, center=T, scale=T)[,1]) %&gt;% ungroup() %&gt;% filter(sample!=&quot;EHI02263&quot;) %&gt;% #remove outlier filter(development==&quot;Adult&quot;) #remove juveniles, nursing and pregnant females #check whether a low domain-adjusted mapping rate (DAMR) is associated with low diversity estimates ggplot(diversity.data, aes(x=est_mapp, y=neutral)) + geom_point(size=3, alpha=0.5, color=&quot;#6c9ebc&quot;) + labs(x = &quot;DAMR (mapping rate to MAG catalogue/singleM microbial fraction estimate)&quot;, y = &quot;Neutral diversity (effective number of MAGs)&quot;) + theme_classic() + theme(legend.position=&quot;none&quot;) diversity.data &lt;- diversity.data %&gt;% filter(mags_singlem &gt; 0.8) #remove 5 samples with low DAMR #str(diversity.data) # check y distributions plot(diversity.data$neutral) hist(diversity.data$neutral, breaks=30) d &lt;- density(diversity.data$neutral) plot(d) plot(diversity.data$phylo) hist(diversity.data$phylo, breaks=30) d &lt;- density(diversity.data$phylo) plot(d) plot(diversity.data$func) hist(diversity.data$func, breaks=30) d &lt;- density(diversity.data$func) plot(d) 6.4.2 Bayesian models - neutral alpha set.seed(123) neutral.brm &lt;-brm(neutral ~ species + index500 + season + + species:index500 + species:season + (1|animal) + (1|sampling_site), data=diversity.data, family=gaussian(), chains = 3, iter = 3000, warmup = 1000) SAMPLING FOR MODEL &#39;anon_model&#39; NOW (CHAIN 1). Chain 1: Chain 1: Gradient evaluation took 0.000157 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 1.57 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 1: Iteration: 1 / 3000 [ 0%] (Warmup) Chain 1: Iteration: 300 / 3000 [ 10%] (Warmup) Chain 1: Iteration: 600 / 3000 [ 20%] (Warmup) Chain 1: Iteration: 900 / 3000 [ 30%] (Warmup) Chain 1: Iteration: 1001 / 3000 [ 33%] (Sampling) Chain 1: Iteration: 1300 / 3000 [ 43%] (Sampling) Chain 1: Iteration: 1600 / 3000 [ 53%] (Sampling) Chain 1: Iteration: 1900 / 3000 [ 63%] (Sampling) Chain 1: Iteration: 2200 / 3000 [ 73%] (Sampling) Chain 1: Iteration: 2500 / 3000 [ 83%] (Sampling) Chain 1: Iteration: 2800 / 3000 [ 93%] (Sampling) Chain 1: Iteration: 3000 / 3000 [100%] (Sampling) Chain 1: Chain 1: Elapsed Time: 1.546 seconds (Warm-up) Chain 1: 3.309 seconds (Sampling) Chain 1: 4.855 seconds (Total) Chain 1: SAMPLING FOR MODEL &#39;anon_model&#39; NOW (CHAIN 2). Chain 2: Chain 2: Gradient evaluation took 4.7e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.47 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 2: Iteration: 1 / 3000 [ 0%] (Warmup) Chain 2: Iteration: 300 / 3000 [ 10%] (Warmup) Chain 2: Iteration: 600 / 3000 [ 20%] (Warmup) Chain 2: Iteration: 900 / 3000 [ 30%] (Warmup) Chain 2: Iteration: 1001 / 3000 [ 33%] (Sampling) Chain 2: Iteration: 1300 / 3000 [ 43%] (Sampling) Chain 2: Iteration: 1600 / 3000 [ 53%] (Sampling) Chain 2: Iteration: 1900 / 3000 [ 63%] (Sampling) Chain 2: Iteration: 2200 / 3000 [ 73%] (Sampling) Chain 2: Iteration: 2500 / 3000 [ 83%] (Sampling) Chain 2: Iteration: 2800 / 3000 [ 93%] (Sampling) Chain 2: Iteration: 3000 / 3000 [100%] (Sampling) Chain 2: Chain 2: Elapsed Time: 1.908 seconds (Warm-up) Chain 2: 4.321 seconds (Sampling) Chain 2: 6.229 seconds (Total) Chain 2: SAMPLING FOR MODEL &#39;anon_model&#39; NOW (CHAIN 3). Chain 3: Chain 3: Gradient evaluation took 4.8e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.48 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: Iteration: 1 / 3000 [ 0%] (Warmup) Chain 3: Iteration: 300 / 3000 [ 10%] (Warmup) Chain 3: Iteration: 600 / 3000 [ 20%] (Warmup) Chain 3: Iteration: 900 / 3000 [ 30%] (Warmup) Chain 3: Iteration: 1001 / 3000 [ 33%] (Sampling) Chain 3: Iteration: 1300 / 3000 [ 43%] (Sampling) Chain 3: Iteration: 1600 / 3000 [ 53%] (Sampling) Chain 3: Iteration: 1900 / 3000 [ 63%] (Sampling) Chain 3: Iteration: 2200 / 3000 [ 73%] (Sampling) Chain 3: Iteration: 2500 / 3000 [ 83%] (Sampling) Chain 3: Iteration: 2800 / 3000 [ 93%] (Sampling) Chain 3: Iteration: 3000 / 3000 [100%] (Sampling) Chain 3: Chain 3: Elapsed Time: 2.12 seconds (Warm-up) Chain 3: 4.053 seconds (Sampling) Chain 3: 6.173 seconds (Total) Chain 3: #assessing model fit plot(neutral.brm) pairs(neutral.brm) #posterior predictive check pp_check(neutral.brm) summary(neutral.brm) Family: gaussian Links: mu = identity; sigma = identity Formula: neutral ~ species + index500 + season + +species:index500 + species:season + (1 | animal) + (1 | sampling_site) Data: diversity.data (Number of observations: 155) Draws: 3 chains, each with iter = 3000; warmup = 1000; thin = 1; total post-warmup draws = 6000 Multilevel Hyperparameters: ~animal (Number of levels: 97) Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sd(Intercept) 4.66 3.29 0.18 12.14 1.00 1873 2926 ~sampling_site (Number of levels: 21) Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sd(Intercept) 8.61 3.87 1.37 16.85 1.00 1569 2068 Regression Coefficients: Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS Intercept 88.48 5.99 76.96 100.68 1.00 7204 4697 species1 41.98 5.95 29.94 53.22 1.00 5467 3870 index500 -31.93 13.11 -58.68 -6.23 1.00 7077 4534 season1 4.35 3.10 -1.78 10.46 1.00 9435 4580 season2 -5.83 2.81 -11.23 -0.12 1.00 7406 4616 species1:index500 -9.12 13.15 -34.47 16.99 1.00 5640 3956 species1:season1 -3.92 3.12 -9.98 2.12 1.00 10205 5103 species1:season2 -1.23 2.82 -6.65 4.31 1.00 10816 5066 Further Distributional Parameters: Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sigma 24.48 1.63 21.42 27.91 1.00 5590 4324 Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). describe_posterior(neutral.brm) Summary of Posterior Distribution Parameter | Median | 95% CI | pd | ROPE | % in ROPE | Rhat | ESS ----------------------------------------------------------------------------------------------------- (Intercept) | 88.32 | [ 76.96, 100.68] | 100% | [-4.85, 4.85] | 0% | 1.000 | 7082.00 species1 | 42.09 | [ 29.94, 53.22] | 100% | [-4.85, 4.85] | 0% | 1.000 | 5369.00 index500 | -31.89 | [-58.68, -6.23] | 99.07% | [-4.85, 4.85] | 0% | 1.000 | 7042.00 season1 | 4.36 | [ -1.78, 10.46] | 92.03% | [-4.85, 4.85] | 56.95% | 1.000 | 9346.00 season2 | -5.83 | [-11.23, -0.12] | 97.77% | [-4.85, 4.85] | 35.51% | 1.000 | 7367.00 species1:index500 | -9.23 | [-34.47, 16.99] | 76.62% | [-4.85, 4.85] | 23.65% | 1.000 | 5572.00 species1:season1 | -3.86 | [ -9.98, 2.12] | 90.00% | [-4.85, 4.85] | 62.60% | 1.000 | 10148.00 species1:season2 | -1.23 | [ -6.65, 4.31] | 66.78% | [-4.85, 4.85] | 92.09% | 1.000 | 10886.00 plot(p_direction(neutral.brm), stack=FALSE) #plot(model_parameters(neutral.brm, effects = &quot;all&quot;, component = &quot;conditional&quot;)) plot(conditional_effects(neutral.brm, effects = &quot;index500:species&quot;)) 6.4.3 Bayesian models - phylogenetic alpha set.seed(123) phylo.brm &lt;-brm(phylo ~ species + index500 + season + + species:index500 + species:season + (1|animal) + (1|sampling_site), data=diversity.data, family=gaussian(), chains = 3, iter = 3000, warmup = 1000) Compiling Stan program... Start sampling SAMPLING FOR MODEL &#39;anon_model&#39; NOW (CHAIN 1). Chain 1: Chain 1: Gradient evaluation took 0.000318 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.18 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 1: Iteration: 1 / 3000 [ 0%] (Warmup) Chain 1: Iteration: 300 / 3000 [ 10%] (Warmup) Chain 1: Iteration: 600 / 3000 [ 20%] (Warmup) Chain 1: Iteration: 900 / 3000 [ 30%] (Warmup) Chain 1: Iteration: 1001 / 3000 [ 33%] (Sampling) Chain 1: Iteration: 1300 / 3000 [ 43%] (Sampling) Chain 1: Iteration: 1600 / 3000 [ 53%] (Sampling) Chain 1: Iteration: 1900 / 3000 [ 63%] (Sampling) Chain 1: Iteration: 2200 / 3000 [ 73%] (Sampling) Chain 1: Iteration: 2500 / 3000 [ 83%] (Sampling) Chain 1: Iteration: 2800 / 3000 [ 93%] (Sampling) Chain 1: Iteration: 3000 / 3000 [100%] (Sampling) Chain 1: Chain 1: Elapsed Time: 1.75 seconds (Warm-up) Chain 1: 3.117 seconds (Sampling) Chain 1: 4.867 seconds (Total) Chain 1: SAMPLING FOR MODEL &#39;anon_model&#39; NOW (CHAIN 2). Chain 2: Chain 2: Gradient evaluation took 4.8e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.48 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 2: Iteration: 1 / 3000 [ 0%] (Warmup) Chain 2: Iteration: 300 / 3000 [ 10%] (Warmup) Chain 2: Iteration: 600 / 3000 [ 20%] (Warmup) Chain 2: Iteration: 900 / 3000 [ 30%] (Warmup) Chain 2: Iteration: 1001 / 3000 [ 33%] (Sampling) Chain 2: Iteration: 1300 / 3000 [ 43%] (Sampling) Chain 2: Iteration: 1600 / 3000 [ 53%] (Sampling) Chain 2: Iteration: 1900 / 3000 [ 63%] (Sampling) Chain 2: Iteration: 2200 / 3000 [ 73%] (Sampling) Chain 2: Iteration: 2500 / 3000 [ 83%] (Sampling) Chain 2: Iteration: 2800 / 3000 [ 93%] (Sampling) Chain 2: Iteration: 3000 / 3000 [100%] (Sampling) Chain 2: Chain 2: Elapsed Time: 1.663 seconds (Warm-up) Chain 2: 2.016 seconds (Sampling) Chain 2: 3.679 seconds (Total) Chain 2: SAMPLING FOR MODEL &#39;anon_model&#39; NOW (CHAIN 3). Chain 3: Chain 3: Gradient evaluation took 5.5e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.55 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: Iteration: 1 / 3000 [ 0%] (Warmup) Chain 3: Iteration: 300 / 3000 [ 10%] (Warmup) Chain 3: Iteration: 600 / 3000 [ 20%] (Warmup) Chain 3: Iteration: 900 / 3000 [ 30%] (Warmup) Chain 3: Iteration: 1001 / 3000 [ 33%] (Sampling) Chain 3: Iteration: 1300 / 3000 [ 43%] (Sampling) Chain 3: Iteration: 1600 / 3000 [ 53%] (Sampling) Chain 3: Iteration: 1900 / 3000 [ 63%] (Sampling) Chain 3: Iteration: 2200 / 3000 [ 73%] (Sampling) Chain 3: Iteration: 2500 / 3000 [ 83%] (Sampling) Chain 3: Iteration: 2800 / 3000 [ 93%] (Sampling) Chain 3: Iteration: 3000 / 3000 [100%] (Sampling) Chain 3: Chain 3: Elapsed Time: 1.668 seconds (Warm-up) Chain 3: 3.276 seconds (Sampling) Chain 3: 4.944 seconds (Total) Chain 3: #assessing model fit plot(phylo.brm) #pairs(phylo.brm) #posterior predictive check pp_check(phylo.brm) Using 10 posterior draws for ppc type &#39;dens_overlay&#39; by default. summary(phylo.brm) Family: gaussian Links: mu = identity; sigma = identity Formula: phylo ~ species + index500 + season + +species:index500 + species:season + (1 | animal) + (1 | sampling_site) Data: diversity.data (Number of observations: 155) Draws: 3 chains, each with iter = 3000; warmup = 1000; thin = 1; total post-warmup draws = 6000 Multilevel Hyperparameters: ~animal (Number of levels: 97) Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sd(Intercept) 0.35 0.21 0.02 0.77 1.00 1179 2193 ~sampling_site (Number of levels: 21) Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sd(Intercept) 0.48 0.20 0.10 0.91 1.00 1223 1107 Regression Coefficients: Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS Intercept 5.74 0.32 5.12 6.40 1.00 3638 2763 species1 0.88 0.32 0.23 1.47 1.00 2982 2896 index500 -1.33 0.71 -2.77 0.02 1.00 3675 3019 season1 0.29 0.16 -0.01 0.59 1.00 6615 4454 season2 -0.20 0.14 -0.48 0.08 1.00 7280 4663 species1:index500 0.53 0.70 -0.83 2.00 1.00 2869 3185 species1:season1 -0.40 0.16 -0.72 -0.09 1.00 5703 4413 species1:season2 0.12 0.14 -0.15 0.40 1.00 5491 4121 Further Distributional Parameters: Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sigma 1.22 0.09 1.04 1.41 1.00 2180 3030 Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). describe_posterior(phylo.brm) Summary of Posterior Distribution Parameter | Median | 95% CI | pd | ROPE | % in ROPE | Rhat | ESS -------------------------------------------------------------------------------------------------- (Intercept) | 5.74 | [ 5.12, 6.40] | 100% | [-0.18, 0.18] | 0% | 1.002 | 3551.00 species1 | 0.89 | [ 0.23, 1.47] | 99.33% | [-0.18, 0.18] | 0% | 1.002 | 2896.00 index500 | -1.31 | [-2.77, 0.02] | 97.28% | [-0.18, 0.18] | 1.89% | 1.003 | 3544.00 season1 | 0.29 | [-0.01, 0.59] | 97.12% | [-0.18, 0.18] | 23.11% | 1.001 | 6553.00 season2 | -0.20 | [-0.48, 0.08] | 92.30% | [-0.18, 0.18] | 43.81% | 1.002 | 7236.00 species1:index500 | 0.51 | [-0.83, 2.00] | 77.87% | [-0.18, 0.18] | 17.42% | 1.002 | 2826.00 species1:season1 | -0.40 | [-0.72, -0.09] | 99.45% | [-0.18, 0.18] | 5.51% | 1.000 | 5584.00 species1:season2 | 0.12 | [-0.15, 0.40] | 80.85% | [-0.18, 0.18] | 66.79% | 1.001 | 5439.00 plot(p_direction(phylo.brm), stack=FALSE) #conditional_effects(phylo.brm) plot(conditional_effects(phylo.brm, effects = &quot;index500:species&quot;)) 6.4.4 Bayesian models - functional (distillr-based) alpha set.seed(123) func.brm &lt;-brm(func ~ species + index500 + season + + species:index500 + species:season + (1|animal), data=diversity.data, family=gaussian(), chains = 3, iter = 3000, warmup = 1000, control = list(adapt_delta = 0.9)) Compiling Stan program... Start sampling SAMPLING FOR MODEL &#39;anon_model&#39; NOW (CHAIN 1). Chain 1: Chain 1: Gradient evaluation took 0.000249 seconds Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 2.49 seconds. Chain 1: Adjust your expectations accordingly! Chain 1: Chain 1: Chain 1: Iteration: 1 / 3000 [ 0%] (Warmup) Chain 1: Iteration: 300 / 3000 [ 10%] (Warmup) Chain 1: Iteration: 600 / 3000 [ 20%] (Warmup) Chain 1: Iteration: 900 / 3000 [ 30%] (Warmup) Chain 1: Iteration: 1001 / 3000 [ 33%] (Sampling) Chain 1: Iteration: 1300 / 3000 [ 43%] (Sampling) Chain 1: Iteration: 1600 / 3000 [ 53%] (Sampling) Chain 1: Iteration: 1900 / 3000 [ 63%] (Sampling) Chain 1: Iteration: 2200 / 3000 [ 73%] (Sampling) Chain 1: Iteration: 2500 / 3000 [ 83%] (Sampling) Chain 1: Iteration: 2800 / 3000 [ 93%] (Sampling) Chain 1: Iteration: 3000 / 3000 [100%] (Sampling) Chain 1: Chain 1: Elapsed Time: 3.094 seconds (Warm-up) Chain 1: 1.891 seconds (Sampling) Chain 1: 4.985 seconds (Total) Chain 1: SAMPLING FOR MODEL &#39;anon_model&#39; NOW (CHAIN 2). Chain 2: Chain 2: Gradient evaluation took 3.7e-05 seconds Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.37 seconds. Chain 2: Adjust your expectations accordingly! Chain 2: Chain 2: Chain 2: Iteration: 1 / 3000 [ 0%] (Warmup) Chain 2: Iteration: 300 / 3000 [ 10%] (Warmup) Chain 2: Iteration: 600 / 3000 [ 20%] (Warmup) Chain 2: Iteration: 900 / 3000 [ 30%] (Warmup) Chain 2: Iteration: 1001 / 3000 [ 33%] (Sampling) Chain 2: Iteration: 1300 / 3000 [ 43%] (Sampling) Chain 2: Iteration: 1600 / 3000 [ 53%] (Sampling) Chain 2: Iteration: 1900 / 3000 [ 63%] (Sampling) Chain 2: Iteration: 2200 / 3000 [ 73%] (Sampling) Chain 2: Iteration: 2500 / 3000 [ 83%] (Sampling) Chain 2: Iteration: 2800 / 3000 [ 93%] (Sampling) Chain 2: Iteration: 3000 / 3000 [100%] (Sampling) Chain 2: Chain 2: Elapsed Time: 3.286 seconds (Warm-up) Chain 2: 1.848 seconds (Sampling) Chain 2: 5.134 seconds (Total) Chain 2: SAMPLING FOR MODEL &#39;anon_model&#39; NOW (CHAIN 3). Chain 3: Chain 3: Gradient evaluation took 3.7e-05 seconds Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.37 seconds. Chain 3: Adjust your expectations accordingly! Chain 3: Chain 3: Chain 3: Iteration: 1 / 3000 [ 0%] (Warmup) Chain 3: Iteration: 300 / 3000 [ 10%] (Warmup) Chain 3: Iteration: 600 / 3000 [ 20%] (Warmup) Chain 3: Iteration: 900 / 3000 [ 30%] (Warmup) Chain 3: Iteration: 1001 / 3000 [ 33%] (Sampling) Chain 3: Iteration: 1300 / 3000 [ 43%] (Sampling) Chain 3: Iteration: 1600 / 3000 [ 53%] (Sampling) Chain 3: Iteration: 1900 / 3000 [ 63%] (Sampling) Chain 3: Iteration: 2200 / 3000 [ 73%] (Sampling) Chain 3: Iteration: 2500 / 3000 [ 83%] (Sampling) Chain 3: Iteration: 2800 / 3000 [ 93%] (Sampling) Chain 3: Iteration: 3000 / 3000 [100%] (Sampling) Chain 3: Chain 3: Elapsed Time: 3.361 seconds (Warm-up) Chain 3: 1.957 seconds (Sampling) Chain 3: 5.318 seconds (Total) Chain 3: #assessing model fit plot(func.brm) #pairs(func.brm) #posterior predictive check pp_check(func.brm) Using 10 posterior draws for ppc type &#39;dens_overlay&#39; by default. summary(func.brm) Family: gaussian Links: mu = identity; sigma = identity Formula: func ~ species + index500 + season + +species:index500 + species:season + (1 | animal) Data: diversity.data (Number of observations: 155) Draws: 3 chains, each with iter = 3000; warmup = 1000; thin = 1; total post-warmup draws = 6000 Multilevel Hyperparameters: ~animal (Number of levels: 97) Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sd(Intercept) 0.02 0.01 0.00 0.05 1.00 970 1878 Regression Coefficients: Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS Intercept 1.45 0.01 1.42 1.47 1.00 8637 4269 species1 0.03 0.01 0.01 0.06 1.00 5402 4159 index500 -0.05 0.03 -0.10 0.01 1.00 8038 4946 season1 0.02 0.01 0.00 0.04 1.00 8103 5254 season2 -0.02 0.01 -0.03 0.00 1.00 8401 4900 species1:index500 0.02 0.03 -0.04 0.08 1.00 4917 4536 species1:season1 -0.03 0.01 -0.04 -0.01 1.00 8323 4978 species1:season2 0.02 0.01 -0.00 0.03 1.00 8835 5402 Further Distributional Parameters: Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS sigma 0.07 0.01 0.06 0.09 1.00 1702 3072 Draws were sampled using sampling(NUTS). For each parameter, Bulk_ESS and Tail_ESS are effective sample size measures, and Rhat is the potential scale reduction factor on split chains (at convergence, Rhat = 1). describe_posterior(func.brm) Summary of Posterior Distribution Parameter | Median | 95% CI | pd | ROPE | % in ROPE | Rhat | ESS -------------------------------------------------------------------------------------------------- (Intercept) | 1.45 | [ 1.42, 1.47] | 100% | [-0.01, 0.01] | 0% | 1.000 | 8513.00 species1 | 0.03 | [ 0.01, 0.06] | 99.28% | [-0.01, 0.01] | 2.23% | 1.000 | 5378.00 index500 | -0.05 | [-0.10, 0.01] | 96.05% | [-0.01, 0.01] | 5.72% | 1.000 | 7892.00 season1 | 0.02 | [ 0.00, 0.04] | 98.07% | [-0.01, 0.01] | 13.12% | 1.000 | 8090.00 season2 | -0.02 | [-0.03, 0.00] | 97.12% | [-0.01, 0.01] | 20.86% | 1.000 | 8307.00 species1:index500 | 0.02 | [-0.04, 0.08] | 76.25% | [-0.01, 0.01] | 20.47% | 1.000 | 4899.00 species1:season1 | -0.03 | [-0.04, -0.01] | 99.75% | [-0.01, 0.01] | 1.40% | 1.000 | 8280.00 species1:season2 | 0.01 | [ 0.00, 0.03] | 95.87% | [-0.01, 0.01] | 23.65% | 1.000 | 8850.00 plot(p_direction(func.brm), stack=FALSE) conditions &lt;- data.frame(season = c(&#39;spring-summer&#39;, &#39;autumn&#39;, &#39;winter&#39;)) plot(conditional_effects(func.brm, effects = &quot;index500:species&quot;, conditions = conditions)) plot(conditional_effects(func.brm, effects = &quot;species:season&quot;)) 6.5 Beta diversity #neutral beta div ALL beta_q1n &lt;-hilldiv2::hillpair(genome_counts, q=1, metric=&quot;S&quot;) #neutral beta div RED red &lt;- sample_metadata %&gt;% filter(species==&quot;Sciurus vulgaris&quot;) %&gt;% pull(sample) genome_counts_red &lt;- genome_counts %&gt;% select(all_of(red)) beta_red &lt;-hilldiv2::hillpair(genome_counts_red, q=1, metric=&quot;S&quot;) #neutral beta div GREY grey &lt;- sample_metadata %&gt;% filter(species==&quot;Sciurus carolinensis&quot;) %&gt;% pull(sample) genome_counts_grey &lt;- genome_counts %&gt;% select(all_of(grey)) beta_grey &lt;-hilldiv2::hillpair(genome_counts_grey, q=1, metric=&quot;S&quot;) 6.5.1 PERMANOVA #neutral beta diversity PERMANOVA sample_metadata_adonis &lt;- sample_metadata %&gt;% filter(sample %in% labels(beta_q1n)) %&gt;% arrange(sample) %&gt;% #mutate(location=paste0(round(longitude,2),&quot;_&quot;,round(latitude,2))) %&gt;% select(animal,sample,species,index500,season,sex,development) %&gt;% select_if(~ length(unique(.)) &gt; 1) %&gt;% #remove columns with all-identical values column_to_rownames(var = &quot;sample&quot;) %&gt;% as.data.frame() dispersion &lt;- betadisper(beta_q1n, group=sample_metadata_adonis[labels(beta_q1n),]$species) #plot(dispersion, main=&quot;PCoA&quot;) boxplot(dispersion$distances ~ dispersion$group, main=&quot;Distance to centroids&quot;) permutest(dispersion) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 1 0.79069 0.79069 291.23 999 0.001 *** Residuals 188 0.51042 0.00271 --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #adjust permutation design to account for repeated measures in subsequent PERMANOVA hr &lt;- with(sample_metadata_adonis, how(nperm = 999, blocks = animal)) adonis2(formula=beta_q1n ~ species + index500 + season + sex + development, data=sample_metadata_adonis[labels(beta_q1n),], permutations=hr, na.action = na.omit) %&gt;% as.matrix() %&gt;% print() Df SumOfSqs R2 F Pr(&gt;F) species 1 12.4725698 0.152272893 34.854424 0.001 index500 1 1.1944158 0.014582171 3.337778 0.001 season 2 1.8668300 0.022791422 2.608415 0.001 sex 1 0.4261535 0.005202747 1.190880 0.376 development 3 1.1789506 0.014393362 1.098187 0.106 Residual 181 64.7704050 0.790757405 NA NA Total 189 81.9093246 1.000000000 NA NA pairwise.adonis(beta_q1n,sample_metadata_adonis[labels(beta_q1n),]$season, perm=999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 winter vs spring-summer 1 1.021884 2.387007 0.02016275 0.005 0.015 . 2 winter vs autumn 1 0.668672 1.564384 0.01207418 0.067 0.201 3 spring-summer vs autumn 1 1.225573 2.867617 0.02158251 0.001 0.003 * 6.5.2 PERMANOVA red squirrel metadata_adonis_red &lt;- sample_metadata %&gt;% filter(sample %in% labels(beta_red)) %&gt;% arrange(sample) %&gt;% #mutate(location=paste0(round(longitude,2),&quot;_&quot;,round(latitude,2))) %&gt;% select(animal,sample,species,index500,season,sex,development) %&gt;% select_if(~ length(unique(.)) &gt; 1) %&gt;% #remove columns with all-identical values column_to_rownames(var = &quot;sample&quot;) %&gt;% as.data.frame() #adjust permutation design to account for repeated measures in subsequent PERMANOVA hr_red &lt;- with(metadata_adonis_red, how(nperm = 999, blocks = animal)) adonis2(formula=beta_red ~ season + index500, data=metadata_adonis_red[labels(beta_red),], permutations=hr_red, na.action = na.omit) %&gt;% as.matrix() %&gt;% print() Df SumOfSqs R2 F Pr(&gt;F) season 2 2.215879 0.04700201 2.700504 0.006 index500 1 1.439691 0.03053794 3.509119 0.001 Residual 106 43.488766 0.92246004 NA NA Total 109 47.144336 1.00000000 NA NA dispersion_red &lt;- betadisper(beta_red, group=metadata_adonis_red[labels(beta_red),]$season) plot(dispersion_red, main=&quot;PCoA&quot;) boxplot(dispersion_red$distances ~ dispersion_red$group, main=&quot;Distance to centroids&quot;) permutest(dispersion_red) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.002366 0.0011832 0.9076 999 0.405 Residuals 107 0.139491 0.0013036 pairwise.adonis(beta_red,metadata_adonis_red[labels(beta_red),]$season, perm=999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 autumn vs winter 1 0.8394182 1.978240 0.02748386 0.004 0.012 . 2 autumn vs spring-summer 1 1.3196970 3.153499 0.04035006 0.001 0.003 * 3 winter vs spring-summer 1 1.1505900 2.759725 0.03845785 0.001 0.003 * 6.5.3 PERMANOVA grey squirrel metadata_adonis_grey &lt;- sample_metadata %&gt;% filter(sample %in% labels(beta_grey)) %&gt;% arrange(sample) %&gt;% #mutate(location=paste0(round(longitude,2),&quot;_&quot;,round(latitude,2))) %&gt;% select(animal,sample,species,index500,season,sex,development) %&gt;% select_if(~ length(unique(.)) &gt; 1) %&gt;% #remove columns with all-identical values column_to_rownames(var = &quot;sample&quot;) %&gt;% as.data.frame() #adjust permutation design to account for repeated measures in subsequent PERMANOVA hr_grey &lt;- with(metadata_adonis_grey, how(nperm = 999, blocks = animal)) adonis2(formula=beta_grey ~ season + index500, data=metadata_adonis_grey[labels(beta_grey),], permutations=hr_grey, na.action = na.omit) %&gt;% as.matrix() %&gt;% print() Df SumOfSqs R2 F Pr(&gt;F) season 2 1.3100373 0.05876605 2.441779 0.002 index500 1 0.5950256 0.02669184 2.218137 0.002 Residual 76 20.3873562 0.91454212 NA NA Total 79 22.2924192 1.00000000 NA NA dispersion_grey &lt;- betadisper(beta_grey, group=metadata_adonis_grey[labels(beta_grey),]$season) plot(dispersion_grey, main=&quot;PCoA&quot;) boxplot(dispersion_grey$distances ~ dispersion_grey$group, main=&quot;Distance to centroids&quot;) permutest(dispersion_grey) Permutation test for homogeneity of multivariate dispersions Permutation: free Number of permutations: 999 Response: Distances Df Sum Sq Mean Sq F N.Perm Pr(&gt;F) Groups 2 0.00546 0.0027279 0.4972 999 0.617 Residuals 77 0.42243 0.0054861 pairwise.adonis(beta_grey,metadata_adonis_grey[labels(beta_grey),]$season, perm=999) pairs Df SumsOfSqs F.Model R2 p.value p.adjusted sig 1 autumn vs winter 1 0.3954485 1.432048 0.02493466 0.100 0.300 2 autumn vs spring-summer 1 0.9030127 3.313573 0.05884147 0.002 0.006 * 3 winter vs spring-summer 1 0.6851336 2.557042 0.05376789 0.003 0.009 * 6.5.4 NMDS set.seed(123) beta_q1n_nmds &lt;- beta_q1n %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(sample !=&quot;EHI00420&quot;) #remove outlier Run 0 stress 0.1016318 Run 1 stress 0.1013189 ... New best solution ... Procrustes: rmse 0.009069585 max resid 0.02041095 Run 2 stress 0.1013613 ... Procrustes: rmse 0.003997097 max resid 0.02798158 Run 3 stress 0.1012846 ... New best solution ... Procrustes: rmse 0.003963242 max resid 0.0172347 Run 4 stress 0.1013085 ... Procrustes: rmse 0.001712222 max resid 0.00386435 ... Similar to previous best Run 5 stress 0.101314 ... Procrustes: rmse 0.005714814 max resid 0.03044362 Run 6 stress 0.1015829 ... Procrustes: rmse 0.009630636 max resid 0.02098467 Run 7 stress 0.1012829 ... New best solution ... Procrustes: rmse 0.00553217 max resid 0.0154394 Run 8 stress 0.1013095 ... Procrustes: rmse 0.003752119 max resid 0.01947313 Run 9 stress 0.1013222 ... Procrustes: rmse 0.002207572 max resid 0.01525112 Run 10 stress 0.1013197 ... Procrustes: rmse 0.005363129 max resid 0.0168937 Run 11 stress 0.1012935 ... Procrustes: rmse 0.005274631 max resid 0.01220582 Run 12 stress 0.1013797 ... Procrustes: rmse 0.008738029 max resid 0.01943643 Run 13 stress 0.1013619 ... Procrustes: rmse 0.009081938 max resid 0.02036902 Run 14 stress 0.1012629 ... New best solution ... Procrustes: rmse 0.004061658 max resid 0.0134325 Run 15 stress 0.1013488 ... Procrustes: rmse 0.002814526 max resid 0.02595103 Run 16 stress 0.1012838 ... Procrustes: rmse 0.004116573 max resid 0.01349274 Run 17 stress 0.101267 ... Procrustes: rmse 0.002697549 max resid 0.006346965 ... Similar to previous best Run 18 stress 0.1013075 ... Procrustes: rmse 0.002695899 max resid 0.02674283 Run 19 stress 0.1012777 ... Procrustes: rmse 0.003342746 max resid 0.01242691 Run 20 stress 0.1017937 *** Best solution repeated 1 times #stressplot(beta_q1n_nmds) env &lt;- beta_q1n_nmds %&gt;% select(species, season, index500) nmds &lt;- beta_q1n_nmds %&gt;% select(NMDS1, NMDS2) en &lt;- envfit(nmds, env, permutations = 999, na.rm = TRUE) en ***VECTORS NMDS1 NMDS2 r2 Pr(&gt;r) index500 0.51253 0.85867 0.046 0.016 * --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Permutation: free Number of permutations: 999 ***FACTORS: Centroids: NMDS1 NMDS2 speciesSciurus carolinensis -0.0121 -0.0045 speciesSciurus vulgaris -0.0001 0.0033 seasonspring-summer -0.0031 -0.0020 seasonautumn -0.0062 0.0009 seasonwinter -0.0062 0.0010 Goodness of fit: r2 Pr(&gt;r) species 0.5699 0.001 *** season 0.0442 0.002 ** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Permutation: free Number of permutations: 999 plot(nmds) + plot(en) integer(0) ordisurf(x = nmds, y = env$index500, bubble = 4) Family: gaussian Link function: identity Formula: y ~ s(x1, x2, k = 10, bs = &quot;tp&quot;, fx = FALSE) Estimated degrees of freedom: 5.38 total = 6.38 REML score: 10.08165 # make dataframe with vector to add to ggplot vec.df &lt;- as.data.frame(en$vectors$arrows*sqrt(en$vectors$r)) vec.df$variables &lt;- rownames(vec.df) beta_q1n_nmds %&gt;% group_by(species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x = NMDS1, y = NMDS2)) + scale_colour_manual(values = squirrel_colors) + #scale_fill_manual(values = squirrel_colors) + geom_point(size = 3, alpha=0.8, aes(color = species)) + geom_segment(data = vec.df, aes(x = 0, xend = NMDS1*0.1, y = 0, yend = NMDS2*0.1), arrow = arrow(length = unit(0.25, &quot;cm&quot;)), inherit.aes = FALSE, size =0.8, alpha = 0.5, colour = &quot;grey30&quot;) + #stat_ellipse(data=beta_q1n_nmds, aes(x = NMDS1, y = NMDS2, group = species, fill=species),geom=&quot;polygon&quot;,level=0.99,alpha=0.1) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2, color=species), alpha=0.3) + geom_text(data = vec.df, aes(x = NMDS1*0.105, y=NMDS2*0.105, label = variables), size=4) + labs(x = &quot;NMDS1&quot;, y = &quot;NMDS2&quot;) + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) + theme(axis.text = element_text(colour = &quot;black&quot;, face = &quot;bold&quot;, size = 12), axis.title = element_text(face = &quot;bold&quot;, size = 14, colour = &quot;black&quot;), legend.text = element_text(size = 10, face =&quot;bold&quot;, colour =&quot;black&quot;), legend.position = &quot;right&quot;, axis.title.y = element_text(face = &quot;bold&quot;, size = 14), legend.title = element_text(size = 14, colour = &quot;black&quot;, face = &quot;bold&quot;), legend.key=element_blank(), panel.background = element_blank(), panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 1)) 6.5.5 NMDS red set.seed(123) beta_red_nmds &lt;- beta_red %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(sample !=&quot;EHI00420&quot;) #remove outliers Run 0 stress 0.1321641 Run 1 stress 0.1319855 ... New best solution ... Procrustes: rmse 0.005420164 max resid 0.04407277 Run 2 stress 0.1320328 ... Procrustes: rmse 0.01100574 max resid 0.02326179 Run 3 stress 0.1321775 ... Procrustes: rmse 0.01341287 max resid 0.03013639 Run 4 stress 0.132208 ... Procrustes: rmse 0.01325317 max resid 0.04322976 Run 5 stress 0.1321926 ... Procrustes: rmse 0.006986766 max resid 0.04190249 Run 6 stress 0.1324738 ... Procrustes: rmse 0.01063747 max resid 0.04020113 Run 7 stress 0.1321764 ... Procrustes: rmse 0.01220579 max resid 0.03014066 Run 8 stress 0.1319469 ... New best solution ... Procrustes: rmse 0.005222319 max resid 0.02248554 Run 9 stress 0.1320277 ... Procrustes: rmse 0.005092386 max resid 0.01939589 Run 10 stress 0.1321052 ... Procrustes: rmse 0.0129258 max resid 0.04330607 Run 11 stress 0.1324577 Run 12 stress 0.1324256 ... Procrustes: rmse 0.006386475 max resid 0.02979972 Run 13 stress 0.1321762 ... Procrustes: rmse 0.007297115 max resid 0.03675673 Run 14 stress 0.1321285 ... Procrustes: rmse 0.006539516 max resid 0.02488627 Run 15 stress 0.1321557 ... Procrustes: rmse 0.007230161 max resid 0.04447298 Run 16 stress 0.1320257 ... Procrustes: rmse 0.009439829 max resid 0.0284096 Run 17 stress 0.1320271 ... Procrustes: rmse 0.003660199 max resid 0.02586423 Run 18 stress 0.1323024 ... Procrustes: rmse 0.00443947 max resid 0.02959706 Run 19 stress 0.1321059 ... Procrustes: rmse 0.00523299 max resid 0.04436081 Run 20 stress 0.1324469 Run 21 stress 0.1322124 ... Procrustes: rmse 0.01247265 max resid 0.03059071 Run 22 stress 0.1321245 ... Procrustes: rmse 0.004794655 max resid 0.02616023 Run 23 stress 0.1322246 ... Procrustes: rmse 0.0116795 max resid 0.02937655 Run 24 stress 0.1320746 ... Procrustes: rmse 0.013722 max resid 0.03802058 Run 25 stress 0.1319611 ... Procrustes: rmse 0.00370176 max resid 0.01847284 Run 26 stress 0.1322348 ... Procrustes: rmse 0.006725778 max resid 0.04500788 Run 27 stress 0.1322376 ... Procrustes: rmse 0.006961446 max resid 0.04576185 Run 28 stress 0.1324426 ... Procrustes: rmse 0.00993089 max resid 0.03730153 Run 29 stress 0.1324257 ... Procrustes: rmse 0.01027125 max resid 0.02220532 Run 30 stress 0.13259 Run 31 stress 0.1320952 ... Procrustes: rmse 0.01366326 max resid 0.04203239 Run 32 stress 0.13195 ... Procrustes: rmse 0.002986234 max resid 0.009242069 ... Similar to previous best *** Best solution repeated 1 times #stressplot(beta_q1n_nmds) env &lt;- beta_red_nmds %&gt;% select(index500, season) nmds &lt;- beta_red_nmds %&gt;% select(NMDS1, NMDS2) en &lt;- envfit(nmds, env, permutations = 999, na.rm = TRUE) en ***VECTORS NMDS1 NMDS2 r2 Pr(&gt;r) index500 0.59674 -0.80244 0.0635 0.027 * --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Permutation: free Number of permutations: 999 ***FACTORS: Centroids: NMDS1 NMDS2 seasonspring-summer -0.0043 0.0057 seasonautumn -0.0106 -0.0025 seasonwinter -0.0120 -0.0036 Goodness of fit: r2 Pr(&gt;r) season 0.1441 0.001 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Permutation: free Number of permutations: 999 ordisurf(x = nmds, y = env$index500, bubble = 4) Family: gaussian Link function: identity Formula: y ~ s(x1, x2, k = 10, bs = &quot;tp&quot;, fx = FALSE) Estimated degrees of freedom: 5.11 total = 6.11 REML score: 13.21125 # Make dataframe with vector to add to ggplot vec.df &lt;- as.data.frame(en$vectors$arrows*sqrt(en$vectors$r)) vec.df$variables &lt;- rownames(vec.df) beta_red_nmds %&gt;% group_by(season) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x = NMDS1, y = NMDS2)) + scale_colour_manual(values = season_colors) + scale_fill_manual(values = season_colors) + stat_ellipse(aes(x = NMDS1, y = NMDS2, group = season, color=season, fill=season), geom=&quot;polygon&quot;, alpha=0.15, level=0.90) + geom_point(size = 3, alpha=1, aes(colour = season)) + geom_segment(data = vec.df, aes(x = 0, xend = NMDS1*0.1, y = 0, yend = NMDS2*0.1), arrow = arrow(length = unit(0.25, &quot;cm&quot;)), inherit.aes = FALSE, size =0.8, alpha = 0.5, colour = &quot;grey30&quot;) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2, color=season), alpha=0.3) + geom_text(data = vec.df, aes(x = NMDS1*0.11, y=NMDS2*0.11, label = variables), size=4) + labs(x = &quot;NMDS1&quot;, y = &quot;NMDS2&quot;, color = &quot;Season&quot;) + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) + theme(axis.text = element_text(colour = &quot;black&quot;, face = &quot;bold&quot;, size = 12), axis.title = element_text(face = &quot;bold&quot;, size = 14, colour = &quot;black&quot;), legend.text = element_text(size = 10, face =&quot;bold&quot;, colour =&quot;black&quot;), legend.position = &quot;right&quot;, axis.title.y = element_text(face = &quot;bold&quot;, size = 14), legend.title = element_text(size = 14, colour = &quot;black&quot;, face = &quot;bold&quot;), legend.key=element_blank(), panel.background = element_blank(), panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 1.2)) 6.5.6 NMDS grey #prova NMDS with vector for index500 set.seed(123) beta_grey_nmds &lt;- beta_grey %&gt;% metaMDS(.,trymax = 900, k=2, verbosity=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% filter(sample !=&quot;EHI00420&quot;) #remove outliers Run 0 stress 0.1825547 Run 1 stress 0.2177445 Run 2 stress 0.2319363 Run 3 stress 0.1954367 Run 4 stress 0.2006027 Run 5 stress 0.1858147 Run 6 stress 0.1826924 ... Procrustes: rmse 0.02730437 max resid 0.1574189 Run 7 stress 0.228309 Run 8 stress 0.2209958 Run 9 stress 0.2146286 Run 10 stress 0.215236 Run 11 stress 0.1858996 Run 12 stress 0.1950761 Run 13 stress 0.2374197 Run 14 stress 0.2163505 Run 15 stress 0.1859637 Run 16 stress 0.1825678 ... Procrustes: rmse 0.02535733 max resid 0.1182604 Run 17 stress 0.2217753 Run 18 stress 0.1825592 ... Procrustes: rmse 0.02613107 max resid 0.1285306 Run 19 stress 0.1979694 Run 20 stress 0.2139256 Run 21 stress 0.2351169 Run 22 stress 0.2088513 Run 23 stress 0.1949675 Run 24 stress 0.1976675 Run 25 stress 0.2066504 Run 26 stress 0.1847074 Run 27 stress 0.1889076 Run 28 stress 0.1967522 Run 29 stress 0.1885689 Run 30 stress 0.2278705 Run 31 stress 0.1812038 ... New best solution ... Procrustes: rmse 0.02096959 max resid 0.1175264 Run 32 stress 0.2234249 Run 33 stress 0.2191081 Run 34 stress 0.1820638 Run 35 stress 0.2031441 Run 36 stress 0.1847538 Run 37 stress 0.2221954 Run 38 stress 0.195428 Run 39 stress 0.2240797 Run 40 stress 0.2265508 Run 41 stress 0.1824467 Run 42 stress 0.1852982 Run 43 stress 0.231506 Run 44 stress 0.1827928 Run 45 stress 0.2210401 Run 46 stress 0.2269018 Run 47 stress 0.1899798 Run 48 stress 0.2080271 Run 49 stress 0.1932287 Run 50 stress 0.213746 Run 51 stress 0.1871621 Run 52 stress 0.1855542 Run 53 stress 0.1838039 Run 54 stress 0.1838575 Run 55 stress 0.2347824 Run 56 stress 0.1974383 Run 57 stress 0.2081427 Run 58 stress 0.2347205 Run 59 stress 0.2284638 Run 60 stress 0.2242928 Run 61 stress 0.1838992 Run 62 stress 0.2181426 Run 63 stress 0.2114892 Run 64 stress 0.1840694 Run 65 stress 0.1950007 Run 66 stress 0.185796 Run 67 stress 0.2319874 Run 68 stress 0.2116283 Run 69 stress 0.2170741 Run 70 stress 0.2352415 Run 71 stress 0.1977112 Run 72 stress 0.2266008 Run 73 stress 0.2201873 Run 74 stress 0.2107582 Run 75 stress 0.2279032 Run 76 stress 0.2146498 Run 77 stress 0.2101386 Run 78 stress 0.1866139 Run 79 stress 0.2175551 Run 80 stress 0.2256976 Run 81 stress 0.2062877 Run 82 stress 0.2127436 Run 83 stress 0.1852678 Run 84 stress 0.183364 Run 85 stress 0.2227288 Run 86 stress 0.1833704 Run 87 stress 0.227093 Run 88 stress 0.1821391 Run 89 stress 0.2326901 Run 90 stress 0.230982 Run 91 stress 0.196532 Run 92 stress 0.2161895 Run 93 stress 0.1956788 Run 94 stress 0.2174628 Run 95 stress 0.223995 Run 96 stress 0.1973247 Run 97 stress 0.1950318 Run 98 stress 0.1957158 Run 99 stress 0.2233025 Run 100 stress 0.1973253 Run 101 stress 0.1838082 Run 102 stress 0.1837958 Run 103 stress 0.2297733 Run 104 stress 0.1811904 ... New best solution ... Procrustes: rmse 0.01757587 max resid 0.1183128 Run 105 stress 0.2318016 Run 106 stress 0.2147889 Run 107 stress 0.2284487 Run 108 stress 0.2151997 Run 109 stress 0.1938102 Run 110 stress 0.1978523 Run 111 stress 0.2202748 Run 112 stress 0.1867654 Run 113 stress 0.189093 Run 114 stress 0.1973642 Run 115 stress 0.1991543 Run 116 stress 0.1834381 Run 117 stress 0.1806175 ... New best solution ... Procrustes: rmse 0.04866986 max resid 0.3864777 Run 118 stress 0.1860961 Run 119 stress 0.2265607 Run 120 stress 0.1881252 Run 121 stress 0.23476 Run 122 stress 0.1850282 Run 123 stress 0.1887594 Run 124 stress 0.1860438 Run 125 stress 0.2026553 Run 126 stress 0.2289507 Run 127 stress 0.2175872 Run 128 stress 0.230436 Run 129 stress 0.2279184 Run 130 stress 0.1886827 Run 131 stress 0.2178041 Run 132 stress 0.1957332 Run 133 stress 0.2241198 Run 134 stress 0.2254574 Run 135 stress 0.2319769 Run 136 stress 0.1961721 Run 137 stress 0.2263273 Run 138 stress 0.1842266 Run 139 stress 0.1844275 Run 140 stress 0.2049404 Run 141 stress 0.2060503 Run 142 stress 0.2246372 Run 143 stress 0.1880762 Run 144 stress 0.1836748 Run 145 stress 0.2121836 Run 146 stress 0.1888634 Run 147 stress 0.2266185 Run 148 stress 0.2206223 Run 149 stress 0.2291427 Run 150 stress 0.1953273 Run 151 stress 0.2060919 Run 152 stress 0.2152433 Run 153 stress 0.1801923 ... New best solution ... Procrustes: rmse 0.01073664 max resid 0.07624164 Run 154 stress 0.2082022 Run 155 stress 0.2104171 Run 156 stress 0.2188323 Run 157 stress 0.1985719 Run 158 stress 0.1853001 Run 159 stress 0.2155088 Run 160 stress 0.2389749 Run 161 stress 0.2331084 Run 162 stress 0.2249126 Run 163 stress 0.2164884 Run 164 stress 0.2164101 Run 165 stress 0.2128824 Run 166 stress 0.2163175 Run 167 stress 0.1893768 Run 168 stress 0.2325779 Run 169 stress 0.210398 Run 170 stress 0.2324763 Run 171 stress 0.19332 Run 172 stress 0.1810249 Run 173 stress 0.2329262 Run 174 stress 0.2374494 Run 175 stress 0.2270028 Run 176 stress 0.1836793 Run 177 stress 0.2229386 Run 178 stress 0.2271494 Run 179 stress 0.1891774 Run 180 stress 0.2267779 Run 181 stress 0.2206336 Run 182 stress 0.2036288 Run 183 stress 0.2119156 Run 184 stress 0.221859 Run 185 stress 0.1846688 Run 186 stress 0.2309797 Run 187 stress 0.1820638 Run 188 stress 0.1820905 Run 189 stress 0.2054649 Run 190 stress 0.2225913 Run 191 stress 0.2215298 Run 192 stress 0.2042007 Run 193 stress 0.2053911 Run 194 stress 0.1896833 Run 195 stress 0.1901145 Run 196 stress 0.2315771 Run 197 stress 0.2058096 Run 198 stress 0.1937087 Run 199 stress 0.2215877 Run 200 stress 0.2306595 Run 201 stress 0.2227633 Run 202 stress 0.2198812 Run 203 stress 0.2277893 Run 204 stress 0.2172819 Run 205 stress 0.2077068 Run 206 stress 0.2232959 Run 207 stress 0.226382 Run 208 stress 0.1845559 Run 209 stress 0.1836791 Run 210 stress 0.1970894 Run 211 stress 0.230395 Run 212 stress 0.1823607 Run 213 stress 0.2115866 Run 214 stress 0.18522 Run 215 stress 0.1955325 Run 216 stress 0.1938805 Run 217 stress 0.1860374 Run 218 stress 0.233902 Run 219 stress 0.2217326 Run 220 stress 0.1852383 Run 221 stress 0.2093702 Run 222 stress 0.2269076 Run 223 stress 0.1855653 Run 224 stress 0.1957118 Run 225 stress 0.1969168 Run 226 stress 0.2340282 Run 227 stress 0.2347982 Run 228 stress 0.1940993 Run 229 stress 0.1834403 Run 230 stress 0.1863287 Run 231 stress 0.2239278 Run 232 stress 0.2190211 Run 233 stress 0.185903 Run 234 stress 0.2279132 Run 235 stress 0.2117138 Run 236 stress 0.1838121 Run 237 stress 0.2260401 Run 238 stress 0.227648 Run 239 stress 0.1810099 Run 240 stress 0.2311034 Run 241 stress 0.1954819 Run 242 stress 0.2091293 Run 243 stress 0.1840234 Run 244 stress 0.1864423 Run 245 stress 0.1830063 Run 246 stress 0.1829313 Run 247 stress 0.1840306 Run 248 stress 0.2040067 Run 249 stress 0.2327777 Run 250 stress 0.1936268 Run 251 stress 0.1995665 Run 252 stress 0.1892302 Run 253 stress 0.1945825 Run 254 stress 0.1894184 Run 255 stress 0.2075571 Run 256 stress 0.1821391 Run 257 stress 0.1865078 Run 258 stress 0.1830801 Run 259 stress 0.2231924 Run 260 stress 0.188233 Run 261 stress 0.2132988 Run 262 stress 0.1831092 Run 263 stress 0.1959675 Run 264 stress 0.2325719 Run 265 stress 0.2292266 Run 266 stress 0.2201479 Run 267 stress 0.2037878 Run 268 stress 0.1952265 Run 269 stress 0.1829781 Run 270 stress 0.23303 Run 271 stress 0.2212275 Run 272 stress 0.1947027 Run 273 stress 0.2325571 Run 274 stress 0.2266765 Run 275 stress 0.2301407 Run 276 stress 0.221726 Run 277 stress 0.2279825 Run 278 stress 0.1836941 Run 279 stress 0.2302208 Run 280 stress 0.2264258 Run 281 stress 0.1831449 Run 282 stress 0.2306874 Run 283 stress 0.2254673 Run 284 stress 0.2129175 Run 285 stress 0.2111383 Run 286 stress 0.2183629 Run 287 stress 0.202545 Run 288 stress 0.218841 Run 289 stress 0.1956818 Run 290 stress 0.2250964 Run 291 stress 0.2224975 Run 292 stress 0.1843677 Run 293 stress 0.2178253 Run 294 stress 0.1965449 Run 295 stress 0.1828377 Run 296 stress 0.1831449 Run 297 stress 0.1895162 Run 298 stress 0.2257018 Run 299 stress 0.195286 Run 300 stress 0.1836746 Run 301 stress 0.1838115 Run 302 stress 0.2225737 Run 303 stress 0.1838082 Run 304 stress 0.1941615 Run 305 stress 0.1820756 Run 306 stress 0.2219874 Run 307 stress 0.2150472 Run 308 stress 0.1826907 Run 309 stress 0.1928509 Run 310 stress 0.181174 Run 311 stress 0.2290372 Run 312 stress 0.2071288 Run 313 stress 0.2301165 Run 314 stress 0.1862911 Run 315 stress 0.2111516 Run 316 stress 0.1958006 Run 317 stress 0.2080644 Run 318 stress 0.1868473 Run 319 stress 0.1892823 Run 320 stress 0.1943002 Run 321 stress 0.2299602 Run 322 stress 0.203013 Run 323 stress 0.2248507 Run 324 stress 0.2193342 Run 325 stress 0.2334935 Run 326 stress 0.2319016 Run 327 stress 0.1897211 Run 328 stress 0.1828522 Run 329 stress 0.2172534 Run 330 stress 0.2011041 Run 331 stress 0.1986598 Run 332 stress 0.2268429 Run 333 stress 0.1893163 Run 334 stress 0.1977728 Run 335 stress 0.2108618 Run 336 stress 0.2222338 Run 337 stress 0.2292685 Run 338 stress 0.1958006 Run 339 stress 0.1977696 Run 340 stress 0.1974122 Run 341 stress 0.2140529 Run 342 stress 0.2031372 Run 343 stress 0.2030112 Run 344 stress 0.2294401 Run 345 stress 0.2366864 Run 346 stress 0.2204325 Run 347 stress 0.213935 Run 348 stress 0.2180813 Run 349 stress 0.1820639 Run 350 stress 0.2316597 Run 351 stress 0.2113943 Run 352 stress 0.1852232 Run 353 stress 0.2030763 Run 354 stress 0.1970739 Run 355 stress 0.1836839 Run 356 stress 0.183804 Run 357 stress 0.2223326 Run 358 stress 0.2236807 Run 359 stress 0.1928926 Run 360 stress 0.2218731 Run 361 stress 0.2024264 Run 362 stress 0.1820756 Run 363 stress 0.1840101 Run 364 stress 0.1845979 Run 365 stress 0.1900473 Run 366 stress 0.2082272 Run 367 stress 0.1832019 Run 368 stress 0.2319035 Run 369 stress 0.2145269 Run 370 stress 0.1957119 Run 371 stress 0.189047 Run 372 stress 0.1872568 Run 373 stress 0.2136727 Run 374 stress 0.2181435 Run 375 stress 0.1983018 Run 376 stress 0.1852749 Run 377 stress 0.1836942 Run 378 stress 0.2204034 Run 379 stress 0.182838 Run 380 stress 0.1845296 Run 381 stress 0.1850839 Run 382 stress 0.2202815 Run 383 stress 0.1836693 Run 384 stress 0.1856536 Run 385 stress 0.1886632 Run 386 stress 0.2280261 Run 387 stress 0.2043961 Run 388 stress 0.2227839 Run 389 stress 0.4096068 Run 390 stress 0.212141 Run 391 stress 0.1842546 Run 392 stress 0.2316314 Run 393 stress 0.1825495 Run 394 stress 0.2261519 Run 395 stress 0.1858961 Run 396 stress 0.2165715 Run 397 stress 0.2222835 Run 398 stress 0.2303623 Run 399 stress 0.2287619 Run 400 stress 0.1857144 Run 401 stress 0.1885342 Run 402 stress 0.2246063 Run 403 stress 0.2263873 Run 404 stress 0.1825166 Run 405 stress 0.2327949 Run 406 stress 0.1896258 Run 407 stress 0.1965666 Run 408 stress 0.2362739 Run 409 stress 0.1934611 Run 410 stress 0.2049141 Run 411 stress 0.1946389 Run 412 stress 0.1905726 Run 413 stress 0.1831449 Run 414 stress 0.1928926 Run 415 stress 0.1852559 Run 416 stress 0.2304255 Run 417 stress 0.2327022 Run 418 stress 0.2146491 Run 419 stress 0.1835446 Run 420 stress 0.1806495 ... Procrustes: rmse 0.009758406 max resid 0.07269543 Run 421 stress 0.225264 Run 422 stress 0.1932251 Run 423 stress 0.1890969 Run 424 stress 0.2142624 Run 425 stress 0.2067443 Run 426 stress 0.1840592 Run 427 stress 0.2339239 Run 428 stress 0.1806353 ... Procrustes: rmse 0.01100496 max resid 0.07732298 Run 429 stress 0.2300872 Run 430 stress 0.2351031 Run 431 stress 0.1820905 Run 432 stress 0.2232112 Run 433 stress 0.2237933 Run 434 stress 0.2293493 Run 435 stress 0.1802738 ... Procrustes: rmse 0.004088331 max resid 0.02723649 Run 436 stress 0.2001574 Run 437 stress 0.2193698 Run 438 stress 0.2102341 Run 439 stress 0.2019172 Run 440 stress 0.2017039 Run 441 stress 0.1958106 Run 442 stress 0.1957336 Run 443 stress 0.1890611 Run 444 stress 0.2257305 Run 445 stress 0.2197737 Run 446 stress 0.1810898 Run 447 stress 0.2323065 Run 448 stress 0.2297559 Run 449 stress 0.2105812 Run 450 stress 0.2338302 Run 451 stress 0.2197605 Run 452 stress 0.1965913 Run 453 stress 0.2248096 Run 454 stress 0.2213651 Run 455 stress 0.2234499 Run 456 stress 0.2369819 Run 457 stress 0.1979645 Run 458 stress 0.224133 Run 459 stress 0.2253472 Run 460 stress 0.2322798 Run 461 stress 0.184474 Run 462 stress 0.2216563 Run 463 stress 0.2345237 Run 464 stress 0.2133019 Run 465 stress 0.1993426 Run 466 stress 0.1825755 Run 467 stress 0.2352721 Run 468 stress 0.2338903 Run 469 stress 0.2287279 Run 470 stress 0.2168403 Run 471 stress 0.2113468 Run 472 stress 0.2319567 Run 473 stress 0.2288455 Run 474 stress 0.1999665 Run 475 stress 0.18467 Run 476 stress 0.2355857 Run 477 stress 0.1873605 Run 478 stress 0.1821391 Run 479 stress 0.2305613 Run 480 stress 0.1972425 Run 481 stress 0.2326032 Run 482 stress 0.1854337 Run 483 stress 0.2105627 Run 484 stress 0.18067 ... Procrustes: rmse 0.01005763 max resid 0.07417879 Run 485 stress 0.1840293 Run 486 stress 0.1946205 Run 487 stress 0.2307518 Run 488 stress 0.1826905 Run 489 stress 0.2097087 Run 490 stress 0.1840759 Run 491 stress 0.2234427 Run 492 stress 0.1836942 Run 493 stress 0.210294 Run 494 stress 0.2083327 Run 495 stress 0.2196892 Run 496 stress 0.2315443 Run 497 stress 0.1820905 Run 498 stress 0.1864841 Run 499 stress 0.1864582 Run 500 stress 0.1836942 Run 501 stress 0.2336935 Run 502 stress 0.2347751 Run 503 stress 0.1836796 Run 504 stress 0.1992282 Run 505 stress 0.2176994 Run 506 stress 0.2338266 Run 507 stress 0.1834382 Run 508 stress 0.1889418 Run 509 stress 0.1990498 Run 510 stress 0.2201583 Run 511 stress 0.2194866 Run 512 stress 0.1838082 Run 513 stress 0.2032834 Run 514 stress 0.2219296 Run 515 stress 0.2201768 Run 516 stress 0.2252596 Run 517 stress 0.2228351 Run 518 stress 0.2025512 Run 519 stress 0.2263613 Run 520 stress 0.182698 Run 521 stress 0.2357235 Run 522 stress 0.2317236 Run 523 stress 0.1852284 Run 524 stress 0.2222067 Run 525 stress 0.2334055 Run 526 stress 0.2259259 Run 527 stress 0.1940311 Run 528 stress 0.2285535 Run 529 stress 0.1985116 Run 530 stress 0.204059 Run 531 stress 0.1801734 ... New best solution ... Procrustes: rmse 0.002511871 max resid 0.01618351 Run 532 stress 0.2258328 Run 533 stress 0.2347017 Run 534 stress 0.2015022 Run 535 stress 0.2289913 Run 536 stress 0.2223286 Run 537 stress 0.2284704 Run 538 stress 0.213489 Run 539 stress 0.2127863 Run 540 stress 0.1834059 Run 541 stress 0.220582 Run 542 stress 0.2342115 Run 543 stress 0.2320528 Run 544 stress 0.1824872 Run 545 stress 0.190076 Run 546 stress 0.1852583 Run 547 stress 0.207401 Run 548 stress 0.2239557 Run 549 stress 0.2289367 Run 550 stress 0.2299847 Run 551 stress 0.1889438 Run 552 stress 0.2081974 Run 553 stress 0.2198518 Run 554 stress 0.23188 Run 555 stress 0.1814784 Run 556 stress 0.2083857 Run 557 stress 0.2297553 Run 558 stress 0.1937852 Run 559 stress 0.1828075 Run 560 stress 0.2261982 Run 561 stress 0.1831631 Run 562 stress 0.2259653 Run 563 stress 0.1894653 Run 564 stress 0.185261 Run 565 stress 0.2225044 Run 566 stress 0.2260957 Run 567 stress 0.1854661 Run 568 stress 0.2174417 Run 569 stress 0.22901 Run 570 stress 0.185442 Run 571 stress 0.1886187 Run 572 stress 0.2084441 Run 573 stress 0.2334782 Run 574 stress 0.2147531 Run 575 stress 0.2180595 Run 576 stress 0.2204374 Run 577 stress 0.2309016 Run 578 stress 0.219585 Run 579 stress 0.1995925 Run 580 stress 0.2070916 Run 581 stress 0.1826924 Run 582 stress 0.1842365 Run 583 stress 0.1979117 Run 584 stress 0.1853331 Run 585 stress 0.2338052 Run 586 stress 0.2130103 Run 587 stress 0.1969157 Run 588 stress 0.1815009 Run 589 stress 0.2299673 Run 590 stress 0.1834065 Run 591 stress 0.2026844 Run 592 stress 0.2045467 Run 593 stress 0.2082873 Run 594 stress 0.2186206 Run 595 stress 0.2285697 Run 596 stress 0.2202729 Run 597 stress 0.1830313 Run 598 stress 0.1840241 Run 599 stress 0.2324137 Run 600 stress 0.2130387 Run 601 stress 0.1827533 Run 602 stress 0.2284074 Run 603 stress 0.1983851 Run 604 stress 0.200394 Run 605 stress 0.1865617 Run 606 stress 0.2263908 Run 607 stress 0.2089568 Run 608 stress 0.1860426 Run 609 stress 0.2183805 Run 610 stress 0.2345793 Run 611 stress 0.2271671 Run 612 stress 0.1814756 Run 613 stress 0.1860961 Run 614 stress 0.2283011 Run 615 stress 0.1890743 Run 616 stress 0.2295344 Run 617 stress 0.2249215 Run 618 stress 0.2131716 Run 619 stress 0.2221203 Run 620 stress 0.1820638 Run 621 stress 0.1825501 Run 622 stress 0.2299878 Run 623 stress 0.2270202 Run 624 stress 0.2195966 Run 625 stress 0.2246808 Run 626 stress 0.1958006 Run 627 stress 0.2223238 Run 628 stress 0.1893021 Run 629 stress 0.1946954 Run 630 stress 0.1852703 Run 631 stress 0.2275253 Run 632 stress 0.2199003 Run 633 stress 0.1947763 Run 634 stress 0.2274479 Run 635 stress 0.1827914 Run 636 stress 0.1893467 Run 637 stress 0.184007 Run 638 stress 0.2073032 Run 639 stress 0.2307712 Run 640 stress 0.1971417 Run 641 stress 0.1860011 Run 642 stress 0.1898113 Run 643 stress 0.1824068 Run 644 stress 0.2228175 Run 645 stress 0.2253904 Run 646 stress 0.2102993 Run 647 stress 0.2186964 Run 648 stress 0.2175493 Run 649 stress 0.1842521 Run 650 stress 0.1862965 Run 651 stress 0.183283 Run 652 stress 0.2267209 Run 653 stress 0.2345894 Run 654 stress 0.2083014 Run 655 stress 0.1945236 Run 656 stress 0.2227706 Run 657 stress 0.221374 Run 658 stress 0.2287415 Run 659 stress 0.2269931 Run 660 stress 0.2238481 Run 661 stress 0.1907618 Run 662 stress 0.2319282 Run 663 stress 0.2254169 Run 664 stress 0.188626 Run 665 stress 0.2019124 Run 666 stress 0.1943477 Run 667 stress 0.1967491 Run 668 stress 0.2344698 Run 669 stress 0.2159726 Run 670 stress 0.2262198 Run 671 stress 0.1812051 Run 672 stress 0.1890825 Run 673 stress 0.1830063 Run 674 stress 0.2337435 Run 675 stress 0.2222658 Run 676 stress 0.2051201 Run 677 stress 0.1973277 Run 678 stress 0.1812038 Run 679 stress 0.2301979 Run 680 stress 0.2260744 Run 681 stress 0.1860247 Run 682 stress 0.2313889 Run 683 stress 0.2225281 Run 684 stress 0.2158331 Run 685 stress 0.2035405 Run 686 stress 0.2147278 Run 687 stress 0.2250517 Run 688 stress 0.2126339 Run 689 stress 0.2285683 Run 690 stress 0.2270601 Run 691 stress 0.2182419 Run 692 stress 0.1948578 Run 693 stress 0.2331756 Run 694 stress 0.1850839 Run 695 stress 0.2302821 Run 696 stress 0.1880345 Run 697 stress 0.232474 Run 698 stress 0.1848709 Run 699 stress 0.2207522 Run 700 stress 0.2221921 Run 701 stress 0.1836769 Run 702 stress 0.1861757 Run 703 stress 0.1949518 Run 704 stress 0.1840545 Run 705 stress 0.2122516 Run 706 stress 0.1882171 Run 707 stress 0.1864517 Run 708 stress 0.1928503 Run 709 stress 0.2338799 Run 710 stress 0.2111797 Run 711 stress 0.1828974 Run 712 stress 0.1946452 Run 713 stress 0.2219563 Run 714 stress 0.229117 Run 715 stress 0.2255666 Run 716 stress 0.2180457 Run 717 stress 0.1830801 Run 718 stress 0.2040033 Run 719 stress 0.2306534 Run 720 stress 0.1980816 Run 721 stress 0.1822065 Run 722 stress 0.2017187 Run 723 stress 0.1828556 Run 724 stress 0.1948847 Run 725 stress 0.1823081 Run 726 stress 0.2087529 Run 727 stress 0.2021262 Run 728 stress 0.1815013 Run 729 stress 0.1919853 Run 730 stress 0.2026785 Run 731 stress 0.2224148 Run 732 stress 0.2153642 Run 733 stress 0.2307431 Run 734 stress 0.1853083 Run 735 stress 0.1862965 Run 736 stress 0.1823948 Run 737 stress 0.1856582 Run 738 stress 0.2273805 Run 739 stress 0.1864571 Run 740 stress 0.1983486 Run 741 stress 0.232609 Run 742 stress 0.2334819 Run 743 stress 0.1979364 Run 744 stress 0.2281466 Run 745 stress 0.2330898 Run 746 stress 0.1864047 Run 747 stress 0.1981981 Run 748 stress 0.2109379 Run 749 stress 0.2176192 Run 750 stress 0.1815014 Run 751 stress 0.1893362 Run 752 stress 0.182929 Run 753 stress 0.1860203 Run 754 stress 0.221028 Run 755 stress 0.2272331 Run 756 stress 0.2002033 Run 757 stress 0.2281091 Run 758 stress 0.1821391 Run 759 stress 0.1899683 Run 760 stress 0.1971204 Run 761 stress 0.2009275 Run 762 stress 0.1826178 Run 763 stress 0.181431 Run 764 stress 0.2126195 Run 765 stress 0.1953797 Run 766 stress 0.200921 Run 767 stress 0.1853083 Run 768 stress 0.1861328 Run 769 stress 0.2129464 Run 770 stress 0.2202083 Run 771 stress 0.2274816 Run 772 stress 0.2032633 Run 773 stress 0.1937055 Run 774 stress 0.1972167 Run 775 stress 0.1823611 Run 776 stress 0.1833944 Run 777 stress 0.2167222 Run 778 stress 0.2276808 Run 779 stress 0.2342876 Run 780 stress 0.2296088 Run 781 stress 0.1914893 Run 782 stress 0.2050691 Run 783 stress 0.2060634 Run 784 stress 0.2287488 Run 785 stress 0.2135951 Run 786 stress 0.1858962 Run 787 stress 0.1830316 Run 788 stress 0.1949538 Run 789 stress 0.229417 Run 790 stress 0.2004852 Run 791 stress 0.1886631 Run 792 stress 0.2261922 Run 793 stress 0.211105 Run 794 stress 0.1867857 Run 795 stress 0.2125505 Run 796 stress 0.2326394 Run 797 stress 0.1978695 Run 798 stress 0.1944313 Run 799 stress 0.1946849 Run 800 stress 0.2160309 Run 801 stress 0.1840102 Run 802 stress 0.1891906 Run 803 stress 0.2244072 Run 804 stress 0.1831449 Run 805 stress 0.2275609 Run 806 stress 0.194648 Run 807 stress 0.1812815 Run 808 stress 0.233973 Run 809 stress 0.1822034 Run 810 stress 0.1842277 Run 811 stress 0.1852384 Run 812 stress 0.2051585 Run 813 stress 0.2234812 Run 814 stress 0.1831633 Run 815 stress 0.2301554 Run 816 stress 0.1928926 Run 817 stress 0.213265 Run 818 stress 0.2293131 Run 819 stress 0.2320673 Run 820 stress 0.1959722 Run 821 stress 0.2052173 Run 822 stress 0.186074 Run 823 stress 0.2326727 Run 824 stress 0.2243955 Run 825 stress 0.2359001 Run 826 stress 0.2294493 Run 827 stress 0.2295819 Run 828 stress 0.2302776 Run 829 stress 0.1832901 Run 830 stress 0.1825076 Run 831 stress 0.2114302 Run 832 stress 0.1985985 Run 833 stress 0.1957774 Run 834 stress 0.228054 Run 835 stress 0.1855014 Run 836 stress 0.186878 Run 837 stress 0.2322195 Run 838 stress 0.2221773 Run 839 stress 0.2356728 Run 840 stress 0.2329727 Run 841 stress 0.1878832 Run 842 stress 0.2240975 Run 843 stress 0.1864423 Run 844 stress 0.2345102 Run 845 stress 0.2349224 Run 846 stress 0.1815967 Run 847 stress 0.1854354 Run 848 stress 0.2335947 Run 849 stress 0.2294846 Run 850 stress 0.2354455 Run 851 stress 0.2268247 Run 852 stress 0.208831 Run 853 stress 0.2179718 Run 854 stress 0.2329662 Run 855 stress 0.1872652 Run 856 stress 0.2207664 Run 857 stress 0.2138139 Run 858 stress 0.2147911 Run 859 stress 0.4088437 Run 860 stress 0.1943571 Run 861 stress 0.1853926 Run 862 stress 0.2172265 Run 863 stress 0.2134268 Run 864 stress 0.1850246 Run 865 stress 0.2269131 Run 866 stress 0.1996594 Run 867 stress 0.2334381 Run 868 stress 0.2303185 Run 869 stress 0.1943311 Run 870 stress 0.1803926 ... Procrustes: rmse 0.005994364 max resid 0.0259979 Run 871 stress 0.1823609 Run 872 stress 0.219443 Run 873 stress 0.182568 Run 874 stress 0.2299287 Run 875 stress 0.2242927 Run 876 stress 0.2111566 Run 877 stress 0.1949243 Run 878 stress 0.1872085 Run 879 stress 0.1852544 Run 880 stress 0.2304726 Run 881 stress 0.2194896 Run 882 stress 0.2285512 Run 883 stress 0.2317225 Run 884 stress 0.2245129 Run 885 stress 0.232894 Run 886 stress 0.2065066 Run 887 stress 0.2183976 Run 888 stress 0.1975889 Run 889 stress 0.1862465 Run 890 stress 0.2291475 Run 891 stress 0.2350271 Run 892 stress 0.1934553 Run 893 stress 0.2331866 Run 894 stress 0.2275962 Run 895 stress 0.2175552 Run 896 stress 0.2064808 Run 897 stress 0.1860377 Run 898 stress 0.2030092 Run 899 stress 0.209361 Run 900 stress 0.2254749 *** Best solution was not repeated -- monoMDS stopping criteria: 1: no. of iterations &gt;= maxit 822: stress ratio &gt; sratmax 77: scale factor of the gradient &lt; sfgrmin #stressplot(beta_q1n_nmds) env &lt;- beta_grey_nmds %&gt;% select(index500, season) nmds &lt;- beta_grey_nmds %&gt;% select(NMDS1, NMDS2) en &lt;- envfit(nmds, env, permutations = 999, na.rm = TRUE) en ***VECTORS NMDS1 NMDS2 r2 Pr(&gt;r) index500 -0.54813 0.83639 0.0114 0.654 Permutation: free Number of permutations: 999 ***FACTORS: Centroids: NMDS1 NMDS2 seasonspring-summer 0.0162 -0.0392 seasonautumn -0.0038 0.0388 seasonwinter -0.0092 -0.0167 Goodness of fit: r2 Pr(&gt;r) season 0.019 0.587 Permutation: free Number of permutations: 999 ordisurf(x = nmds, y = env$index500, bubble = 4) Family: gaussian Link function: identity Formula: y ~ s(x1, x2, k = 10, bs = &quot;tp&quot;, fx = FALSE) Estimated degrees of freedom: 0 total = 1 REML score: -7.313303 # Make dataframe with vector to add to ggplot vec.df &lt;- as.data.frame(en$vectors$arrows*sqrt(en$vectors$r)) vec.df$variables &lt;- rownames(vec.df) beta_grey_nmds %&gt;% group_by(season) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x = NMDS1, y = NMDS2)) + geom_point(size = 3, alpha=0.8, aes(colour = season)) + scale_colour_manual(values = season_colors) + geom_segment(data = vec.df, aes(x = 0, xend = NMDS1*0.5, y = 0, yend = NMDS2*0.5), arrow = arrow(length = unit(0.25, &quot;cm&quot;)), inherit.aes = FALSE, size =0.8, alpha = 0.5, colour = &quot;grey30&quot;) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2, color=season), alpha=0.2) + geom_text(data = vec.df, aes(x = NMDS1*0.51, y=NMDS2*0.51, label = variables), size=4) + labs(x = &quot;NMDS1&quot;, y = &quot;NMDS2&quot;, color = &quot;Season&quot;) + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) + theme(axis.text = element_text(colour = &quot;black&quot;, face = &quot;bold&quot;, size = 12), axis.title = element_text(face = &quot;bold&quot;, size = 14, colour = &quot;black&quot;), legend.text = element_text(size = 8, face =&quot;bold&quot;, colour =&quot;black&quot;), legend.position = &quot;right&quot;, axis.title.y = element_text(face = &quot;bold&quot;, size = 14), legend.title = element_text(size = 14, colour = &quot;black&quot;, face = &quot;bold&quot;), legend.key=element_blank(), panel.background = element_blank(), panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 1.2)) "],["functional-analyses.html", "Chapter 7 Functional analyses 7.1 Data preparation 7.2 Genome-specific GIFT profiles 7.3 Element-level community-averaged GIFT profiles 7.4 Function-level community-averaged GIFT profiles 7.5 Domain-level", " Chapter 7 Functional analyses 7.1 Data preparation tss &lt;- function(abund){sweep(abund, 2, colSums(abund), FUN=&quot;/&quot;)} genome_counts &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) genome_kegg &lt;- genome_kegg %&gt;% column_to_rownames(var=&quot;genome&quot;) genome_gifts &lt;- genome_gifts %&gt;% column_to_rownames(var=&quot;genome&quot;) #Get list of present MAGs present_MAGs &lt;- genome_counts %&gt;% filter(rowSums(.[, -1]) != 0) %&gt;% rownames() #Align distillr annotations with present MAGs and remove all-zero and all-one traits present_MAGs &lt;- present_MAGs[present_MAGs %in% rownames(genome_gifts)] genome_gifts_filt &lt;- genome_gifts[present_MAGs,] %&gt;% select_if(~!all(. == 0)) %&gt;% #remove all-zero modules select_if(~!all(. == 1)) #remove all-one modules GIFTs_elements &lt;- genome_gifts_filt #Aggregate element-level GIFTs into the function level GIFTs_functions &lt;- to.functions(GIFTs_elements,GIFT_db) #Aggregate function-level GIFTs into overall Biosynthesis, Degradation and Structural GIFTs GIFTs_domains &lt;- to.domains(GIFTs_functions,GIFT_db) #Get overall metabolic capacity indices per MAG (at the domain level) rowMeans(GIFTs_functions) # averaged at the function level (each function is weighed equally) rowMeans(GIFTs_domains) # averaged at the domain level (each domain is weighed equally) #Get community-weighed average GIFTs per sample # GIFTs_elements_community &lt;- to.community(GIFTs_elements,genome_counts,GIFT_db) # GIFTs_functions_community &lt;- to.community(GIFTs_functions,genome_counts,GIFT_db) # GIFTs_domains_community &lt;- to.community(GIFTs_domains,genome_counts,GIFT_db) GIFTs_elements_community &lt;- genome_counts %&gt;% tss() %&gt;% to.community(GIFTs_elements,.,GIFT_db) GIFTs_functions_community &lt;- genome_counts %&gt;% tss() %&gt;% to.community(GIFTs_functions,.,GIFT_db) GIFTs_domains_community &lt;- genome_counts %&gt;% tss() %&gt;% to.community(GIFTs_domains,.,GIFT_db) GIFTs_elements_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% summarise(MCI = mean(value), sd = sd(value)) # A tibble: 2 × 3 species MCI sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Sciurus carolinensis 0.297 0.0108 2 Sciurus vulgaris 0.327 0.0302 GIFTs_functions_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% summarise(MCI = mean(value), sd = sd(value)) # A tibble: 2 × 3 species MCI sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Sciurus carolinensis 0.311 0.0117 2 Sciurus vulgaris 0.327 0.0375 GIFTs_domains_community %&gt;% rowMeans() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(species) %&gt;% summarise(MCI = mean(value), sd = sd(value)) # A tibble: 2 × 3 species MCI sd &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Sciurus carolinensis 0.325 0.0139 2 Sciurus vulgaris 0.324 0.0512 merge_gift &lt;- GIFTs_domains_community %&gt;% as.data.frame() %&gt;% rownames_to_column(., &quot;sample&quot;) %&gt;% merge(., sample_metadata, by=&quot;sample&quot;) 7.2 Genome-specific GIFT profiles GIFTs_elements %&gt;% as_tibble(., rownames = &quot;MAG&quot;) %&gt;% reshape2::melt() %&gt;% rename(Code_element = variable, GIFT = value) %&gt;% inner_join(GIFT_db,by=&quot;Code_element&quot;) %&gt;% ggplot(., aes(x=Code_element, y=MAG, fill=GIFT, group=Function))+ geom_tile()+ scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_fill_gradientn(limits = c(0,1), colours=brewer.pal(7, &quot;YlGnBu&quot;))+ facet_grid(. ~ Function, scales = &quot;free&quot;, space = &quot;free&quot;)+ theme_grey(base_size=8)+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),strip.text.x = element_text(angle = 90)) Using MAG as id variables Warning in inner_join(., GIFT_db, by = &quot;Code_element&quot;): Detected an unexpected many-to-many relationship between `x` and `y`. ℹ Row 13497 of `x` matches multiple rows in `y`. ℹ Row 1 of `y` matches multiple rows in `x`. ℹ If a many-to-many relationship is expected, set `relationship = &quot;many-to-many&quot;` to silence this warning. 7.3 Element-level community-averaged GIFT profiles GIFTs_elements_community %&gt;% reshape2::melt() %&gt;% rename(sample = Var1, Code_element = Var2, GIFT = value) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(GIFT_db,by=&quot;Code_element&quot;) %&gt;% ggplot(., aes(x=Code_element, y=sample, fill=GIFT))+ geom_tile()+ scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_fill_gradientn(colours=brewer.pal(7, &quot;YlGnBu&quot;))+ theme_grey(base_size=8)+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),strip.text.x = element_text(angle = 90)) + facet_wrap(~species, scales=&quot;free&quot;) Warning in left_join(., GIFT_db, by = &quot;Code_element&quot;): Detected an unexpected many-to-many relationship between `x` and `y`. ℹ Row 1521 of `x` matches multiple rows in `y`. ℹ Row 1 of `y` matches multiple rows in `x`. ℹ If a many-to-many relationship is expected, set `relationship = &quot;many-to-many&quot;` to silence this warning. GIFTs_elements_nmds &lt;- GIFTs_elements_community %&gt;% dist() %&gt;% metaMDS(.,trymax = 500, k=2, verbosity=FALSE) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) Warning in metaMDS(., trymax = 500, k = 2, verbosity = FALSE): stress is (nearly) zero: you may have insufficient data squirrel_colors &lt;- c(&quot;#999999&quot;, &quot;#cc3333&quot;) GIFTs_elements_nmds %&gt;% filter(!(sample==&quot;EHI00420&quot;)) %&gt;% #remove outlier group_by(species) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% ggplot(., aes(x=NMDS1,y=NMDS2, color=species, shape=area_type, label=sample)) + scale_color_manual(values=squirrel_colors) + geom_point(size=2.5) + #geom_text(hjust=2, vjust=0) + geom_segment(aes(x=x_cen, y=y_cen, xend=NMDS1, yend=NMDS2), alpha=0.2) + theme_classic() + theme(legend.position=&quot;right&quot;, legend.box=&quot;vertical&quot;) + guides(color=guide_legend(title=&quot;Species&quot;), shape=guide_legend(title=&quot;Area type&quot;)) 7.4 Function-level community-averaged GIFT profiles # sample_sort &lt;- sample_table %&gt;% # select(sample,species,Area_type) %&gt;% # arrange(species,Area_type) %&gt;% # pull() GIFTs_functions_community %&gt;% reshape2::melt() %&gt;% rename(sample = Var1, Code_function = Var2, GIFT = value) %&gt;% left_join(GIFT_db,by = join_by(Code_function == Code_function)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #mutate(sample=factor(Sample, levels = sample_sort)) %&gt;% ggplot(., aes(x=Function, y=sample, fill=GIFT))+ geom_tile()+ scale_y_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+ scale_fill_gradientn(colours=brewer.pal(7, &quot;YlGnBu&quot;))+ facet_grid(species~., scales=&quot;free&quot;) + theme_grey(base_size=8)+ theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.text.y = element_blank(), strip.text.x = element_text(angle = 90)) species.df &lt;- sample_metadata %&gt;% select(sample, species, animal) #ERROR, needs fixing # GIFTs_functions_community_tt &lt;- GIFTs_functions_community %&gt;% # as.data.frame() %&gt;% # rownames_to_column(&quot;sample&quot;) %&gt;% # left_join(., species.df, by = join_by(sample == sample)) %&gt;% # select(-sample) %&gt;% # pivot_longer(-c(species, animal), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% # group_by(trait) %&gt;% # mutate(model_result = list(lmerTest::lmer(value ~ species + (1 | animal)))) %&gt;% # ungroup() %&gt;% # select(trait,model_result) %&gt;% # unique() %&gt;% # mutate(estimate = map_dbl(model_result, ~broom.mixed::tidy(.) %&gt;% filter(term == &quot;speciesSciuruscarolinensis&quot;) %&gt;% pull(estimate))) %&gt;% # mutate(p_value = map_dbl(model_result, ~broom.mixed::tidy(.) %&gt;% filter(term == &quot;speciesSciuruscarolinensis&quot;) %&gt;% pull(p.value))) %&gt;% # mutate(p_value_adj = p.adjust(p_value, method = &quot;bonferroni&quot;)) %&gt;% # left_join(GIFT_db %&gt;% select(Code_function,Function) %&gt;% unique(),by=join_by(trait==Code_function)) %&gt;% # rename(id=trait,trait=Function) %&gt;% # select(id,trait, estimate, p_value_adj) # # GIFTs_functions_community_tt %&gt;% tt() |&gt; # style_tt( # i = which(GIFTs_functions_community_tt$estimate &lt; 0 &amp; GIFTs_functions_community_tt$p_value_adj &lt; 0.05), # background = &quot;#E5D5B1&quot;) |&gt; # style_tt( # i = which(GIFTs_functions_community_tt$estimate &gt; 0 &amp; GIFTs_functions_community_tt$p_value_adj &lt; 0.05), # background = &quot;#B7BCCE&quot;) GIFTs_functions_community %&gt;% as.data.frame() %&gt;% rownames_to_column(&quot;sample&quot;) %&gt;% left_join(., species.df, by = join_by(sample == sample)) %&gt;% select(-animal) %&gt;% pivot_longer(-c(sample, species), names_to = &quot;trait&quot;, values_to = &quot;value&quot;) %&gt;% mutate(trait = case_when( trait %in% GIFT_db$Code_function ~ GIFT_db$Function[match(trait, GIFT_db$Code_function)], TRUE ~ trait)) %&gt;% mutate(trait=factor(trait,levels=unique(GIFT_db$Function))) %&gt;% ggplot(aes(x=value, y=species, group=species, fill=species, color=species)) + geom_boxplot() + scale_color_manual(name=&quot;species&quot;, breaks=c(&quot;Sciurus carolinensis&quot;,&quot;Sciurus vulgaris&quot;), labels=c(&quot;Sciurus carolinensis&quot;,&quot;Sciurus vulgaris&quot;), values=c(&quot;#999999&quot;, &quot;#cc3333&quot;)) + scale_fill_manual(name=&quot;species&quot;, breaks=c(&quot;Sciurus carolinensis&quot;,&quot;Sciurus vulgaris&quot;), labels=c(&quot;Sciurus carolinensis&quot;,&quot;Sciurus vulgaris&quot;), values=c(&quot;#bfbfbf&quot;, &quot;#db7070&quot;)) + facet_grid(trait ~ ., space=&quot;free&quot;, scales=&quot;free&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.text.y = element_blank(), strip.text.y = element_text(angle = 0)) + labs(y=&quot;Traits&quot;,x=&quot;Metabolic capacity index&quot;) 7.5 Domain-level squirrel_colors &lt;- c(&quot;#999999&quot;, &quot;#cc3333&quot;) #Biosynthesis by species biosynth.species &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Biosynthesis&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Biosynthesis functions&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #Degradation by species degradation.species &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Degradation&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Degradation functions&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) #Structure by species structure.species &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Structure&quot;, color = &quot;species&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=squirrel_colors) + scale_fill_manual(values=paste0(squirrel_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Structural functions&quot;) + theme( legend.position = &quot;none&quot;, axis.title.x = element_blank()) sp.legend &lt;- get_legend(biosynth.species) ggarrange(biosynth.species, degradation.species, structure.species, #+ rremove(&quot;x.text&quot;), legend.grob = sp.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 1, nrow = 3) ### Differences in bacterial functional capacity #grid.arrange(arrangeGrob(p1, p5,p3, p4, ncol = 2)) merge_gift$area_type &lt;-factor(merge_gift$area_type, levels = c(&quot;rural&quot;, &quot;suburban&quot;, &quot;urban&quot;)) area_colors &lt;- c(&quot;#76b183&quot;,&quot;#d57d2c&quot;,&quot;#6b7398&quot;) #Biosynthesis by species*area_type biosynth.area &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Biosynthesis&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=paste0(area_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Biosynthesis&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Area type&quot;), fill=&quot;none&quot;) #Degradation by species*area_type degradation.area &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Degradation&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=paste0(area_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Degradation&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Area type&quot;), fill=&quot;none&quot;) #Structure by species*area_type structure.area &lt;- merge_gift %&gt;% ggboxplot(., x = &quot;species&quot;, y = &quot;Structure&quot;, color = &quot;area_type&quot;, fill=&quot;white&quot;, add=&quot;jitter&quot;) + scale_color_manual(values=area_colors) + scale_fill_manual(values=paste0(area_colors)) + stat_compare_means() + theme_classic() + labs(y = &quot;Structure&quot;) + theme( legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot;, axis.title.x = element_blank()) + guides(color=guide_legend(title=&quot;Area type&quot;), fill=&quot;none&quot;) area.legend &lt;- get_legend(biosynth.area) ggarrange(biosynth.area, degradation.area, structure.area, #+ rremove(&quot;x.text&quot;), legend.grob = area.legend, legend=&quot;right&quot;, common.legend = TRUE, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), ncol = 1, nrow = 3) "],["hmsc-setup.html", "Chapter 8 HMSC setup 8.1 Prepare input for Hmsc 8.2 Define formulas of the Hmsc model 8.3 Define and Hmsc models 8.4 Define MCMC 8.5 Generate Hmsc executables 8.6 Fit Hmsc models (in Mjolnir HPC) 8.7 Assess chain convergence", " Chapter 8 HMSC setup rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) singlem &lt;- read.csv(&quot;data/singlem.csv&quot;,sep=&quot;;&quot;,header=T) 8.1 Prepare input for Hmsc sample_metadata &lt;- sample_metadata %&gt;% right_join(singlem, by = join_by(sample == sample)) %&gt;% filter(development==&quot;Adult&quot;) %&gt;% #remove juveniles, nursing and pregnant females filter(est_mapp&gt;0.8) #remove 5 samples with low DAMR selected_genomes0 &lt;- sample_metadata %&gt;% pull(sample) # Subset by prevalence (present in more than 5 samples) selected_genomes1 &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(any_of(selected_genomes0)) %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) != 0) &gt;= 5) %&gt;% rownames() # Subset by minimum representation of 1% relative abundance in at least 5 samples selected_genomes2 &lt;- genome_counts %&gt;% filter(genome %in% selected_genomes1) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% hilldiv2::tss() %&gt;% as.data.frame() %&gt;% filter(rowSums(across(starts_with(&quot;EHI&quot;)) &gt;= 0.01) &gt;= 5) %&gt;% rownames() # Subset genome metadata genome_metadata_subset &lt;- genome_metadata %&gt;% filter(genome %in% selected_genomes2) # Random effects data (study design) StudyDesign &lt;- sample_metadata %&gt;% select(sample,animal,sampling_site) %&gt;% mutate(sampling_site = factor(sampling_site)) %&gt;% mutate(animal = factor(animal)) %&gt;% column_to_rownames(&quot;sample&quot;) # Genome count table (quantitative community data) YData &lt;- read_counts %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes mutate(across(where(is.numeric), ~ . +1 )) %&gt;% #add +1 pseudocount to remove zeros mutate(across(where(is.numeric), ~ . / (genome_metadata_subset$length / 150) )) %&gt;% #transform to genome counts mutate(across(where(is.numeric), ~ log(.) )) %&gt;% #log-transform column_to_rownames(&quot;genome&quot;) %&gt;% select(all_of(row.names(StudyDesign))) %&gt;% #filter only faecal samples as.data.frame() %&gt;% t() # transpose # Fixed effects data (explanatory variables) XData &lt;- sample_metadata %&gt;% select(sample,species,index500,season) %&gt;% mutate(logseqdepth=read_counts %&gt;% #total log-sequencing depth select(all_of(row.names(StudyDesign))) %&gt;% colSums() %&gt;% log() ) %&gt;% mutate(index500 = index500) %&gt;% mutate(species = factor(species, levels=c(&quot;Sciurus vulgaris&quot;,&quot;Sciurus carolinensis&quot;))) %&gt;% mutate(season = factor(season, levels=c(&quot;spring-summer&quot;,&quot;autumn&quot;,&quot;winter&quot;))) %&gt;% column_to_rownames(&quot;sample&quot;) # Genome trait data TrData &lt;- genome_gifts %&gt;% filter(genome %in% selected_genomes2) %&gt;% #subset genomes arrange(match(genome, colnames(YData))) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% to.functions(.,GIFT_db) %&gt;% as.data.frame() # Genome phylogeny PData &lt;- genome_tree 8.2 Define formulas of the Hmsc model # Fixed effects formula XFormula1 = ~species + index500 + season + logseqdepth XFormula2 = ~species + index500 + season + logseqdepth + species*index500 XFormula3 = ~species + index500 + season + logseqdepth + species*season XFormula4 = ~species + index500 + season + logseqdepth + species*season + species*index500 # Study design rL.animal = HmscRandomLevel(units = levels(StudyDesign$animal)) rL.sampling_site = HmscRandomLevel(units = levels(StudyDesign$sampling_site)) 8.3 Define and Hmsc models #Define models model.1a = Hmsc(Y=YData, XData = XData, XFormula = XFormula1, studyDesign = StudyDesign, phyloTree = PData, ranLevels = list(&quot;animal&quot;=rL.animal), distr = &quot;normal&quot;, YScale = TRUE) model.1b = Hmsc(Y=YData, XData = XData, XFormula = XFormula1, studyDesign = StudyDesign, phyloTree = PData, ranLevels = list(&quot;animal&quot;=rL.animal, &quot;sampling_site&quot;=rL.sampling_site), distr = &quot;normal&quot;, YScale = TRUE) model.2a = Hmsc(Y=YData, XData = XData, XFormula = XFormula2, studyDesign = StudyDesign, phyloTree = PData, ranLevels = list(&quot;animal&quot;=rL.animal), distr = &quot;normal&quot;, YScale = TRUE) model.2b = Hmsc(Y=YData, XData = XData, XFormula = XFormula2, studyDesign = StudyDesign, phyloTree = PData, ranLevels = list(&quot;animal&quot;=rL.animal, &quot;sampling_site&quot;=rL.sampling_site), distr = &quot;normal&quot;, YScale = TRUE) model.3a = Hmsc(Y=YData, XData = XData, XFormula = XFormula3, studyDesign = StudyDesign, phyloTree = PData, ranLevels = list(&quot;animal&quot;=rL.animal), distr = &quot;normal&quot;, YScale = TRUE) model.3b = Hmsc(Y=YData, XData = XData, XFormula = XFormula3, studyDesign = StudyDesign, phyloTree = PData, ranLevels = list(&quot;animal&quot;=rL.animal, &quot;sampling_site&quot;=rL.sampling_site), distr = &quot;normal&quot;, YScale = TRUE) model.4a = Hmsc(Y=YData, XData = XData, XFormula = XFormula4, studyDesign = StudyDesign, phyloTree = PData, ranLevels = list(&quot;animal&quot;=rL.animal), distr = &quot;normal&quot;, YScale = TRUE) model.4b = Hmsc(Y=YData, XData = XData, XFormula = XFormula4, studyDesign = StudyDesign, phyloTree = PData, ranLevels = list(&quot;animal&quot;=rL.animal, &quot;sampling_site&quot;=rL.sampling_site), distr = &quot;normal&quot;, YScale = TRUE) #Save list of models as an R object. model_list = list(model.1a=model.1a,model.1b=model.1b,model.2a=model.2a,model.2b=model.2b,model.3a=model.3a,model.3b=model.3b, model.4a=model.4a,model.4b=model.4b) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} save(model_list, file = &quot;hmsc/hmsc.Rdata&quot;) Upload hmsc/hmsc.Rdata to the HPC respecting the directory structure. 8.4 Define MCMC # How often to sample the MCMC MCMC_samples_list = 250 # The number of MCMC steps between each recording sample MCMC_thin_list = c(1, 10) # The number of MCMC chains to use nChains = 4 8.5 Generate Hmsc executables The next chunk generates shell files for every combination of model, MCMC samples and MCMM thinning, ready to be launched as SLURM jobs. modelchains &lt;- expand.grid(model = names(model_list), sample = MCMC_samples_list, thin = MCMC_thin_list) if (!dir.exists(&quot;hmsc&quot;)){dir.create(&quot;hmsc&quot;)} for(i in c(1:nrow(modelchains))){ modelname=as.character(modelchains[i,1]) sample=modelchains[i,2] thin=modelchains[i,3] executablename &lt;- paste0(&quot;hmsc/exe_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.sh&quot;) fitname &lt;- paste0(&quot;hmsc/fit_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) convname &lt;- paste0(&quot;hmsc/conv_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin,&quot;.Rdata&quot;) model &lt;- paste0(&#39;model_list$&#39;,modelname) psrf.beta.name &lt;- paste0(&quot;psrf.beta.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.gamma.name &lt;- paste0(&quot;psrf.gamma.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) psrf.rho.name &lt;- paste0(&quot;psrf.rho.&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) jobname &lt;- paste0(&quot;hmsc_&quot;,modelname,&quot;_&quot;,sample,&quot;_&quot;,thin) minutes &lt;- round(sample * thin * (ncol(YData)/50), 0) code &lt;- sprintf(&quot;#!/bin/bash #SBATCH --job-name=%s # Job name #SBATCH --nodes=1 #SBATCH --ntasks=4 # Run on 4 CPUs #SBATCH --mail-user=antton.alberdi@sund.ku.dk #SBATCH --mem=200gb # Job memory request #SBATCH --time=%d # In minutes # Activate conda environment module load mamba/1.3.1 if ! conda info --envs | grep -q hmsc; then mamba create -p ./hmsc/hmsc_env -y r-essentials r-base r-tidyverse r-Hmsc fi # Activate conda environment source activate ./hmsc/hmsc_env # Run R script Rscript -e &#39; library(tidyverse) library(Hmsc) # Load formulas and data load(\\&quot;hmsc/hmsc.Rdata\\&quot;) # Declare placeholders modelname = \\&quot;%s\\&quot; model = %s fitname = \\&quot;%s\\&quot; convname = \\&quot;%s\\&quot; sample = %d thin = %d nchains = %d # Run model fitting m = sampleMcmc(hM = model, samples = sample, thin = thin, adaptNf=rep(ceiling(0.4*sample*thin),model$nr), transient = ceiling(0.5*sample*thin), nChains = nchains, nParallel = nchains) # Assess chain convergence mpost = convertToCodaObject(m, spNamesNumbers = c(T,F), covNamesNumbers = c(T,F), Beta = TRUE, Gamma = TRUE, V = FALSE, Sigma = FALSE, Rho = TRUE, Eta = FALSE, Lambda = FALSE, Alpha = FALSE, Omega = FALSE, Psi = FALSE, Delta = FALSE) # Convert to CODA object # Fixed effects assign(paste0(\\&quot;psrf.beta.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Beta,multivariate=FALSE)$psrf) # Traits assign(paste0(\\&quot;psrf.gamma.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Gamma,multivariate=FALSE)$psrf) # Phylogeny assign(paste0(\\&quot;psrf.rho.\\&quot;, modelname,\\&quot;_\\&quot;,sample,\\&quot;_\\&quot;,thin), gelman.diag(mpost$Rho,multivariate=FALSE)$psrf) # Write convergence data save(%s, %s, %s, file=convname) # Save model fit object save(m, file=fitname) &#39; &quot;, jobname, minutes, modelname, model, fitname, convname, sample, thin, nChains, psrf.beta.name, psrf.gamma.name, psrf.rho.name) writeLines(code, executablename) } Upload the produced hmsc/exe_XXXXX.sh files to the HPC respecting the directory structure. 8.6 Fit Hmsc models (in Mjolnir HPC) Launch the SLURM jobs by using: # Submit all .sh files in the hmsc folder for jobfile in hmsc/exe_*.sh; do sbatch &quot;$jobfile&quot; done #Or launch them one by one only the ones you want to launch sbatch hmsc/exe_model1_250_10.sh sbatch hmsc/exe_model2_250_10.sh sbatch hmsc/exe_model3_250_10.sh sbatch hmsc/exe_model4_250_10.sh sbatch hmsc/exe_model5_250_1.sh sbatch hmsc/exe_model6_250_10.sh sbatch hmsc/exe_model7_250_10.sh sbatch hmsc/exe_model8_250_10.sh 8.7 Assess chain convergence Convergence diagnostic values substantially above 1 indicate lack of convergence. Values below 1.1 are considered good enough # Load all conv file available in the hmsc folder # list.files(path = &quot;hmsc&quot;, pattern = &quot;^conv&quot;, full.names = TRUE, include.dirs = TRUE) %&gt;% # lapply(.,load,.GlobalEnv) list.files(path = &quot;hmsc&quot;, pattern = &quot;^conv&quot;, full.names = TRUE, include.dirs = TRUE) %&gt;% walk(~ { print(paste(&quot;Loading file:&quot;, .x)) # Debugging output: Print the file being loaded load(.x, envir = .GlobalEnv) }) # Create a merged psrf.beta (genome) plot ls() %&gt;% grep(&quot;^psrf\\\\.beta&quot;, ., value = TRUE) %&gt;% map_dfr(~ { mat &lt;- get(.x) data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% rownames_to_column(var=&quot;parameter&quot;) %&gt;% mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.beta.&quot;,&quot;&quot;,.)) %&gt;% mutate(sample = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(2)) %&gt;% #extract sample info from model name mutate(thin = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(3)) #extract thin info from model name }) %&gt;% ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + ylim(0.9,2)+ labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ theme_classic()+ coord_flip() # Create a merged psrf.gamma (trait) plot ls() %&gt;% grep(&quot;^psrf\\\\.gamma&quot;, ., value = TRUE) %&gt;% map_dfr(~ { mat &lt;- get(.x) data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% rownames_to_column(var=&quot;parameter&quot;) %&gt;% mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.gamma.&quot;,&quot;&quot;,.)) %&gt;% mutate(sample = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(2)) %&gt;% #extract sample info from model name mutate(thin = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(3)) #extract thin info from model name }) %&gt;% ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + ylim(0.9,2)+ labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ theme_classic()+ coord_flip() # Create a merged psrf.rho (phylogeny) plot ls() %&gt;% grep(&quot;^psrf\\\\.rho&quot;, ., value = TRUE) %&gt;% map_dfr(~ { mat &lt;- get(.x) data.frame(modelchain = .x, as.data.frame(mat, , stringsAsFactors = FALSE)) %&gt;% rownames_to_column(var=&quot;parameter&quot;) %&gt;% mutate(model = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(1) %&gt;% gsub(&quot;psrf.rho.&quot;,&quot;&quot;,.)) %&gt;% mutate(sample = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(2)) %&gt;% #extract sample info from model name mutate(thin = str_split(modelchain, &quot;_&quot;) %&gt;% map_chr(3)) #extract thin info from model name }) %&gt;% ggplot(.,aes(x=reorder(modelchain,-Point.est.,fun=function(x) {quantile(x, probs = 0.9)}),y=Point.est.)) + geom_violin(fill=&quot;#b8d9e3&quot;, color=&quot;#328da8&quot;) + geom_jitter(alpha=0.3,size=0.2, color=&quot;#a8babf&quot;) + stat_summary(fun=function(x) {quantile(x, probs = 0.9)}, geom=&quot;crossbar&quot;, width=0.2, color=&quot;orange&quot;) + geom_hline(yintercept=1.1, linetype=&quot;dashed&quot;, color = &quot;red&quot;) + ylim(0.9,2)+ labs(x=&quot;Model chains&quot;,y=&quot;Parameter estimates&quot;)+ theme_classic()+ coord_flip() # Select modelchain of interest load(&quot;hmsc/fit_model.1a_250_10.Rdata&quot;) m1a.WAIC &lt;- computeWAIC(m, ghN = 10, byColumn = TRUE) %&gt;% sum() load(&quot;hmsc/fit_model.1b_250_10.Rdata&quot;) m1b.WAIC &lt;- computeWAIC(m, ghN = 10, byColumn = TRUE) %&gt;% sum() load(&quot;hmsc/fit_model.2a_250_10.Rdata&quot;) m2a.WAIC &lt;- computeWAIC(m, ghN = 10, byColumn = TRUE) %&gt;% sum() load(&quot;hmsc/fit_model.2b_250_10.Rdata&quot;) m2b.WAIC &lt;- computeWAIC(m, ghN = 10, byColumn = TRUE) %&gt;% sum() load(&quot;hmsc/fit_model.3a_250_10.Rdata&quot;) m3a.WAIC &lt;- computeWAIC(m, ghN = 10, byColumn = TRUE) %&gt;% sum() load(&quot;hmsc/fit_model.3b_250_10.Rdata&quot;) m3b.WAIC &lt;- computeWAIC(m, ghN = 10, byColumn = TRUE) %&gt;% sum() load(&quot;hmsc/fit_model.4a_250_10.Rdata&quot;) m4a.WAIC &lt;- computeWAIC(m, ghN = 10, byColumn = TRUE) %&gt;% sum() load(&quot;hmsc/fit_model.4b_250_10.Rdata&quot;) m4b.WAIC &lt;- computeWAIC(m, ghN = 10, byColumn = TRUE) %&gt;% sum() WAICsum &lt;- c(m1a.WAIC,m1b.WAIC,m2a.WAIC,m2b.WAIC,m3a.WAIC,m3b.WAIC,m4a.WAIC,m4b.WAIC) %&gt;% rbind() WAICsum &lt;- c(m1a.WAIC,m1b.WAIC,m2a.WAIC,m2b.WAIC,m3a.WAIC,m3b.WAIC,m4a.WAIC) %&gt;% rbind() print(WAICsum) # print(WAICsum) # print(WAICmedian) "],["hmsc-analysis.html", "Chapter 9 HMSC analysis 9.1 Model list 9.2 Compute variance partitioning", " Chapter 9 HMSC analysis rm(list=ls()) #clear environment load(&quot;data/squirrels_data.Rdata&quot;) options(contrasts = c(&#39;contr.sum&#39;,&#39;contr.poly&#39;)) 9.1 Model list # Select modelchain of interest load(&quot;hmsc/fit_model.3a_250_10.Rdata&quot;) levels.1a &lt;- c(&quot;species&quot;,&quot;index500&quot;,&quot;season&quot;,&quot;logseqdepth&quot;,&quot;Random: animal&quot;) levels.1b &lt;- c(&quot;species&quot;,&quot;index500&quot;,&quot;season&quot;,&quot;logseqdepth&quot;,&quot;Random: animal&quot;, &quot;Random: sampling_site&quot;) levels.2a &lt;- c(&quot;species&quot;,&quot;index500&quot;,&quot;season&quot;,&quot;species:index500&quot;,&quot;logseqdepth&quot;,&quot;Random: animal&quot;) levels.2b &lt;- c(&quot;species&quot;,&quot;index500&quot;,&quot;season&quot;,&quot;species:index500&quot;,&quot;logseqdepth&quot;,&quot;Random: animal&quot;, &quot;Random: sampling_site&quot;) levels.3a &lt;- c(&quot;species&quot;,&quot;index500&quot;,&quot;season&quot;,&quot;species:season&quot;,&quot;logseqdepth&quot;,&quot;Random: animal&quot;) levels.3b &lt;- c(&quot;species&quot;,&quot;index500&quot;,&quot;season&quot;,&quot;species:season&quot;,&quot;logseqdepth&quot;,&quot;Random: animal&quot;, &quot;Random: sampling_site&quot;) levels.4a &lt;- c(&quot;species&quot;,&quot;index500&quot;,&quot;season&quot;,&quot;species:index500&quot;,&quot;species:season&quot;,&quot;logseqdepth&quot;,&quot;Random: animal&quot;) levels.4b &lt;- c(&quot;species&quot;,&quot;index500&quot;,&quot;season&quot;,&quot;logseqdepth&quot;,&quot;species:index500&quot;,&quot;species:season&quot;,&quot;Random: animal&quot;, &quot;Random: sampling_site&quot;) 9.2 Compute variance partitioning # Compute variance partitioning varpart=computeVariancePartitioning(m) varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=levels.3a)) %&gt;% group_by(variable) %&gt;% summarise(mean=mean(value)*100,sd=sd(value)*100) %&gt;% tt() tinytable_602hi2e82a5gnon9tlfj .table td.tinytable_css_63q59bdkl3ydntqjzacm, .table th.tinytable_css_63q59bdkl3ydntqjzacm { border-bottom: solid 0.1em #d3d8dc; } variable mean sd species 27.912981 28.448176 index500 1.272544 2.046256 season 8.273125 5.025935 species:season 8.617260 5.298745 logseqdepth 3.573087 2.297375 Random: animal 50.351004 26.142128 # Basal tree varpart_tree &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #Varpart table varpart_table &lt;- varpart$vals %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;variable&quot;) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(variable=factor(variable, levels=rev(levels.3a))) %&gt;% mutate(genome=factor(genome, levels=rev(varpart_tree$tip.label))) #Phylums phylum_colors_2 &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% varpart_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree varpart_tree &lt;- varpart_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum colors next to the tree tips varpart_tree &lt;- gheatmap(varpart_tree, phylum_colors_2, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap varpart_tree &lt;- varpart_tree + new_scale_fill() # Add variance stacked barplot vertical_tree &lt;- varpart_tree + #scale_fill_manual(values=c(&quot;#34738f&quot;,&quot;#cccccc&quot;,&quot;#ed8a45&quot;,&quot;#b2b530&quot;,&quot;#be3e2b&quot;,&quot;#f6de6c&quot;,&quot;#83bb90&quot;))+ scale_fill_manual(values=c(&quot;#34738f&quot;,&quot;#cccccc&quot;,&quot;#ed8a45&quot;,&quot;#b2b530&quot;,&quot;#be3e2b&quot;,&quot;#83bb90&quot;,&quot;#f6de6c&quot;))+ #&quot;#122f3d&quot; geom_fruit( data=varpart_table, geom=geom_bar, mapping = aes(x=value, y=genome, fill=variable, group=variable), pwidth = 2, offset = 0.05, width= 1, orientation=&quot;y&quot;, stat=&quot;identity&quot;)+ labs(fill=&quot;Variable&quot;) vertical_tree # Select desired support threshold support=0.9 negsupport=1-support # Basal tree postestimates_tree &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #plotBeta(hM=m, post=getPostEstimate(hM=m, parName=&quot;Beta&quot;), param = &quot;Support&quot;, plotTree = TRUE, covNamesNumbers=c(1,0)) # Posterior estimate table post_beta &lt;- getPostEstimate(hM=m, parName=&quot;Beta&quot;)$support %&gt;% as.data.frame() %&gt;% mutate(variable=m$covNames) %&gt;% pivot_longer(!variable, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome=factor(genome, levels=rev(postestimates_tree$tip.label))) %&gt;% mutate(value = case_when( value &gt;= support ~ &quot;Positive&quot;, value &lt;= negsupport ~ &quot;Negative&quot;, TRUE ~ &quot;Neutral&quot;)) %&gt;% mutate(value=factor(value, levels=c(&quot;Positive&quot;,&quot;Neutral&quot;,&quot;Negative&quot;))) %&gt;% pivot_wider(names_from = variable, values_from = value) %&gt;% # rename(intercept=2, # species.grey=3, # index500=4, # season.autumn=5, # season.winter=6, # logseqdepth=7, # species.grey_season.autumn=8, # species.grey_season.winter=9) %&gt;% # select(genome,builtup,species,season_autumn,season_winter, builtup_species,species_season_autumn,species_season_winter) %&gt;% #rename(intercept=2, sp_vulgaris=3, area_semi=4, area_urban=5, season_spring=6, season_winter=7, logseqdepth=8, sp_vulgarisxarea_semi=9, sp_vulgarisxarea_urban =10, sp_vulgarisxseason_spring=11, sp_vulgarisxseason_winter=12) %&gt;% #select(genome,sp_vulgaris,area_semi,area_urban,sp_vulgarisxarea_semi,sp_vulgarisxarea_urban,season_spring,season_winter,sp_vulgarisxseason_spring,sp_vulgarisxseason_winter) %&gt;% column_to_rownames(var=&quot;genome&quot;) #Phylums phylum_colors_2 &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% filter(genome %in% postestimates_tree$tip.label) %&gt;% arrange(match(genome, varpart_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() # Basal ggtree postestimates_tree &lt;- postestimates_tree %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips postestimates_tree &lt;- gheatmap(postestimates_tree, phylum_colors_2, offset=-0.2, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic)+ labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap postestimates_tree &lt;- postestimates_tree + new_scale_fill() # Add posterior significant heatmap postestimates_tree &lt;- gheatmap(postestimates_tree, post_beta, offset=0, width=0.5, colnames=TRUE, colnames_position=&quot;top&quot;,colnames_angle=90, colnames_offset_y=1, hjust=0) + scale_fill_manual(values=c(&quot;#be3e2b&quot;,&quot;#f4f4f4&quot;,&quot;#b2b530&quot;))+ labs(fill=&quot;Trend&quot;) postestimates_tree + vexpand(.25, 1) # expand top #Compute the residual correlation matrix OmegaCor = computeAssociations(m) # Refernece tree (for sorting genomes) genome_tree_subset &lt;- genome_tree %&gt;% keep.tip(., tip=m$spNames) #Co-occurrence matrix at the animal level supportLevel = 0.95 toPlot = ((OmegaCor[[1]]$support&gt;supportLevel) + (OmegaCor[[1]]$support&lt;(1-supportLevel))&gt;0)*OmegaCor[[1]]$mean matrix &lt;- toPlot %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;genome1&quot;) %&gt;% pivot_longer(!genome1, names_to = &quot;genome2&quot;, values_to = &quot;cor&quot;) %&gt;% mutate(genome1= factor(genome1, levels=genome_tree_subset$tip.label)) %&gt;% mutate(genome2= factor(genome2, levels=genome_tree_subset$tip.label)) %&gt;% ggplot(aes(x = genome1, y = genome2, fill = cor)) + geom_tile() + scale_fill_gradient2(low = &quot;#be3e2b&quot;, mid = &quot;#f4f4f4&quot;, high = &quot;#b2b530&quot;)+ theme_void() vtree &lt;- genome_tree_subset %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(.) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** vtreeD &lt;- genome_tree_subset %&gt;% force.ultrametric(.,method=&quot;extend&quot;) %&gt;% ggtree(.) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #+ layout_dendrogram() #create composite figure grid.arrange(grobs = list(vtreeD,matrix,vtree), layout_matrix = rbind(c(4,1,1,1,1,1,1,1,1,1,1,1), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2), c(3,2,2,2,2,2,2,2,2,2,2,2))) # Overall species prediction pred_species &lt;- constructGradient(m, focalVariable = &quot;species&quot;, non.focalVariables = 1, ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) %&gt;% as.data.frame() %&gt;% mutate(species=c(&quot;Sciurus vulgaris&quot;,&quot;Sciurus carolinensis&quot;)) %&gt;% pivot_longer(!species, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome = sub(&quot;(.*\\\\..*\\\\.)[^.]+.*&quot;, &quot;\\\\1&quot;, genome)) %&gt;% #remove iteration suffix mutate(genome = sub(&quot;\\\\.$&quot;, &quot;&quot;, genome)) pred_species %&gt;% pivot_wider(names_from = species, values_from = value) %&gt;% unnest(c(`Sciurus carolinensis`, `Sciurus vulgaris`)) %&gt;% mutate(diff.red_grey = `Sciurus carolinensis` - `Sciurus vulgaris`) %&gt;% select(genome, diff.red_grey) %&gt;% left_join(genome_metadata, by=join_by(genome==genome)) %&gt;% mutate(genome= factor(genome, levels=genome_tree_subset$tip.label)) %&gt;% ggplot(., aes(y=genome, x=diff.red_grey, fill=phylum, color=phylum)) + scale_color_manual(values=phylum_colors)+ geom_vline(xintercept = 0)+ scale_fill_manual(values=alpha(phylum_colors,0.3))+ geom_boxplot(outlier.shape = NA) + theme_classic() + theme(axis.text.y = element_blank()) gradient = c(0:100) gradientlength = length(gradient) # Overall urbanisation prediction pred_urban &lt;- constructGradient(m, focalVariable = &quot;index500&quot;, non.focalVariables = 1, ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) %&gt;% do.call(rbind,.) %&gt;% as.data.frame() %&gt;% mutate(index500=rep(gradient,1000)) %&gt;% pivot_longer(-index500, names_to = &quot;genome&quot;, values_to = &quot;value&quot;) %&gt;% mutate(genome = sub(&quot;(.*\\\\..*\\\\.)[^.]+.*&quot;, &quot;\\\\1&quot;, genome)) %&gt;% #remove iteration suffix mutate(genome = sub(&quot;\\\\.$&quot;, &quot;&quot;, genome)) #remove iteration suffix pred_urban %&gt;% mutate(genome=factor(genome, levels=genome_tree_subset$tip.label)) %&gt;% group_by(index500,genome) %&gt;% summarise(mean=mean(value)) %&gt;% ggplot(., aes(y=genome, x=index500, fill=mean, color=mean)) + geom_tile() + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + theme_classic()+ theme( axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank() ) # Urbanisation Sciurus vulgaris prediction pred_urban_SciVu &lt;- constructGradient(m, focalVariable = &quot;index500&quot;, non.focalVariables = list(species=list(3,&quot;Sciurus vulgaris&quot;)), ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) # weights: 9 (4 variable) initial value 170.284905 final value 168.819259 converged # Urbanisation Sciurus carolinensis prediction pred_urban_SciCa &lt;- constructGradient(m, focalVariable = &quot;index500&quot;, non.focalVariables = list(species=list(3,&quot;Sciurus carolinensis&quot;)), ngrid=gradientlength) %&gt;% predict(m, Gradient = ., expected = TRUE) # weights: 9 (4 variable) initial value 170.284905 final value 168.819259 converged pred_urban_SciVu %&gt;% mutate(genome=factor(genome, levels=genome_tree_subset$tip.label)) %&gt;% group_by(index500,genome) %&gt;% summarise(mean=mean(value)) %&gt;% ggplot(., aes(y=genome, x=index500, fill=mean, color=mean)) + geom_tile() + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + theme_classic()+ theme( axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank() ) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
